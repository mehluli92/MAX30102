
tired.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a560  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a6e8  0800a6e8  0001a6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a704  0800a704  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a704  0800a704  0001a704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a70c  0800a70c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a70c  0800a70c  0001a70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a710  0800a710  0001a710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000a70  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017906  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003be9  00000000  00000000  000379c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  0003b5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010d8  00000000  00000000  0003c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a51  00000000  00000000  0003d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e96  00000000  00000000  00061341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbd6e  00000000  00000000  0007a1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145f45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e48  00000000  00000000  00145f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a6d0 	.word	0x0800a6d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800a6d0 	.word	0x0800a6d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fedb 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f83d 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f967 	bl	80007ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80004de:	f000 f8a3 	bl	8000628 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e2:	f000 f8fd 	bl	80006e0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e6:	f000 f92b 	bl	8000740 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ea:	f009 fc9b 	bl	8009e24 <MX_USB_HOST_Init>
  MX_I2C3_Init();
 80004ee:	f000 f8c9 	bl	8000684 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  config_max30102_sensor();
 80004f2:	f000 fa59 	bl	80009a8 <config_max30102_sensor>
  initiate_max30102_temp_measurement();
 80004f6:	f000 fa7b 	bl	80009f0 <initiate_max30102_temp_measurement>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004fa:	f009 fcb9 	bl	8009e70 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
//    max._ir_samples[0] = 300;

    max30102_interrupt_handler(&max);
 80004fe:	4811      	ldr	r0, [pc, #68]	; (8000544 <main+0x78>)
 8000500:	f000 fbb0 	bl	8000c64 <max30102_interrupt_handler>

//    ir[1] = max._ir_samples[1];
//    ir[2] = max._ir_samples[2];

    for(uint8_t i = 0; i<=32; i++)
 8000504:	2300      	movs	r3, #0
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	e014      	b.n	8000534 <main+0x68>
    {
    	ir[i] = max._ir_samples[i];
 800050a:	79fa      	ldrb	r2, [r7, #7]
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	490d      	ldr	r1, [pc, #52]	; (8000544 <main+0x78>)
 8000510:	3202      	adds	r2, #2
 8000512:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000516:	490c      	ldr	r1, [pc, #48]	; (8000548 <main+0x7c>)
 8000518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	red[i] = max._red_samples[i];
 800051c:	79fa      	ldrb	r2, [r7, #7]
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4908      	ldr	r1, [pc, #32]	; (8000544 <main+0x78>)
 8000522:	3222      	adds	r2, #34	; 0x22
 8000524:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000528:	4908      	ldr	r1, [pc, #32]	; (800054c <main+0x80>)
 800052a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(uint8_t i = 0; i<=32; i++)
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	3301      	adds	r3, #1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b20      	cmp	r3, #32
 8000538:	d9e7      	bls.n	800050a <main+0x3e>
    }

    t = max.temperature;
 800053a:	4b02      	ldr	r3, [pc, #8]	; (8000544 <main+0x78>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	4a04      	ldr	r2, [pc, #16]	; (8000550 <main+0x84>)
 8000540:	6013      	str	r3, [r2, #0]
    MX_USB_HOST_Process();
 8000542:	e7da      	b.n	80004fa <main+0x2e>
 8000544:	200001f4 	.word	0x200001f4
 8000548:	20000304 	.word	0x20000304
 800054c:	20000384 	.word	0x20000384
 8000550:	20000404 	.word	0x20000404

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f009 ffae 	bl	800a4c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a27      	ldr	r2, [pc, #156]	; (8000620 <SystemClock_Config+0xcc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xd0>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c4:	2308      	movs	r3, #8
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d2:	2307      	movs	r3, #7
 80005d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fe02 	bl	80061e4 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e6:	f000 fa0f 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2105      	movs	r1, #5
 8000608:	4618      	mov	r0, r3
 800060a:	f006 f863 	bl	80066d4 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000614:	f000 f9f8 	bl	8000a08 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_I2C1_Init+0x50>)
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <MX_I2C1_Init+0x54>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_I2C1_Init+0x50>)
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <MX_I2C1_Init+0x58>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_I2C1_Init+0x50>)
 8000646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_I2C1_Init+0x50>)
 8000666:	f002 fdc3 	bl	80031f0 <HAL_I2C_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000670:	f000 f9ca 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000ac 	.word	0x200000ac
 800067c:	40005400 	.word	0x40005400
 8000680:	000186a0 	.word	0x000186a0

08000684 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2C3_Init+0x50>)
 800068a:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <MX_I2C3_Init+0x54>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_I2C3_Init+0x50>)
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_I2C3_Init+0x58>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_I2C3_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_I2C3_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_I2C3_Init+0x50>)
 80006a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_I2C3_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_I2C3_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_I2C3_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_I2C3_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_I2C3_Init+0x50>)
 80006c2:	f002 fd95 	bl	80031f0 <HAL_I2C_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 f99c 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000100 	.word	0x20000100
 80006d8:	40005c00 	.word	0x40005c00
 80006dc:	00061a80 	.word	0x00061a80

080006e0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_I2S3_Init+0x54>)
 80006e6:	4a14      	ldr	r2, [pc, #80]	; (8000738 <MX_I2S3_Init+0x58>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2S3_Init+0x54>)
 80006ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_I2S3_Init+0x54>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2S3_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <MX_I2S3_Init+0x54>)
 8000700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000704:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_I2S3_Init+0x54>)
 8000708:	4a0c      	ldr	r2, [pc, #48]	; (800073c <MX_I2S3_Init+0x5c>)
 800070a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2S3_Init+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_I2S3_Init+0x54>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2S3_Init+0x54>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_I2S3_Init+0x54>)
 8000720:	f005 f8c0 	bl	80058a4 <HAL_I2S_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800072a:	f000 f96d 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000154 	.word	0x20000154
 8000738:	40003c00 	.word	0x40003c00
 800073c:	00017700 	.word	0x00017700

08000740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_SPI1_Init+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI1_Init+0x64>)
 800074c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI1_Init+0x64>)
 800076c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000770:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI1_Init+0x64>)
 800078c:	220a      	movs	r2, #10
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000792:	f006 faeb 	bl	8006d6c <HAL_SPI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 f934 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000019c 	.word	0x2000019c
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	4b72      	ldr	r3, [pc, #456]	; (8000990 <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a71      	ldr	r2, [pc, #452]	; (8000990 <MX_GPIO_Init+0x1e4>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b6f      	ldr	r3, [pc, #444]	; (8000990 <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	4b6b      	ldr	r3, [pc, #428]	; (8000990 <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a6a      	ldr	r2, [pc, #424]	; (8000990 <MX_GPIO_Init+0x1e4>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b68      	ldr	r3, [pc, #416]	; (8000990 <MX_GPIO_Init+0x1e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b64      	ldr	r3, [pc, #400]	; (8000990 <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a63      	ldr	r2, [pc, #396]	; (8000990 <MX_GPIO_Init+0x1e4>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b61      	ldr	r3, [pc, #388]	; (8000990 <MX_GPIO_Init+0x1e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b5d      	ldr	r3, [pc, #372]	; (8000990 <MX_GPIO_Init+0x1e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a5c      	ldr	r2, [pc, #368]	; (8000990 <MX_GPIO_Init+0x1e4>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b5a      	ldr	r3, [pc, #360]	; (8000990 <MX_GPIO_Init+0x1e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b56      	ldr	r3, [pc, #344]	; (8000990 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a55      	ldr	r2, [pc, #340]	; (8000990 <MX_GPIO_Init+0x1e4>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b53      	ldr	r3, [pc, #332]	; (8000990 <MX_GPIO_Init+0x1e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b4f      	ldr	r3, [pc, #316]	; (8000990 <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a4e      	ldr	r2, [pc, #312]	; (8000990 <MX_GPIO_Init+0x1e4>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b4c      	ldr	r3, [pc, #304]	; (8000990 <MX_GPIO_Init+0x1e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2108      	movs	r1, #8
 800086e:	4849      	ldr	r0, [pc, #292]	; (8000994 <MX_GPIO_Init+0x1e8>)
 8000870:	f001 f880 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2101      	movs	r1, #1
 8000878:	4847      	ldr	r0, [pc, #284]	; (8000998 <MX_GPIO_Init+0x1ec>)
 800087a:	f001 f87b 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800087e:	2200      	movs	r2, #0
 8000880:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000884:	4845      	ldr	r0, [pc, #276]	; (800099c <MX_GPIO_Init+0x1f0>)
 8000886:	f001 f875 	bl	8001974 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088a:	2308      	movs	r3, #8
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	483c      	ldr	r0, [pc, #240]	; (8000994 <MX_GPIO_Init+0x1e8>)
 80008a2:	f000 fecb 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4836      	ldr	r0, [pc, #216]	; (8000998 <MX_GPIO_Init+0x1ec>)
 80008be:	f000 febd 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008c2:	2308      	movs	r3, #8
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	482e      	ldr	r0, [pc, #184]	; (8000998 <MX_GPIO_Init+0x1ec>)
 80008de:	f000 fead 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	482a      	ldr	r0, [pc, #168]	; (80009a0 <MX_GPIO_Init+0x1f4>)
 80008f8:	f000 fea0 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008fc:	2304      	movs	r3, #4
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4825      	ldr	r0, [pc, #148]	; (80009a4 <MX_GPIO_Init+0x1f8>)
 8000910:	f000 fe94 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	481c      	ldr	r0, [pc, #112]	; (80009a4 <MX_GPIO_Init+0x1f8>)
 8000932:	f000 fe83 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000936:	f24f 0310 	movw	r3, #61456	; 0xf010
 800093a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4813      	ldr	r0, [pc, #76]	; (800099c <MX_GPIO_Init+0x1f0>)
 8000950:	f000 fe74 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000954:	2320      	movs	r3, #32
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_GPIO_Init+0x1f0>)
 8000968:	f000 fe68 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800096c:	2302      	movs	r3, #2
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000970:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_GPIO_Init+0x1e8>)
 8000982:	f000 fe5b 	bl	800163c <HAL_GPIO_Init>

}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	; 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40021000 	.word	0x40021000
 8000998:	40020800 	.word	0x40020800
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020400 	.word	0x40020400

080009a8 <config_max30102_sensor>:

/* USER CODE BEGIN 4 */

void config_max30102_sensor(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	  //Initiate the MAX30102 code
	   max30102_init(&max, &hi2c3);
 80009ac:	490e      	ldr	r1, [pc, #56]	; (80009e8 <config_max30102_sensor+0x40>)
 80009ae:	480f      	ldr	r0, [pc, #60]	; (80009ec <config_max30102_sensor+0x44>)
 80009b0:	f000 f82f 	bl	8000a12 <max30102_init>
	   max30102_reset(&max);
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <config_max30102_sensor+0x44>)
 80009b6:	f000 f89c 	bl	8000af2 <max30102_reset>
	   max30102_clear_fifo(&max);
 80009ba:	480c      	ldr	r0, [pc, #48]	; (80009ec <config_max30102_sensor+0x44>)
 80009bc:	f000 f8aa 	bl	8000b14 <max30102_clear_fifo>

	   //set mode for sensor
	     max30102_set_mode(&max);
 80009c0:	480a      	ldr	r0, [pc, #40]	; (80009ec <config_max30102_sensor+0x44>)
 80009c2:	f000 f8c6 	bl	8000b52 <max30102_set_mode>
	     //enable interrupts
	     max30102_interrupt_config(&max);
 80009c6:	4809      	ldr	r0, [pc, #36]	; (80009ec <config_max30102_sensor+0x44>)
 80009c8:	f000 f8d4 	bl	8000b74 <max30102_interrupt_config>

	     //spo2 config
	     max30102_spo2_config(&max);
 80009cc:	4807      	ldr	r0, [pc, #28]	; (80009ec <config_max30102_sensor+0x44>)
 80009ce:	f000 f8e2 	bl	8000b96 <max30102_spo2_config>

	     //fifo config
	     max30102_fifo_config(&max);
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <config_max30102_sensor+0x44>)
 80009d4:	f000 f8f0 	bl	8000bb8 <max30102_fifo_config>

	     //led1 current setting
	      max30102_led1_settings(&max);
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <config_max30102_sensor+0x44>)
 80009da:	f000 f8fe 	bl	8000bda <max30102_led1_settings>

	     //led2 current setting
	     max30102_led2_settings(&max);
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <config_max30102_sensor+0x44>)
 80009e0:	f000 f90c 	bl	8000bfc <max30102_led2_settings>
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000100 	.word	0x20000100
 80009ec:	200001f4 	.word	0x200001f4

080009f0 <initiate_max30102_temp_measurement>:

void initiate_max30102_temp_measurement(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    //initiate 1 temperature measurement
    max30102_set_die_temp_en(&max);
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <initiate_max30102_temp_measurement+0x14>)
 80009f6:	f000 f912 	bl	8000c1e <max30102_set_die_temp_en>
    max30102_set_die_temp_rdy(&max);
 80009fa:	4802      	ldr	r0, [pc, #8]	; (8000a04 <initiate_max30102_temp_measurement+0x14>)
 80009fc:	f000 f920 	bl	8000c40 <max30102_set_die_temp_rdy>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200001f4 	.word	0x200001f4

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>

08000a12 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102 *obj, I2C_HandleTypeDef *hi2c)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	601a      	str	r2, [r3, #0]
//    obj->_interrupt_flag = 0;
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3308      	adds	r3, #8
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f009 fd4a 	bl	800a4c4 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3388      	adds	r3, #136	; 0x88
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f009 fd43 	bl	800a4c4 <memset>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <max30102_write>:
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */

void max30102_write(max30102 *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b088      	sub	sp, #32
 8000a4a:	af02      	add	r7, sp, #8
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	461a      	mov	r2, r3
 8000a52:	460b      	mov	r3, r1
 8000a54:	72fb      	strb	r3, [r7, #11]
 8000a56:	4613      	mov	r3, r2
 8000a58:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8000a5a:	893b      	ldrh	r3, [r7, #8]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f009 fd12 	bl	800a488 <malloc>
 8000a64:	4603      	mov	r3, r0
 8000a66:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	7afa      	ldrb	r2, [r7, #11]
 8000a6c:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d009      	beq.n	8000a88 <max30102_write+0x42>
 8000a74:	893b      	ldrh	r3, [r7, #8]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	893a      	ldrh	r2, [r7, #8]
 8000a80:	6879      	ldr	r1, [r7, #4]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f009 fd10 	bl	800a4a8 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, I2C_DELAY);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	893b      	ldrh	r3, [r7, #8]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	2205      	movs	r2, #5
 8000a94:	9200      	str	r2, [sp, #0]
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	21ae      	movs	r1, #174	; 0xae
 8000a9a:	f002 fced 	bl	8003478 <HAL_I2C_Master_Transmit>
    free(payload);
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f009 fcfa 	bl	800a498 <free>
}
 8000aa4:	bf00      	nop
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102 *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af02      	add	r7, sp, #8
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	460b      	mov	r3, r1
 8000aba:	72fb      	strb	r3, [r7, #11]
 8000abc:	4613      	mov	r3, r2
 8000abe:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8000ac0:	7afb      	ldrb	r3, [r7, #11]
 8000ac2:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_WRITE_ADDRESS, &reg_addr, 1, I2C_DELAY);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	6818      	ldr	r0, [r3, #0]
 8000ac8:	f107 0217 	add.w	r2, r7, #23
 8000acc:	2305      	movs	r3, #5
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	21ae      	movs	r1, #174	; 0xae
 8000ad4:	f002 fcd0 	bl	8003478 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_READ_ADDRESS, buf, buflen, I2C_DELAY);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	893b      	ldrh	r3, [r7, #8]
 8000ade:	2205      	movs	r2, #5
 8000ae0:	9200      	str	r2, [sp, #0]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	21af      	movs	r1, #175	; 0xaf
 8000ae6:	f002 fdc5 	bl	8003674 <HAL_I2C_Master_Receive>
 }
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102 *obj)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8000afa:	2340      	movs	r3, #64	; 0x40
 8000afc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MODE_CONFIGURATION, &val, 1);
 8000afe:	f107 020f 	add.w	r2, r7, #15
 8000b02:	2301      	movs	r3, #1
 8000b04:	2109      	movs	r1, #9
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ff9d 	bl	8000a46 <max30102_write>
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102 *obj)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, FIFO_WRITE_POINTER, &val, 3);
 8000b20:	f107 020f 	add.w	r2, r7, #15
 8000b24:	2303      	movs	r3, #3
 8000b26:	2104      	movs	r1, #4
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff8c 	bl	8000a46 <max30102_write>
    max30102_write(obj, FIFO_READ_POINTER, &val, 3);
 8000b2e:	f107 020f 	add.w	r2, r7, #15
 8000b32:	2303      	movs	r3, #3
 8000b34:	2106      	movs	r1, #6
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ff85 	bl	8000a46 <max30102_write>
    max30102_write(obj, OVERFLOW_COUNTER, &val, 3);
 8000b3c:	f107 020f 	add.w	r2, r7, #15
 8000b40:	2303      	movs	r3, #3
 8000b42:	2105      	movs	r1, #5
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff7e 	bl	8000a46 <max30102_write>
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <max30102_set_mode>:



//set mode for max30102
void max30102_set_mode(max30102 *obj)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	uint8_t value = spo2Mode;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, MODE_CONFIGURATION, &value, 1);
 8000b5e:	f107 020f 	add.w	r2, r7, #15
 8000b62:	2301      	movs	r3, #1
 8000b64:	2109      	movs	r1, #9
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ff6d 	bl	8000a46 <max30102_write>
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <max30102_interrupt_config>:

//enable interrupts
void max30102_interrupt_config(max30102 *obj)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	uint8_t value = allInterruptsEnable;
 8000b7c:	23e0      	movs	r3, #224	; 0xe0
 8000b7e:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, INTERRUPT_ENABLE_1, &value, 1);
 8000b80:	f107 020f 	add.w	r2, r7, #15
 8000b84:	2301      	movs	r3, #1
 8000b86:	2102      	movs	r1, #2
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff5c 	bl	8000a46 <max30102_write>
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <max30102_spo2_config>:

//spo2 config
void max30102_spo2_config(max30102 *obj)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b084      	sub	sp, #16
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	uint8_t value = spo2ModeConfiguration;
 8000b9e:	2367      	movs	r3, #103	; 0x67
 8000ba0:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, SPO2_CONFIGURATION, &value, 1);
 8000ba2:	f107 020f 	add.w	r2, r7, #15
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	210a      	movs	r1, #10
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ff4b 	bl	8000a46 <max30102_write>
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <max30102_fifo_config>:

//fifo config
void max30102_fifo_config(max30102 *obj)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	uint8_t value = fifoConfigurationData;
 8000bc0:	2331      	movs	r3, #49	; 0x31
 8000bc2:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, FIFO_CONFIGURATION, &value, 1);
 8000bc4:	f107 020f 	add.w	r2, r7, #15
 8000bc8:	2301      	movs	r3, #1
 8000bca:	2108      	movs	r1, #8
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff3a 	bl	8000a46 <max30102_write>
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <max30102_led1_settings>:

void max30102_led1_settings(max30102 *obj)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b084      	sub	sp, #16
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
	uint8_t v = defaultLedPulse;
 8000be2:	237f      	movs	r3, #127	; 0x7f
 8000be4:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, LED1_PA, &v, 1);
 8000be6:	f107 020f 	add.w	r2, r7, #15
 8000bea:	2301      	movs	r3, #1
 8000bec:	210c      	movs	r1, #12
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ff29 	bl	8000a46 <max30102_write>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <max30102_led2_settings>:

void max30102_led2_settings(max30102 *obj)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	uint8_t a = defaultLedPulse;
 8000c04:	237f      	movs	r3, #127	; 0x7f
 8000c06:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, LED2_PA, &a, 1);
 8000c08:	f107 020f 	add.w	r2, r7, #15
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	210d      	movs	r1, #13
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff18 	bl	8000a46 <max30102_write>

}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <max30102_set_die_temp_en>:

void max30102_set_die_temp_en(max30102 *obj)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b084      	sub	sp, #16
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
	uint8_t value = enableTempMeasurement;
 8000c26:	2301      	movs	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, DIE_TEMPERATURE_CONFIG, &value, 1);
 8000c2a:	f107 020f 	add.w	r2, r7, #15
 8000c2e:	2301      	movs	r3, #1
 8000c30:	2121      	movs	r1, #33	; 0x21
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff07 	bl	8000a46 <max30102_write>
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <max30102_set_die_temp_rdy>:

void max30102_set_die_temp_rdy(max30102 *obj)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	uint8_t value = dieTempRdyEn;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, INTERRUPT_ENABLE_2, &value, 1);
 8000c4c:	f107 020f 	add.w	r2, r7, #15
 8000c50:	2301      	movs	r3, #1
 8000c52:	2103      	movs	r1, #3
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff fef6 	bl	8000a46 <max30102_write>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <max30102_interrupt_handler>:

void max30102_interrupt_handler(max30102 *obj)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	//read register 0x00 and 0X01 interrupt status register
    uint8_t reg[2] = {0x00};
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	823b      	strh	r3, [r7, #16]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, INTERRUPT_STATUS_1, reg, 2);
 8000c70:	f107 0210 	add.w	r2, r7, #16
 8000c74:	2302      	movs	r3, #2
 8000c76:	2100      	movs	r1, #0
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff17 	bl	8000aac <max30102_read>
    if(reg[0] != 0)
 8000c7e:	7c3b      	ldrb	r3, [r7, #16]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d005      	beq.n	8000c90 <max30102_interrupt_handler+0x2c>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8a:	481d      	ldr	r0, [pc, #116]	; (8000d00 <max30102_interrupt_handler+0x9c>)
 8000c8c:	f000 fe72 	bl	8001974 <HAL_GPIO_WritePin>
    }

    uint8_t b = reg[0];
 8000c90:	7c3b      	ldrb	r3, [r7, #16]
 8000c92:	75fb      	strb	r3, [r7, #23]
    	{
    	//PWR_RDY shows that sensor has been set off. Configure sensor again.

    	}

    	uint8_t a = reg[0];
 8000c94:	7c3b      	ldrb	r3, [r7, #16]
 8000c96:	75bb      	strb	r3, [r7, #22]
    	if(((a>>7) & 0X01) == 1 )
 8000c98:	7dbb      	ldrb	r3, [r7, #22]
 8000c9a:	09db      	lsrs	r3, r3, #7
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d002      	beq.n	8000cac <max30102_interrupt_handler+0x48>
    	{
    	//Interrupt becoming full now read sensor FIFO data
	     max30102_read_fifo(obj);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f82e 	bl	8000d08 <max30102_read_fifo>
    	}

    	uint8_t c = reg[0];
 8000cac:	7c3b      	ldrb	r3, [r7, #16]
 8000cae:	757b      	strb	r3, [r7, #21]
    	if(((c>>6) & 0X01) == 1 )
    	{
    	//PPG_RDY
    	}

    	if((reg[1]>>1) & 0X01)
 8000cb0:	7c7b      	ldrb	r3, [r7, #17]
 8000cb2:	085b      	lsrs	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d01b      	beq.n	8000cf6 <max30102_interrupt_handler+0x92>
    	{
    	// Temperature data ready
    		  int8_t temp_int;
    		  uint8_t temp_frac;
    		  max30102_read_temp(obj, &temp_int, &temp_frac);
 8000cbe:	f107 020e 	add.w	r2, r7, #14
 8000cc2:	f107 030f 	add.w	r3, r7, #15
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f881 	bl	8000dd0 <max30102_read_temp>

    		  obj->temperature = temp_int + 0.0625f * temp_frac;
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	ee07 3a90 	vmov	s15, r3
 8000cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cda:	7bbb      	ldrb	r3, [r7, #14]
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000d04 <max30102_interrupt_handler+0xa0>
 8000ce8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	edc3 7a01 	vstr	s15, [r3, #4]
    	}
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	3d800000 	.word	0x3d800000

08000d08 <max30102_read_fifo>:

void max30102_read_fifo(max30102 *obj)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr;
    uint8_t rd_ptr;
    max30102_read(obj, FIFO_WRITE_POINTER, &wr_ptr, 1);
 8000d10:	f107 0213 	add.w	r2, r7, #19
 8000d14:	2301      	movs	r3, #1
 8000d16:	2104      	movs	r1, #4
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff fec7 	bl	8000aac <max30102_read>
    max30102_read(obj, FIFO_READ_POINTER, &rd_ptr, 1);
 8000d1e:	f107 0212 	add.w	r2, r7, #18
 8000d22:	2301      	movs	r3, #1
 8000d24:	2106      	movs	r1, #6
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fec0 	bl	8000aac <max30102_read>

    uint8_t num_samples = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	77bb      	strb	r3, [r7, #30]

    if(wr_ptr > 0 )
 8000d30:	7cfb      	ldrb	r3, [r7, #19]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <max30102_read_fifo+0x38>
    {
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3a:	4824      	ldr	r0, [pc, #144]	; (8000dcc <max30102_read_fifo+0xc4>)
 8000d3c:	f000 fe33 	bl	80019a6 <HAL_GPIO_TogglePin>
    }


    num_samples  = ((uint8_t)wr_ptr - (uint8_t)rd_ptr + 32)%32;
 8000d40:	7cfb      	ldrb	r3, [r7, #19]
 8000d42:	461a      	mov	r2, r3
 8000d44:	7cbb      	ldrb	r3, [r7, #18]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	3320      	adds	r3, #32
 8000d4a:	425a      	negs	r2, r3
 8000d4c:	f003 031f 	and.w	r3, r3, #31
 8000d50:	f002 021f 	and.w	r2, r2, #31
 8000d54:	bf58      	it	pl
 8000d56:	4253      	negpl	r3, r2
 8000d58:	77bb      	strb	r3, [r7, #30]


    for(uint8_t i = 0; i< num_samples; i++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	77fb      	strb	r3, [r7, #31]
 8000d5e:	e02b      	b.n	8000db8 <max30102_read_fifo+0xb0>
    {
    	uint8_t sample[6];
    	max30102_read(obj, FIFO_DATA_REGISTER, sample, 6);
 8000d60:	f107 020c 	add.w	r2, r7, #12
 8000d64:	2306      	movs	r3, #6
 8000d66:	2107      	movs	r1, #7
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fe9f 	bl	8000aac <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8000d6e:	7b3b      	ldrb	r3, [r7, #12]
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	461a      	mov	r2, r3
 8000d74:	7b7b      	ldrb	r3, [r7, #13]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	7bba      	ldrb	r2, [r7, #14]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000d82:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	041b      	lsls	r3, r3, #16
 8000d88:	461a      	mov	r2, r3
 8000d8a:	7c3b      	ldrb	r3, [r7, #16]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	7c7a      	ldrb	r2, [r7, #17]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000d98:	617b      	str	r3, [r7, #20]

        obj->_ir_samples[i] = ir_sample;
 8000d9a:	7ffa      	ldrb	r2, [r7, #31]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3202      	adds	r2, #2
 8000da0:	69b9      	ldr	r1, [r7, #24]
 8000da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        obj->_red_samples[i] = red_sample;
 8000da6:	7ffa      	ldrb	r2, [r7, #31]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3222      	adds	r2, #34	; 0x22
 8000dac:	6979      	ldr	r1, [r7, #20]
 8000dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(uint8_t i = 0; i< num_samples; i++)
 8000db2:	7ffb      	ldrb	r3, [r7, #31]
 8000db4:	3301      	adds	r3, #1
 8000db6:	77fb      	strb	r3, [r7, #31]
 8000db8:	7ffa      	ldrb	r2, [r7, #31]
 8000dba:	7fbb      	ldrb	r3, [r7, #30]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d3cf      	bcc.n	8000d60 <max30102_read_fifo+0x58>
    }


}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40020c00 	.word	0x40020c00

08000dd0 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102 *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
    max30102_read(obj, DIE_TEMPERATURE_INTEGER, (uint8_t *)temp_int, 1);
 8000ddc:	2301      	movs	r3, #1
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	211f      	movs	r1, #31
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f7ff fe62 	bl	8000aac <max30102_read>
    max30102_read(obj, DIE_TEMPERATURE_FRACTION, temp_frac, 1);
 8000de8:	2301      	movs	r3, #1
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	2120      	movs	r1, #32
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f7ff fe5c 	bl	8000aac <max30102_read>
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e3a:	2007      	movs	r0, #7
 8000e3c:	f000 fb8c 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a46      	ldr	r2, [pc, #280]	; (8000f84 <HAL_I2C_MspInit+0x138>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d12d      	bne.n	8000eca <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	4b45      	ldr	r3, [pc, #276]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a44      	ldr	r2, [pc, #272]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e8a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e90:	2312      	movs	r3, #18
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4839      	ldr	r0, [pc, #228]	; (8000f8c <HAL_I2C_MspInit+0x140>)
 8000ea8:	f000 fbc8 	bl	800163c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a34      	ldr	r2, [pc, #208]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000eb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebc:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ec8:	e058      	b.n	8000f7c <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C3)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a30      	ldr	r2, [pc, #192]	; (8000f90 <HAL_I2C_MspInit+0x144>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d153      	bne.n	8000f7c <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4a2a      	ldr	r2, [pc, #168]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6313      	str	r3, [r2, #48]	; 0x30
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f12:	2312      	movs	r3, #18
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481a      	ldr	r0, [pc, #104]	; (8000f94 <HAL_I2C_MspInit+0x148>)
 8000f2a:	f000 fb87 	bl	800163c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f40:	2304      	movs	r3, #4
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4813      	ldr	r0, [pc, #76]	; (8000f98 <HAL_I2C_MspInit+0x14c>)
 8000f4c:	f000 fb76 	bl	800163c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000f5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_I2C_MspInit+0x13c>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2048      	movs	r0, #72	; 0x48
 8000f72:	f000 fafc 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000f76:	2048      	movs	r0, #72	; 0x48
 8000f78:	f000 fb15 	bl	80015a6 <HAL_NVIC_EnableIRQ>
}
 8000f7c:	bf00      	nop
 8000f7e:	3730      	adds	r7, #48	; 0x30
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40005400 	.word	0x40005400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40005c00 	.word	0x40005c00
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	; 0x38
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a31      	ldr	r2, [pc, #196]	; (800108c <HAL_I2S_MspInit+0xf0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d15a      	bne.n	8001082 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000fd0:	23c0      	movs	r3, #192	; 0xc0
 8000fd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f005 fd85 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000fe8:	f7ff fd0e 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	4a26      	ldr	r2, [pc, #152]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 8000ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	4a1f      	ldr	r2, [pc, #124]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6313      	str	r3, [r2, #48]	; 0x30
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	4a18      	ldr	r2, [pc, #96]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	6313      	str	r3, [r2, #48]	; 0x30
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001040:	2310      	movs	r3, #16
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001050:	2306      	movs	r3, #6
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <HAL_I2S_MspInit+0xf8>)
 800105c:	f000 faee 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001060:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001072:	2306      	movs	r3, #6
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <HAL_I2S_MspInit+0xfc>)
 800107e:	f000 fadd 	bl	800163c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3738      	adds	r7, #56	; 0x38
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40003c00 	.word	0x40003c00
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020800 	.word	0x40020800

0800109c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <HAL_SPI_MspInit+0x84>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12b      	bne.n	8001116 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010f6:	23e0      	movs	r3, #224	; 0xe0
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001106:	2305      	movs	r3, #5
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_SPI_MspInit+0x8c>)
 8001112:	f000 fa93 	bl	800163c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40013000 	.word	0x40013000
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <NMI_Handler+0x4>

08001132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <MemManage_Handler+0x4>

0800113e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <UsageFault_Handler+0x4>

0800114a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001178:	f000 f8da 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <OTG_FS_IRQHandler+0x10>)
 8001186:	f000 fe93 	bl	8001eb0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200007ec 	.word	0x200007ec

08001194 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <I2C3_EV_IRQHandler+0x10>)
 800119a:	f002 fc91 	bl	8003ac0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000100 	.word	0x20000100

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f009 f92c 	bl	800a434 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20020000 	.word	0x20020000
 8001208:	00000400 	.word	0x00000400
 800120c:	20000408 	.word	0x20000408
 8001210:	20000b00 	.word	0x20000b00

08001214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001270 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001254:	4c0b      	ldr	r4, [pc, #44]	; (8001284 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001262:	f7ff ffd7 	bl	8001214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001266:	f009 f8eb 	bl	800a440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126a:	f7ff f92f 	bl	80004cc <main>
  bx  lr    
 800126e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001270:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800127c:	0800a714 	.word	0x0800a714
  ldr r2, =_sbss
 8001280:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001284:	20000b00 	.word	0x20000b00

08001288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC_IRQHandler>
	...

0800128c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <HAL_Init+0x40>)
 8001296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_Init+0x40>)
 80012a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_Init+0x40>)
 80012ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 f94f 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f808 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c0:	f7ff fd9c 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023c00 	.word	0x40023c00

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_InitTick+0x54>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x58>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f967 	bl	80015c2 <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00e      	b.n	800131c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d80a      	bhi.n	800131a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f000 f92f 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_InitTick+0x5c>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000000 	.word	0x20000000
 8001328:	20000008 	.word	0x20000008
 800132c:	20000004 	.word	0x20000004

08001330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008
 8001354:	2000040c 	.word	0x2000040c

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	2000040c 	.word	0x2000040c

08001370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001378:	f7ff ffee 	bl	8001358 <HAL_GetTick>
 800137c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d005      	beq.n	8001396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_Delay+0x44>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001396:	bf00      	nop
 8001398:	f7ff ffde 	bl	8001358 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d8f7      	bhi.n	8001398 <HAL_Delay+0x28>
  {
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000008 	.word	0x20000008

080013b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db0b      	blt.n	8001446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <__NVIC_EnableIRQ+0x38>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e100 	.word	0xe000e100

08001458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff8e 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff29 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff3e 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff8e 	bl	80014ac <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5d 	bl	8001458 <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff31 	bl	800141c <__NVIC_EnableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffa2 	bl	8001514 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d004      	beq.n	80015f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2280      	movs	r2, #128	; 0x80
 80015f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e00c      	b.n	8001612 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2205      	movs	r2, #5
 80015fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800162c:	b2db      	uxtb	r3, r3
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	e16b      	b.n	8001930 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001658:	2201      	movs	r2, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	429a      	cmp	r2, r3
 8001672:	f040 815a 	bne.w	800192a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d005      	beq.n	800168e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168a:	2b02      	cmp	r3, #2
 800168c:	d130      	bne.n	80016f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	2203      	movs	r2, #3
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 0201 	and.w	r2, r3, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d017      	beq.n	800172c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d123      	bne.n	8001780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	08da      	lsrs	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3208      	adds	r2, #8
 8001740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	220f      	movs	r2, #15
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	08da      	lsrs	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3208      	adds	r2, #8
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0203 	and.w	r2, r3, #3
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80b4 	beq.w	800192a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b60      	ldr	r3, [pc, #384]	; (8001948 <HAL_GPIO_Init+0x30c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a5f      	ldr	r2, [pc, #380]	; (8001948 <HAL_GPIO_Init+0x30c>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b5d      	ldr	r3, [pc, #372]	; (8001948 <HAL_GPIO_Init+0x30c>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017de:	4a5b      	ldr	r2, [pc, #364]	; (800194c <HAL_GPIO_Init+0x310>)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_GPIO_Init+0x314>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d02b      	beq.n	8001862 <HAL_GPIO_Init+0x226>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a51      	ldr	r2, [pc, #324]	; (8001954 <HAL_GPIO_Init+0x318>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d025      	beq.n	800185e <HAL_GPIO_Init+0x222>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a50      	ldr	r2, [pc, #320]	; (8001958 <HAL_GPIO_Init+0x31c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01f      	beq.n	800185a <HAL_GPIO_Init+0x21e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4f      	ldr	r2, [pc, #316]	; (800195c <HAL_GPIO_Init+0x320>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0x21a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4e      	ldr	r2, [pc, #312]	; (8001960 <HAL_GPIO_Init+0x324>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0x216>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4d      	ldr	r2, [pc, #308]	; (8001964 <HAL_GPIO_Init+0x328>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00d      	beq.n	800184e <HAL_GPIO_Init+0x212>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4c      	ldr	r2, [pc, #304]	; (8001968 <HAL_GPIO_Init+0x32c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x20e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4b      	ldr	r2, [pc, #300]	; (800196c <HAL_GPIO_Init+0x330>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_Init+0x20a>
 8001842:	2307      	movs	r3, #7
 8001844:	e00e      	b.n	8001864 <HAL_GPIO_Init+0x228>
 8001846:	2308      	movs	r3, #8
 8001848:	e00c      	b.n	8001864 <HAL_GPIO_Init+0x228>
 800184a:	2306      	movs	r3, #6
 800184c:	e00a      	b.n	8001864 <HAL_GPIO_Init+0x228>
 800184e:	2305      	movs	r3, #5
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x228>
 8001852:	2304      	movs	r3, #4
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x228>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x228>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x228>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x228>
 8001862:	2300      	movs	r3, #0
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001874:	4935      	ldr	r1, [pc, #212]	; (800194c <HAL_GPIO_Init+0x310>)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_GPIO_Init+0x334>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a6:	4a32      	ldr	r2, [pc, #200]	; (8001970 <HAL_GPIO_Init+0x334>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_GPIO_Init+0x334>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d0:	4a27      	ldr	r2, [pc, #156]	; (8001970 <HAL_GPIO_Init+0x334>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_GPIO_Init+0x334>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <HAL_GPIO_Init+0x334>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_GPIO_Init+0x334>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001924:	4a12      	ldr	r2, [pc, #72]	; (8001970 <HAL_GPIO_Init+0x334>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f67f ae90 	bls.w	8001658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40013800 	.word	0x40013800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40021000 	.word	0x40021000
 8001964:	40021400 	.word	0x40021400
 8001968:	40021800 	.word	0x40021800
 800196c:	40021c00 	.word	0x40021c00
 8001970:	40013c00 	.word	0x40013c00

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b8:	887a      	ldrh	r2, [r7, #2]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	041a      	lsls	r2, r3, #16
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	400b      	ands	r3, r1
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	619a      	str	r2, [r3, #24]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80019da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019dc:	b08f      	sub	sp, #60	; 0x3c
 80019de:	af0a      	add	r7, sp, #40	; 0x28
 80019e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e054      	b.n	8001a96 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f008 fa6a 	bl	8009ee0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f005 fa99 	bl	8006f62 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	687e      	ldr	r6, [r7, #4]
 8001a38:	466d      	mov	r5, sp
 8001a3a:	f106 0410 	add.w	r4, r6, #16
 8001a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a4e:	1d33      	adds	r3, r6, #4
 8001a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a52:	6838      	ldr	r0, [r7, #0]
 8001a54:	f005 fa13 	bl	8006e7e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f005 fa90 	bl	8006f84 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	687e      	ldr	r6, [r7, #4]
 8001a6c:	466d      	mov	r5, sp
 8001a6e:	f106 0410 	add.w	r4, r6, #16
 8001a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a82:	1d33      	adds	r3, r6, #4
 8001a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a86:	6838      	ldr	r0, [r7, #0]
 8001a88:	f005 fc18 	bl	80072bc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a9e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a9e:	b590      	push	{r4, r7, lr}
 8001aa0:	b089      	sub	sp, #36	; 0x24
 8001aa2:	af04      	add	r7, sp, #16
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	4608      	mov	r0, r1
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	70fb      	strb	r3, [r7, #3]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70bb      	strb	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_HCD_HC_Init+0x28>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e076      	b.n	8001bb4 <HAL_HCD_HC_Init+0x116>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	333d      	adds	r3, #61	; 0x3d
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	212c      	movs	r1, #44	; 0x2c
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	3338      	adds	r3, #56	; 0x38
 8001aee:	787a      	ldrb	r2, [r7, #1]
 8001af0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	212c      	movs	r1, #44	; 0x2c
 8001af8:	fb01 f303 	mul.w	r3, r1, r3
 8001afc:	4413      	add	r3, r2
 8001afe:	3340      	adds	r3, #64	; 0x40
 8001b00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b02:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	212c      	movs	r1, #44	; 0x2c
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	3339      	adds	r3, #57	; 0x39
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	212c      	movs	r1, #44	; 0x2c
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	333f      	adds	r3, #63	; 0x3f
 8001b24:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	78ba      	ldrb	r2, [r7, #2]
 8001b2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b32:	b2d0      	uxtb	r0, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	333a      	adds	r3, #58	; 0x3a
 8001b40:	4602      	mov	r2, r0
 8001b42:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da09      	bge.n	8001b60 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	333b      	adds	r3, #59	; 0x3b
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	e008      	b.n	8001b72 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	333b      	adds	r3, #59	; 0x3b
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	212c      	movs	r1, #44	; 0x2c
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	333c      	adds	r3, #60	; 0x3c
 8001b80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b84:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	787c      	ldrb	r4, [r7, #1]
 8001b8c:	78ba      	ldrb	r2, [r7, #2]
 8001b8e:	78f9      	ldrb	r1, [r7, #3]
 8001b90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b92:	9302      	str	r3, [sp, #8]
 8001b94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	f005 fd11 	bl	80075c8 <USB_HC_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd90      	pop	{r4, r7, pc}

08001bbc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_HCD_HC_Halt+0x1e>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e00f      	b.n	8001bfa <HAL_HCD_HC_Halt+0x3e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f005 ff61 	bl	8007ab2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	4611      	mov	r1, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	70fb      	strb	r3, [r7, #3]
 8001c16:	460b      	mov	r3, r1
 8001c18:	70bb      	strb	r3, [r7, #2]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	333b      	adds	r3, #59	; 0x3b
 8001c2c:	78ba      	ldrb	r2, [r7, #2]
 8001c2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	212c      	movs	r1, #44	; 0x2c
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	333f      	adds	r3, #63	; 0x3f
 8001c3e:	787a      	ldrb	r2, [r7, #1]
 8001c40:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c42:	7c3b      	ldrb	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d112      	bne.n	8001c6e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	3342      	adds	r3, #66	; 0x42
 8001c56:	2203      	movs	r2, #3
 8001c58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	333d      	adds	r3, #61	; 0x3d
 8001c68:	7f3a      	ldrb	r2, [r7, #28]
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e008      	b.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	212c      	movs	r1, #44	; 0x2c
 8001c74:	fb01 f303 	mul.w	r3, r1, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	3342      	adds	r3, #66	; 0x42
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	f200 80c6 	bhi.w	8001e14 <HAL_HCD_HC_SubmitRequest+0x210>
 8001c88:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8e:	bf00      	nop
 8001c90:	08001ca1 	.word	0x08001ca1
 8001c94:	08001e01 	.word	0x08001e01
 8001c98:	08001d05 	.word	0x08001d05
 8001c9c:	08001d83 	.word	0x08001d83
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ca0:	7c3b      	ldrb	r3, [r7, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	f040 80b8 	bne.w	8001e18 <HAL_HCD_HC_SubmitRequest+0x214>
 8001ca8:	78bb      	ldrb	r3, [r7, #2]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 80b4 	bne.w	8001e18 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001cb0:	8b3b      	ldrh	r3, [r7, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d108      	bne.n	8001cc8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	212c      	movs	r1, #44	; 0x2c
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3355      	adds	r3, #85	; 0x55
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3355      	adds	r3, #85	; 0x55
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3342      	adds	r3, #66	; 0x42
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cee:	e093      	b.n	8001e18 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3342      	adds	r3, #66	; 0x42
 8001cfe:	2202      	movs	r2, #2
 8001d00:	701a      	strb	r2, [r3, #0]
      break;
 8001d02:	e089      	b.n	8001e18 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d04:	78bb      	ldrb	r3, [r7, #2]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11d      	bne.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	212c      	movs	r1, #44	; 0x2c
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	3355      	adds	r3, #85	; 0x55
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	212c      	movs	r1, #44	; 0x2c
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	3342      	adds	r3, #66	; 0x42
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d30:	e073      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3342      	adds	r3, #66	; 0x42
 8001d40:	2202      	movs	r2, #2
 8001d42:	701a      	strb	r2, [r3, #0]
      break;
 8001d44:	e069      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	212c      	movs	r1, #44	; 0x2c
 8001d4c:	fb01 f303 	mul.w	r3, r1, r3
 8001d50:	4413      	add	r3, r2
 8001d52:	3354      	adds	r3, #84	; 0x54
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	212c      	movs	r1, #44	; 0x2c
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	3342      	adds	r3, #66	; 0x42
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
      break;
 8001d6c:	e055      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	212c      	movs	r1, #44	; 0x2c
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	3342      	adds	r3, #66	; 0x42
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	701a      	strb	r2, [r3, #0]
      break;
 8001d80:	e04b      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d82:	78bb      	ldrb	r3, [r7, #2]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d11d      	bne.n	8001dc4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	212c      	movs	r1, #44	; 0x2c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	3355      	adds	r3, #85	; 0x55
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	212c      	movs	r1, #44	; 0x2c
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	3342      	adds	r3, #66	; 0x42
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001dae:	e034      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	212c      	movs	r1, #44	; 0x2c
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	3342      	adds	r3, #66	; 0x42
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	701a      	strb	r2, [r3, #0]
      break;
 8001dc2:	e02a      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	212c      	movs	r1, #44	; 0x2c
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	3354      	adds	r3, #84	; 0x54
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	3342      	adds	r3, #66	; 0x42
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
      break;
 8001dea:	e016      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	212c      	movs	r1, #44	; 0x2c
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	3342      	adds	r3, #66	; 0x42
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	701a      	strb	r2, [r3, #0]
      break;
 8001dfe:	e00c      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	212c      	movs	r1, #44	; 0x2c
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3342      	adds	r3, #66	; 0x42
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
      break;
 8001e12:	e002      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001e14:	bf00      	nop
 8001e16:	e000      	b.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001e18:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	212c      	movs	r1, #44	; 0x2c
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	3344      	adds	r3, #68	; 0x44
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	8b3a      	ldrh	r2, [r7, #24]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	202c      	movs	r0, #44	; 0x2c
 8001e34:	fb00 f303 	mul.w	r3, r0, r3
 8001e38:	440b      	add	r3, r1
 8001e3a:	334c      	adds	r3, #76	; 0x4c
 8001e3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	212c      	movs	r1, #44	; 0x2c
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	3360      	adds	r3, #96	; 0x60
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	212c      	movs	r1, #44	; 0x2c
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3350      	adds	r3, #80	; 0x50
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3339      	adds	r3, #57	; 0x39
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	212c      	movs	r1, #44	; 0x2c
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	3361      	adds	r3, #97	; 0x61
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	222c      	movs	r2, #44	; 0x2c
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	3338      	adds	r3, #56	; 0x38
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	18d1      	adds	r1, r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f005 fcb4 	bl	800780c <USB_HC_StartXfer>
 8001ea4:	4603      	mov	r3, r0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop

08001eb0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f005 f9b5 	bl	8007236 <USB_GetMode>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	f040 80f6 	bne.w	80020c0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f005 f999 	bl	8007210 <USB_ReadInterrupts>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80ec 	beq.w	80020be <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f005 f990 	bl	8007210 <USB_ReadInterrupts>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001efa:	d104      	bne.n	8001f06 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f005 f980 	bl	8007210 <USB_ReadInterrupts>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f1a:	d104      	bne.n	8001f26 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f005 f970 	bl	8007210 <USB_ReadInterrupts>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f3a:	d104      	bne.n	8001f46 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f005 f960 	bl	8007210 <USB_ReadInterrupts>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d103      	bne.n	8001f62 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f005 f952 	bl	8007210 <USB_ReadInterrupts>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f76:	d11c      	bne.n	8001fb2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f80:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10f      	bne.n	8001fb2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f92:	2110      	movs	r1, #16
 8001f94:	6938      	ldr	r0, [r7, #16]
 8001f96:	f005 f841 	bl	800701c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f9a:	6938      	ldr	r0, [r7, #16]
 8001f9c:	f005 f872 	bl	8007084 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f005 fa48 	bl	800743c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f008 f815 	bl	8009fdc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f005 f92a 	bl	8007210 <USB_ReadInterrupts>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc6:	d102      	bne.n	8001fce <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f001 f89e 	bl	800310a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f005 f91c 	bl	8007210 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d106      	bne.n	8001ff0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f007 ffde 	bl	8009fa4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2208      	movs	r2, #8
 8001fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f005 f90b 	bl	8007210 <USB_ReadInterrupts>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	2b10      	cmp	r3, #16
 8002002:	d101      	bne.n	8002008 <HAL_HCD_IRQHandler+0x158>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_HCD_IRQHandler+0x15a>
 8002008:	2300      	movs	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d012      	beq.n	8002034 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0210 	bic.w	r2, r2, #16
 800201c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 ffa1 	bl	8002f66 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0210 	orr.w	r2, r2, #16
 8002032:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f005 f8e9 	bl	8007210 <USB_ReadInterrupts>
 800203e:	4603      	mov	r3, r0
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002048:	d13a      	bne.n	80020c0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f005 fd1e 	bl	8007a90 <USB_HC_ReadInterrupt>
 8002054:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e025      	b.n	80020a8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d018      	beq.n	80020a2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002086:	d106      	bne.n	8002096 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	4619      	mov	r1, r3
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8ab 	bl	80021ea <HCD_HC_IN_IRQHandler>
 8002094:	e005      	b.n	80020a2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fbf9 	bl	8002894 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d3d4      	bcc.n	800205c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ba:	615a      	str	r2, [r3, #20]
 80020bc:	e000      	b.n	80020c0 <HAL_HCD_IRQHandler+0x210>
      return;
 80020be:	bf00      	nop
    }
  }
}
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_HCD_Start+0x16>
 80020d8:	2302      	movs	r3, #2
 80020da:	e013      	b.n	8002104 <HAL_HCD_Start+0x3e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f005 fa0a 	bl	8007504 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 ff23 	bl	8006f40 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_HCD_Stop+0x16>
 800211e:	2302      	movs	r3, #2
 8002120:	e00d      	b.n	800213e <HAL_HCD_Stop+0x32>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f005 fdf8 	bl	8007d24 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f005 f9ac 	bl	80074b0 <USB_ResetPort>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3360      	adds	r3, #96	; 0x60
 800217c:	781b      	ldrb	r3, [r3, #0]
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	3350      	adds	r3, #80	; 0x50
 80021a4:	681b      	ldr	r3, [r3, #0]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f005 f9f0 	bl	80075a4 <USB_GetCurrentFrame>
 80021c4:	4603      	mov	r3, r0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f005 f9cb 	bl	8007576 <USB_GetHostSpeed>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b04      	cmp	r3, #4
 8002218:	d11a      	bne.n	8002250 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002226:	461a      	mov	r2, r3
 8002228:	2304      	movs	r3, #4
 800222a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	3361      	adds	r3, #97	; 0x61
 800223a:	2206      	movs	r2, #6
 800223c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f005 fc32 	bl	8007ab2 <USB_HC_Halt>
 800224e:	e0af      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002266:	d11b      	bne.n	80022a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800227a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3361      	adds	r3, #97	; 0x61
 800228a:	2207      	movs	r2, #7
 800228c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f005 fc0a 	bl	8007ab2 <USB_HC_Halt>
 800229e:	e087      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	d109      	bne.n	80022ca <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	461a      	mov	r2, r3
 80022c4:	2320      	movs	r3, #32
 80022c6:	6093      	str	r3, [r2, #8]
 80022c8:	e072      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d11a      	bne.n	8002316 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	461a      	mov	r2, r3
 80022ee:	2308      	movs	r3, #8
 80022f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	3361      	adds	r3, #97	; 0x61
 8002300:	2205      	movs	r2, #5
 8002302:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f005 fbcf 	bl	8007ab2 <USB_HC_Halt>
 8002314:	e04c      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232c:	d11b      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	461a      	mov	r2, r3
 800233c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002340:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3361      	adds	r3, #97	; 0x61
 8002350:	2208      	movs	r2, #8
 8002352:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f005 fba7 	bl	8007ab2 <USB_HC_Halt>
 8002364:	e024      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002378:	2b80      	cmp	r3, #128	; 0x80
 800237a:	d119      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	461a      	mov	r2, r3
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3361      	adds	r3, #97	; 0x61
 800239c:	2206      	movs	r2, #6
 800239e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f005 fb81 	bl	8007ab2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c6:	d112      	bne.n	80023ee <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f005 fb6d 	bl	8007ab2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	461a      	mov	r2, r3
 80023e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80023ec:	e24e      	b.n	800288c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	f040 80df 	bne.w	80025c4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3348      	adds	r3, #72	; 0x48
 800241c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	0159      	lsls	r1, r3, #5
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	440b      	add	r3, r1
 8002426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002430:	1ad2      	subs	r2, r2, r3
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	202c      	movs	r0, #44	; 0x2c
 8002438:	fb00 f303 	mul.w	r3, r0, r3
 800243c:	440b      	add	r3, r1
 800243e:	3350      	adds	r3, #80	; 0x50
 8002440:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	3361      	adds	r3, #97	; 0x61
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	335c      	adds	r3, #92	; 0x5c
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	461a      	mov	r2, r3
 8002474:	2301      	movs	r3, #1
 8002476:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	333f      	adds	r3, #63	; 0x3f
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d009      	beq.n	80024a0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	333f      	adds	r3, #63	; 0x3f
 800249a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800249c:	2b02      	cmp	r3, #2
 800249e:	d111      	bne.n	80024c4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f005 fb01 	bl	8007ab2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	461a      	mov	r2, r3
 80024be:	2310      	movs	r3, #16
 80024c0:	6093      	str	r3, [r2, #8]
 80024c2:	e03a      	b.n	800253a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	212c      	movs	r1, #44	; 0x2c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	333f      	adds	r3, #63	; 0x3f
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d009      	beq.n	80024ec <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	333f      	adds	r3, #63	; 0x3f
 80024e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d126      	bne.n	800253a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	0151      	lsls	r1, r2, #5
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	440a      	add	r2, r1
 8002502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002506:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800250a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3360      	adds	r3, #96	; 0x60
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	b2d9      	uxtb	r1, r3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	202c      	movs	r0, #44	; 0x2c
 8002528:	fb00 f303 	mul.w	r3, r0, r3
 800252c:	4413      	add	r3, r2
 800252e:	3360      	adds	r3, #96	; 0x60
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f007 fd5f 	bl	8009ff8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d12b      	bne.n	800259a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	212c      	movs	r1, #44	; 0x2c
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	4413      	add	r3, r2
 800254e:	3348      	adds	r3, #72	; 0x48
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	202c      	movs	r0, #44	; 0x2c
 8002558:	fb00 f202 	mul.w	r2, r0, r2
 800255c:	440a      	add	r2, r1
 800255e:	3240      	adds	r2, #64	; 0x40
 8002560:	8812      	ldrh	r2, [r2, #0]
 8002562:	fbb3 f3f2 	udiv	r3, r3, r2
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 818e 	beq.w	800288c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	3354      	adds	r3, #84	; 0x54
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f083 0301 	eor.w	r3, r3, #1
 8002584:	b2d8      	uxtb	r0, r3
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	3354      	adds	r3, #84	; 0x54
 8002594:	4602      	mov	r2, r0
 8002596:	701a      	strb	r2, [r3, #0]
}
 8002598:	e178      	b.n	800288c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3354      	adds	r3, #84	; 0x54
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	f083 0301 	eor.w	r3, r3, #1
 80025ae:	b2d8      	uxtb	r0, r3
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3354      	adds	r3, #84	; 0x54
 80025be:	4602      	mov	r2, r0
 80025c0:	701a      	strb	r2, [r3, #0]
}
 80025c2:	e163      	b.n	800288c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	f040 80f6 	bne.w	80027c8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3361      	adds	r3, #97	; 0x61
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d109      	bne.n	8002604 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3360      	adds	r3, #96	; 0x60
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e0c9      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3361      	adds	r3, #97	; 0x61
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b05      	cmp	r3, #5
 8002616:	d109      	bne.n	800262c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3360      	adds	r3, #96	; 0x60
 8002626:	2205      	movs	r2, #5
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e0b5      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d009      	beq.n	8002654 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3361      	adds	r3, #97	; 0x61
 800264e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002650:	2b08      	cmp	r3, #8
 8002652:	d150      	bne.n	80026f6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	335c      	adds	r3, #92	; 0x5c
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	202c      	movs	r0, #44	; 0x2c
 800266c:	fb00 f303 	mul.w	r3, r0, r3
 8002670:	440b      	add	r3, r1
 8002672:	335c      	adds	r3, #92	; 0x5c
 8002674:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	335c      	adds	r3, #92	; 0x5c
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d912      	bls.n	80026b0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	335c      	adds	r3, #92	; 0x5c
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3360      	adds	r3, #96	; 0x60
 80026aa:	2204      	movs	r2, #4
 80026ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026ae:	e073      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	3360      	adds	r3, #96	; 0x60
 80026be:	2202      	movs	r2, #2
 80026c0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026d8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026e0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026f4:	e050      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3361      	adds	r3, #97	; 0x61
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d122      	bne.n	8002750 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	3360      	adds	r3, #96	; 0x60
 8002718:	2202      	movs	r2, #2
 800271a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002732:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800273a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	461a      	mov	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e023      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	3361      	adds	r3, #97	; 0x61
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b07      	cmp	r3, #7
 8002762:	d119      	bne.n	8002798 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	335c      	adds	r3, #92	; 0x5c
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	202c      	movs	r0, #44	; 0x2c
 800277c:	fb00 f303 	mul.w	r3, r0, r3
 8002780:	440b      	add	r3, r1
 8002782:	335c      	adds	r3, #92	; 0x5c
 8002784:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3360      	adds	r3, #96	; 0x60
 8002794:	2204      	movs	r2, #4
 8002796:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	461a      	mov	r2, r3
 80027a6:	2302      	movs	r3, #2
 80027a8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	b2d9      	uxtb	r1, r3
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	202c      	movs	r0, #44	; 0x2c
 80027b4:	fb00 f303 	mul.w	r3, r0, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	3360      	adds	r3, #96	; 0x60
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f007 fc19 	bl	8009ff8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027c6:	e061      	b.n	800288c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d156      	bne.n	800288c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	333f      	adds	r3, #63	; 0x3f
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d111      	bne.n	8002816 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	335c      	adds	r3, #92	; 0x5c
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f005 f94f 	bl	8007ab2 <USB_HC_Halt>
 8002814:	e031      	b.n	800287a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	333f      	adds	r3, #63	; 0x3f
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	333f      	adds	r3, #63	; 0x3f
 8002838:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800283a:	2b02      	cmp	r3, #2
 800283c:	d11d      	bne.n	800287a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	335c      	adds	r3, #92	; 0x5c
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d110      	bne.n	800287a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	3361      	adds	r3, #97	; 0x61
 8002866:	2203      	movs	r2, #3
 8002868:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f005 f91c 	bl	8007ab2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	461a      	mov	r2, r3
 8002888:	2310      	movs	r3, #16
 800288a:	6093      	str	r3, [r2, #8]
}
 800288c:	bf00      	nop
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d11a      	bne.n	80028fa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	2304      	movs	r3, #4
 80028d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	3361      	adds	r3, #97	; 0x61
 80028e4:	2206      	movs	r2, #6
 80028e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 f8dd 	bl	8007ab2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80028f8:	e331      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b20      	cmp	r3, #32
 800290e:	d12e      	bne.n	800296e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	2320      	movs	r3, #32
 8002920:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	333d      	adds	r3, #61	; 0x3d
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	f040 8313 	bne.w	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	333d      	adds	r3, #61	; 0x3d
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3360      	adds	r3, #96	; 0x60
 8002958:	2202      	movs	r2, #2
 800295a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f005 f8a3 	bl	8007ab2 <USB_HC_Halt>
}
 800296c:	e2f7      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002984:	d112      	bne.n	80029ac <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002998:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f005 f884 	bl	8007ab2 <USB_HC_Halt>
}
 80029aa:	e2d8      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d140      	bne.n	8002a44 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	335c      	adds	r3, #92	; 0x5c
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d111      	bne.n	8002a0e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	333d      	adds	r3, #61	; 0x3d
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2340      	movs	r3, #64	; 0x40
 8002a0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3361      	adds	r3, #97	; 0x61
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f005 f838 	bl	8007ab2 <USB_HC_Halt>
}
 8002a42:	e28c      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	d12c      	bne.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3361      	adds	r3, #97	; 0x61
 8002a68:	2204      	movs	r2, #4
 8002a6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	333d      	adds	r3, #61	; 0x3d
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	335c      	adds	r3, #92	; 0x5c
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f005 f809 	bl	8007ab2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	2340      	movs	r3, #64	; 0x40
 8002ab0:	6093      	str	r3, [r2, #8]
}
 8002ab2:	e254      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d11a      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2308      	movs	r3, #8
 8002ada:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3361      	adds	r3, #97	; 0x61
 8002aea:	2205      	movs	r2, #5
 8002aec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f004 ffda 	bl	8007ab2 <USB_HC_Halt>
}
 8002afe:	e22e      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d140      	bne.n	8002b98 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	335c      	adds	r3, #92	; 0x5c
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3361      	adds	r3, #97	; 0x61
 8002b36:	2203      	movs	r2, #3
 8002b38:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	333d      	adds	r3, #61	; 0x3d
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d112      	bne.n	8002b74 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	333c      	adds	r3, #60	; 0x3c
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d108      	bne.n	8002b74 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	333d      	adds	r3, #61	; 0x3d
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f004 ff97 	bl	8007ab2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	461a      	mov	r2, r3
 8002b92:	2310      	movs	r3, #16
 8002b94:	6093      	str	r3, [r2, #8]
}
 8002b96:	e1e2      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b80      	cmp	r3, #128	; 0x80
 8002bac:	d164      	bne.n	8002c78 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d111      	bne.n	8002bda <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3361      	adds	r3, #97	; 0x61
 8002bc4:	2206      	movs	r2, #6
 8002bc6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f004 ff6d 	bl	8007ab2 <USB_HC_Halt>
 8002bd8:	e044      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	335c      	adds	r3, #92	; 0x5c
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	202c      	movs	r0, #44	; 0x2c
 8002bf2:	fb00 f303 	mul.w	r3, r0, r3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	335c      	adds	r3, #92	; 0x5c
 8002bfa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	335c      	adds	r3, #92	; 0x5c
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d920      	bls.n	8002c52 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	335c      	adds	r3, #92	; 0x5c
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3360      	adds	r3, #96	; 0x60
 8002c30:	2204      	movs	r2, #4
 8002c32:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	b2d9      	uxtb	r1, r3
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	202c      	movs	r0, #44	; 0x2c
 8002c3e:	fb00 f303 	mul.w	r3, r0, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3360      	adds	r3, #96	; 0x60
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f007 f9d4 	bl	8009ff8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c50:	e008      	b.n	8002c64 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3360      	adds	r3, #96	; 0x60
 8002c60:	2202      	movs	r2, #2
 8002c62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	461a      	mov	r2, r3
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	6093      	str	r3, [r2, #8]
}
 8002c76:	e172      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	d11b      	bne.n	8002cc8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	212c      	movs	r1, #44	; 0x2c
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3361      	adds	r3, #97	; 0x61
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f004 ff00 	bl	8007ab2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc4:	6093      	str	r3, [r2, #8]
}
 8002cc6:	e14a      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	f040 813f 	bne.w	8002f5e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3361      	adds	r3, #97	; 0x61
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d17d      	bne.n	8002df0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3360      	adds	r3, #96	; 0x60
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	333f      	adds	r3, #63	; 0x3f
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d00a      	beq.n	8002d30 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	333f      	adds	r3, #63	; 0x3f
 8002d28:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	f040 8100 	bne.w	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d113      	bne.n	8002d60 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3355      	adds	r3, #85	; 0x55
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	f083 0301 	eor.w	r3, r3, #1
 8002d4c:	b2d8      	uxtb	r0, r3
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3355      	adds	r3, #85	; 0x55
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	f040 80e3 	bne.w	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	334c      	adds	r3, #76	; 0x4c
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80d8 	beq.w	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	334c      	adds	r3, #76	; 0x4c
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	202c      	movs	r0, #44	; 0x2c
 8002d96:	fb00 f202 	mul.w	r2, r0, r2
 8002d9a:	440a      	add	r2, r1
 8002d9c:	3240      	adds	r2, #64	; 0x40
 8002d9e:	8812      	ldrh	r2, [r2, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	202c      	movs	r0, #44	; 0x2c
 8002daa:	fb00 f202 	mul.w	r2, r0, r2
 8002dae:	440a      	add	r2, r1
 8002db0:	3240      	adds	r2, #64	; 0x40
 8002db2:	8812      	ldrh	r2, [r2, #0]
 8002db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80b5 	beq.w	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3355      	adds	r3, #85	; 0x55
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	f083 0301 	eor.w	r3, r3, #1
 8002dda:	b2d8      	uxtb	r0, r3
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3355      	adds	r3, #85	; 0x55
 8002dea:	4602      	mov	r2, r0
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	e09f      	b.n	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3361      	adds	r3, #97	; 0x61
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d109      	bne.n	8002e18 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	3360      	adds	r3, #96	; 0x60
 8002e12:	2202      	movs	r2, #2
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e08b      	b.n	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3361      	adds	r3, #97	; 0x61
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d109      	bne.n	8002e40 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3360      	adds	r3, #96	; 0x60
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	e077      	b.n	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3361      	adds	r3, #97	; 0x61
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d109      	bne.n	8002e68 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3360      	adds	r3, #96	; 0x60
 8002e62:	2205      	movs	r2, #5
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	e063      	b.n	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3361      	adds	r3, #97	; 0x61
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b06      	cmp	r3, #6
 8002e7a:	d009      	beq.n	8002e90 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3361      	adds	r3, #97	; 0x61
 8002e8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d14f      	bne.n	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	335c      	adds	r3, #92	; 0x5c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	202c      	movs	r0, #44	; 0x2c
 8002ea8:	fb00 f303 	mul.w	r3, r0, r3
 8002eac:	440b      	add	r3, r1
 8002eae:	335c      	adds	r3, #92	; 0x5c
 8002eb0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	335c      	adds	r3, #92	; 0x5c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d912      	bls.n	8002eec <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	212c      	movs	r1, #44	; 0x2c
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	335c      	adds	r3, #92	; 0x5c
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3360      	adds	r3, #96	; 0x60
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e021      	b.n	8002f30 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3360      	adds	r3, #96	; 0x60
 8002efa:	2202      	movs	r2, #2
 8002efc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f14:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f1c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2302      	movs	r3, #2
 8002f40:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	b2d9      	uxtb	r1, r3
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	202c      	movs	r0, #44	; 0x2c
 8002f4c:	fb00 f303 	mul.w	r3, r0, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3360      	adds	r3, #96	; 0x60
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f007 f84d 	bl	8009ff8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f5e:	bf00      	nop
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b08a      	sub	sp, #40	; 0x28
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	0c5b      	lsrs	r3, r3, #17
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f9a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d004      	beq.n	8002fac <HCD_RXQLVL_IRQHandler+0x46>
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	f000 80a9 	beq.w	80030fc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002faa:	e0aa      	b.n	8003102 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80a6 	beq.w	8003100 <HCD_RXQLVL_IRQHandler+0x19a>
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3344      	adds	r3, #68	; 0x44
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 809b 	beq.w	8003100 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3350      	adds	r3, #80	; 0x50
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	441a      	add	r2, r3
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	202c      	movs	r0, #44	; 0x2c
 8002fe4:	fb00 f303 	mul.w	r3, r0, r3
 8002fe8:	440b      	add	r3, r1
 8002fea:	334c      	adds	r3, #76	; 0x4c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d87a      	bhi.n	80030e8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	212c      	movs	r1, #44	; 0x2c
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	3344      	adds	r3, #68	; 0x44
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	b292      	uxth	r2, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f004 f8a8 	bl	8007160 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	3344      	adds	r3, #68	; 0x44
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	441a      	add	r2, r3
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	202c      	movs	r0, #44	; 0x2c
 800302a:	fb00 f303 	mul.w	r3, r0, r3
 800302e:	440b      	add	r3, r1
 8003030:	3344      	adds	r3, #68	; 0x44
 8003032:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	3350      	adds	r3, #80	; 0x50
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	441a      	add	r2, r3
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	202c      	movs	r0, #44	; 0x2c
 800304e:	fb00 f303 	mul.w	r3, r0, r3
 8003052:	440b      	add	r3, r1
 8003054:	3350      	adds	r3, #80	; 0x50
 8003056:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	0cdb      	lsrs	r3, r3, #19
 8003068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800306c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	212c      	movs	r1, #44	; 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	3340      	adds	r3, #64	; 0x40
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4293      	cmp	r3, r2
 8003084:	d13c      	bne.n	8003100 <HCD_RXQLVL_IRQHandler+0x19a>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d039      	beq.n	8003100 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	3354      	adds	r3, #84	; 0x54
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	f083 0301 	eor.w	r3, r3, #1
 80030d2:	b2d8      	uxtb	r0, r3
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	212c      	movs	r1, #44	; 0x2c
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	3354      	adds	r3, #84	; 0x54
 80030e2:	4602      	mov	r2, r0
 80030e4:	701a      	strb	r2, [r3, #0]
      break;
 80030e6:	e00b      	b.n	8003100 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	212c      	movs	r1, #44	; 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	3360      	adds	r3, #96	; 0x60
 80030f6:	2204      	movs	r2, #4
 80030f8:	701a      	strb	r2, [r3, #0]
      break;
 80030fa:	e001      	b.n	8003100 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80030fc:	bf00      	nop
 80030fe:	e000      	b.n	8003102 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003100:	bf00      	nop
  }
}
 8003102:	bf00      	nop
 8003104:	3728      	adds	r7, #40	; 0x28
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003136:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b02      	cmp	r3, #2
 8003140:	d10b      	bne.n	800315a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d102      	bne.n	8003152 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f006 ff37 	bl	8009fc0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b08      	cmp	r3, #8
 8003162:	d132      	bne.n	80031ca <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f043 0308 	orr.w	r3, r3, #8
 800316a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b04      	cmp	r3, #4
 8003174:	d126      	bne.n	80031c4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d113      	bne.n	80031a6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003184:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003188:	d106      	bne.n	8003198 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2102      	movs	r1, #2
 8003190:	4618      	mov	r0, r3
 8003192:	f004 f953 	bl	800743c <USB_InitFSLSPClkSel>
 8003196:	e011      	b.n	80031bc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2101      	movs	r1, #1
 800319e:	4618      	mov	r0, r3
 80031a0:	f004 f94c 	bl	800743c <USB_InitFSLSPClkSel>
 80031a4:	e00a      	b.n	80031bc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d106      	bne.n	80031bc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031b4:	461a      	mov	r2, r3
 80031b6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031ba:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f006 ff29 	bl	800a014 <HAL_HCD_PortEnabled_Callback>
 80031c2:	e002      	b.n	80031ca <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f006 ff33 	bl	800a030 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d103      	bne.n	80031dc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f043 0320 	orr.w	r3, r3, #32
 80031da:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031e2:	461a      	mov	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	6013      	str	r3, [r2, #0]
}
 80031e8:	bf00      	nop
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e12b      	b.n	800345a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd fe18 	bl	8000e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2224      	movs	r2, #36	; 0x24
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003242:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003252:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003254:	f003 fc36 	bl	8006ac4 <HAL_RCC_GetPCLK1Freq>
 8003258:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4a81      	ldr	r2, [pc, #516]	; (8003464 <HAL_I2C_Init+0x274>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d807      	bhi.n	8003274 <HAL_I2C_Init+0x84>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a80      	ldr	r2, [pc, #512]	; (8003468 <HAL_I2C_Init+0x278>)
 8003268:	4293      	cmp	r3, r2
 800326a:	bf94      	ite	ls
 800326c:	2301      	movls	r3, #1
 800326e:	2300      	movhi	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	e006      	b.n	8003282 <HAL_I2C_Init+0x92>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a7d      	ldr	r2, [pc, #500]	; (800346c <HAL_I2C_Init+0x27c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	bf94      	ite	ls
 800327c:	2301      	movls	r3, #1
 800327e:	2300      	movhi	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0e7      	b.n	800345a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4a78      	ldr	r2, [pc, #480]	; (8003470 <HAL_I2C_Init+0x280>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	0c9b      	lsrs	r3, r3, #18
 8003294:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a6a      	ldr	r2, [pc, #424]	; (8003464 <HAL_I2C_Init+0x274>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d802      	bhi.n	80032c4 <HAL_I2C_Init+0xd4>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	3301      	adds	r3, #1
 80032c2:	e009      	b.n	80032d8 <HAL_I2C_Init+0xe8>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	4a69      	ldr	r2, [pc, #420]	; (8003474 <HAL_I2C_Init+0x284>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	3301      	adds	r3, #1
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	430b      	orrs	r3, r1
 80032de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	495c      	ldr	r1, [pc, #368]	; (8003464 <HAL_I2C_Init+0x274>)
 80032f4:	428b      	cmp	r3, r1
 80032f6:	d819      	bhi.n	800332c <HAL_I2C_Init+0x13c>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e59      	subs	r1, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	fbb1 f3f3 	udiv	r3, r1, r3
 8003306:	1c59      	adds	r1, r3, #1
 8003308:	f640 73fc 	movw	r3, #4092	; 0xffc
 800330c:	400b      	ands	r3, r1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_I2C_Init+0x138>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1e59      	subs	r1, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003320:	3301      	adds	r3, #1
 8003322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003326:	e051      	b.n	80033cc <HAL_I2C_Init+0x1dc>
 8003328:	2304      	movs	r3, #4
 800332a:	e04f      	b.n	80033cc <HAL_I2C_Init+0x1dc>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d111      	bne.n	8003358 <HAL_I2C_Init+0x168>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1e58      	subs	r0, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	440b      	add	r3, r1
 8003342:	fbb0 f3f3 	udiv	r3, r0, r3
 8003346:	3301      	adds	r3, #1
 8003348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	e012      	b.n	800337e <HAL_I2C_Init+0x18e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1e58      	subs	r0, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	0099      	lsls	r1, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	fbb0 f3f3 	udiv	r3, r0, r3
 800336e:	3301      	adds	r3, #1
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Init+0x196>
 8003382:	2301      	movs	r3, #1
 8003384:	e022      	b.n	80033cc <HAL_I2C_Init+0x1dc>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10e      	bne.n	80033ac <HAL_I2C_Init+0x1bc>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1e58      	subs	r0, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6859      	ldr	r1, [r3, #4]
 8003396:	460b      	mov	r3, r1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	440b      	add	r3, r1
 800339c:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a0:	3301      	adds	r3, #1
 80033a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033aa:	e00f      	b.n	80033cc <HAL_I2C_Init+0x1dc>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1e58      	subs	r0, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	0099      	lsls	r1, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c2:	3301      	adds	r3, #1
 80033c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	6809      	ldr	r1, [r1, #0]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6911      	ldr	r1, [r2, #16]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68d2      	ldr	r2, [r2, #12]
 8003406:	4311      	orrs	r1, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	430b      	orrs	r3, r1
 800340e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	000186a0 	.word	0x000186a0
 8003468:	001e847f 	.word	0x001e847f
 800346c:	003d08ff 	.word	0x003d08ff
 8003470:	431bde83 	.word	0x431bde83
 8003474:	10624dd3 	.word	0x10624dd3

08003478 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	461a      	mov	r2, r3
 8003484:	460b      	mov	r3, r1
 8003486:	817b      	strh	r3, [r7, #10]
 8003488:	4613      	mov	r3, r2
 800348a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7fd ff64 	bl	8001358 <HAL_GetTick>
 8003490:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b20      	cmp	r3, #32
 800349c:	f040 80e0 	bne.w	8003660 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2319      	movs	r3, #25
 80034a6:	2201      	movs	r2, #1
 80034a8:	4970      	ldr	r1, [pc, #448]	; (800366c <HAL_I2C_Master_Transmit+0x1f4>)
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f001 ffd0 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
 80034b8:	e0d3      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_I2C_Master_Transmit+0x50>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e0cc      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d007      	beq.n	80034ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2221      	movs	r2, #33	; 0x21
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2210      	movs	r2, #16
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	893a      	ldrh	r2, [r7, #8]
 800351e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a50      	ldr	r2, [pc, #320]	; (8003670 <HAL_I2C_Master_Transmit+0x1f8>)
 800352e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003530:	8979      	ldrh	r1, [r7, #10]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	6a3a      	ldr	r2, [r7, #32]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f001 fd92 	bl	8005060 <I2C_MasterRequestWrite>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e08d      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800355c:	e066      	b.n	800362c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	6a39      	ldr	r1, [r7, #32]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f002 f84a 	bl	80055fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b04      	cmp	r3, #4
 8003574:	d107      	bne.n	8003586 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e06b      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d11b      	bne.n	8003600 <HAL_I2C_Master_Transmit+0x188>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d017      	beq.n	8003600 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	6a39      	ldr	r1, [r7, #32]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f002 f83a 	bl	800567e <I2C_WaitOnBTFFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	2b04      	cmp	r3, #4
 8003616:	d107      	bne.n	8003628 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003626:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e01a      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	d194      	bne.n	800355e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	00100002 	.word	0x00100002
 8003670:	ffff0000 	.word	0xffff0000

08003674 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	; 0x30
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	461a      	mov	r2, r3
 8003680:	460b      	mov	r3, r1
 8003682:	817b      	strh	r3, [r7, #10]
 8003684:	4613      	mov	r3, r2
 8003686:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003688:	f7fd fe66 	bl	8001358 <HAL_GetTick>
 800368c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b20      	cmp	r3, #32
 8003698:	f040 820b 	bne.w	8003ab2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2319      	movs	r3, #25
 80036a2:	2201      	movs	r2, #1
 80036a4:	497c      	ldr	r1, [pc, #496]	; (8003898 <HAL_I2C_Master_Receive+0x224>)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f001 fed2 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80036b2:	2302      	movs	r3, #2
 80036b4:	e1fe      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_I2C_Master_Receive+0x50>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e1f7      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x440>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d007      	beq.n	80036ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2222      	movs	r2, #34	; 0x22
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2210      	movs	r2, #16
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	893a      	ldrh	r2, [r7, #8]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a5c      	ldr	r2, [pc, #368]	; (800389c <HAL_I2C_Master_Receive+0x228>)
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800372c:	8979      	ldrh	r1, [r7, #10]
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f001 fd16 	bl	8005164 <I2C_MasterRequestRead>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e1b8      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	d113      	bne.n	8003772 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	623b      	str	r3, [r7, #32]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	623b      	str	r3, [r7, #32]
 800375e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e18c      	b.n	8003a8c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003776:	2b01      	cmp	r3, #1
 8003778:	d11b      	bne.n	80037b2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003788:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e16c      	b.n	8003a8c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d11b      	bne.n	80037f2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037da:	2300      	movs	r3, #0
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	e14c      	b.n	8003a8c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003818:	e138      	b.n	8003a8c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	2b03      	cmp	r3, #3
 8003820:	f200 80f1 	bhi.w	8003a06 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	2b01      	cmp	r3, #1
 800382a:	d123      	bne.n	8003874 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f001 ff97 	bl	8005764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e139      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003872:	e10b      	b.n	8003a8c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	2b02      	cmp	r3, #2
 800387a:	d14e      	bne.n	800391a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	2200      	movs	r2, #0
 8003884:	4906      	ldr	r1, [pc, #24]	; (80038a0 <HAL_I2C_Master_Receive+0x22c>)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f001 fde2 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e10e      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x440>
 8003896:	bf00      	nop
 8003898:	00100002 	.word	0x00100002
 800389c:	ffff0000 	.word	0xffff0000
 80038a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003918:	e0b8      	b.n	8003a8c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	2200      	movs	r2, #0
 8003922:	4966      	ldr	r1, [pc, #408]	; (8003abc <HAL_I2C_Master_Receive+0x448>)
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f001 fd93 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0bf      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003942:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	2200      	movs	r2, #0
 800397e:	494f      	ldr	r1, [pc, #316]	; (8003abc <HAL_I2C_Master_Receive+0x448>)
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f001 fd65 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e091      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a04:	e042      	b.n	8003a8c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f001 feaa 	bl	8005764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e04c      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d118      	bne.n	8003a8c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f47f aec2 	bne.w	800381a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e000      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ab2:	2302      	movs	r3, #2
  }
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3728      	adds	r7, #40	; 0x28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	00010004 	.word	0x00010004

08003ac0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d003      	beq.n	8003af8 <HAL_I2C_EV_IRQHandler+0x38>
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	f040 80c1 	bne.w	8003c7a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10d      	bne.n	8003b2e <HAL_I2C_EV_IRQHandler+0x6e>
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003b18:	d003      	beq.n	8003b22 <HAL_I2C_EV_IRQHandler+0x62>
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003b20:	d101      	bne.n	8003b26 <HAL_I2C_EV_IRQHandler+0x66>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_I2C_EV_IRQHandler+0x68>
 8003b26:	2300      	movs	r3, #0
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	f000 8132 	beq.w	8003d92 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00c      	beq.n	8003b52 <HAL_I2C_EV_IRQHandler+0x92>
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	0a5b      	lsrs	r3, r3, #9
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d006      	beq.n	8003b52 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f001 fe92 	bl	800586e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fcdc 	bl	8004508 <I2C_Master_SB>
 8003b50:	e092      	b.n	8003c78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	08db      	lsrs	r3, r3, #3
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_I2C_EV_IRQHandler+0xb2>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	0a5b      	lsrs	r3, r3, #9
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fd52 	bl	8004614 <I2C_Master_ADD10>
 8003b70:	e082      	b.n	8003c78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d009      	beq.n	8003b92 <HAL_I2C_EV_IRQHandler+0xd2>
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	0a5b      	lsrs	r3, r3, #9
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fd6c 	bl	8004668 <I2C_Master_ADDR>
 8003b90:	e072      	b.n	8003c78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d03b      	beq.n	8003c16 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bac:	f000 80f3 	beq.w	8003d96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	09db      	lsrs	r3, r3, #7
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00f      	beq.n	8003bdc <HAL_I2C_EV_IRQHandler+0x11c>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	0a9b      	lsrs	r3, r3, #10
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d009      	beq.n	8003bdc <HAL_I2C_EV_IRQHandler+0x11c>
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	089b      	lsrs	r3, r3, #2
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d103      	bne.n	8003bdc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f94c 	bl	8003e72 <I2C_MasterTransmit_TXE>
 8003bda:	e04d      	b.n	8003c78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	089b      	lsrs	r3, r3, #2
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80d6 	beq.w	8003d96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	0a5b      	lsrs	r3, r3, #9
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80cf 	beq.w	8003d96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003bf8:	7bbb      	ldrb	r3, [r7, #14]
 8003bfa:	2b21      	cmp	r3, #33	; 0x21
 8003bfc:	d103      	bne.n	8003c06 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9d3 	bl	8003faa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c04:	e0c7      	b.n	8003d96 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	f040 80c4 	bne.w	8003d96 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fa41 	bl	8004096 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c14:	e0bf      	b.n	8003d96 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c24:	f000 80b7 	beq.w	8003d96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00f      	beq.n	8003c54 <HAL_I2C_EV_IRQHandler+0x194>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	0a9b      	lsrs	r3, r3, #10
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <HAL_I2C_EV_IRQHandler+0x194>
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	089b      	lsrs	r3, r3, #2
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fab6 	bl	80041be <I2C_MasterReceive_RXNE>
 8003c52:	e011      	b.n	8003c78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 809a 	beq.w	8003d96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	0a5b      	lsrs	r3, r3, #9
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8093 	beq.w	8003d96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fb5f 	bl	8004334 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c76:	e08e      	b.n	8003d96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c78:	e08d      	b.n	8003d96 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	e007      	b.n	8003c9c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d012      	beq.n	8003cce <HAL_I2C_EV_IRQHandler+0x20e>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	0a5b      	lsrs	r3, r3, #9
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00c      	beq.n	8003cce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003cc4:	69b9      	ldr	r1, [r7, #24]
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 ff1d 	bl	8004b06 <I2C_Slave_ADDR>
 8003ccc:	e066      	b.n	8003d9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <HAL_I2C_EV_IRQHandler+0x22e>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	0a5b      	lsrs	r3, r3, #9
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 ff58 	bl	8004b9c <I2C_Slave_STOPF>
 8003cec:	e056      	b.n	8003d9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cee:	7bbb      	ldrb	r3, [r7, #14]
 8003cf0:	2b21      	cmp	r3, #33	; 0x21
 8003cf2:	d002      	beq.n	8003cfa <HAL_I2C_EV_IRQHandler+0x23a>
 8003cf4:	7bbb      	ldrb	r3, [r7, #14]
 8003cf6:	2b29      	cmp	r3, #41	; 0x29
 8003cf8:	d125      	bne.n	8003d46 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	09db      	lsrs	r3, r3, #7
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00f      	beq.n	8003d26 <HAL_I2C_EV_IRQHandler+0x266>
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	0a9b      	lsrs	r3, r3, #10
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_I2C_EV_IRQHandler+0x266>
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	089b      	lsrs	r3, r3, #2
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fe33 	bl	800498a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d24:	e039      	b.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d033      	beq.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2da>
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	0a5b      	lsrs	r3, r3, #9
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d02d      	beq.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fe60 	bl	8004a04 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d44:	e029      	b.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	099b      	lsrs	r3, r3, #6
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00f      	beq.n	8003d72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	0a9b      	lsrs	r3, r3, #10
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fe6b 	bl	8004a46 <I2C_SlaveReceive_RXNE>
 8003d70:	e014      	b.n	8003d9c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00e      	beq.n	8003d9c <HAL_I2C_EV_IRQHandler+0x2dc>
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	0a5b      	lsrs	r3, r3, #9
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fe99 	bl	8004ac2 <I2C_SlaveReceive_BTF>
 8003d90:	e004      	b.n	8003d9c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003d92:	bf00      	nop
 8003d94:	e002      	b.n	8003d9c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d96:	bf00      	nop
 8003d98:	e000      	b.n	8003d9c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	70fb      	strb	r3, [r7, #3]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e88:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d150      	bne.n	8003f3a <I2C_MasterTransmit_TXE+0xc8>
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	2b21      	cmp	r3, #33	; 0x21
 8003e9c:	d14d      	bne.n	8003f3a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d01d      	beq.n	8003ee0 <I2C_MasterTransmit_TXE+0x6e>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d01a      	beq.n	8003ee0 <I2C_MasterTransmit_TXE+0x6e>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eb0:	d016      	beq.n	8003ee0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ec0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2211      	movs	r2, #17
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ff62 	bl	8003da2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ede:	e060      	b.n	8003fa2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eee:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efe:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b40      	cmp	r3, #64	; 0x40
 8003f18:	d107      	bne.n	8003f2a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ff7d 	bl	8003e22 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f28:	e03b      	b.n	8003fa2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff ff35 	bl	8003da2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f38:	e033      	b.n	8003fa2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	2b21      	cmp	r3, #33	; 0x21
 8003f3e:	d005      	beq.n	8003f4c <I2C_MasterTransmit_TXE+0xda>
 8003f40:	7bbb      	ldrb	r3, [r7, #14]
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d12d      	bne.n	8003fa2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b22      	cmp	r3, #34	; 0x22
 8003f4a:	d12a      	bne.n	8003fa2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d108      	bne.n	8003f68 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f64:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f66:	e01c      	b.n	8003fa2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d103      	bne.n	8003f7c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f88e 	bl	8004096 <I2C_MemoryTransmit_TXE_BTF>
}
 8003f7a:	e012      	b.n	8003fa2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fa0:	e7ff      	b.n	8003fa2 <I2C_MasterTransmit_TXE+0x130>
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b21      	cmp	r3, #33	; 0x21
 8003fc2:	d164      	bne.n	800408e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d012      	beq.n	8003ff4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ff2:	e04c      	b.n	800408e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d01d      	beq.n	8004036 <I2C_MasterTransmit_BTF+0x8c>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d01a      	beq.n	8004036 <I2C_MasterTransmit_BTF+0x8c>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004006:	d016      	beq.n	8004036 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004016:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2211      	movs	r2, #17
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff feb7 	bl	8003da2 <HAL_I2C_MasterTxCpltCallback>
}
 8004034:	e02b      	b.n	800408e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004044:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004054:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d107      	bne.n	8004080 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fed2 	bl	8003e22 <HAL_I2C_MemTxCpltCallback>
}
 800407e:	e006      	b.n	800408e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff fe8a 	bl	8003da2 <HAL_I2C_MasterTxCpltCallback>
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d11d      	bne.n	80040ea <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10b      	bne.n	80040ce <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c6:	1c9a      	adds	r2, r3, #2
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80040cc:	e073      	b.n	80041b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	121b      	asrs	r3, r3, #8
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040e8:	e065      	b.n	80041b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d10b      	bne.n	800410a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004108:	e055      	b.n	80041b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410e:	2b02      	cmp	r3, #2
 8004110:	d151      	bne.n	80041b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b22      	cmp	r3, #34	; 0x22
 8004116:	d10d      	bne.n	8004134 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004126:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004132:	e040      	b.n	80041b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d015      	beq.n	800416a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	2b21      	cmp	r3, #33	; 0x21
 8004142:	d112      	bne.n	800416a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004168:	e025      	b.n	80041b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d120      	bne.n	80041b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	2b21      	cmp	r3, #33	; 0x21
 8004178:	d11d      	bne.n	80041b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004188:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004198:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff fe36 	bl	8003e22 <HAL_I2C_MemTxCpltCallback>
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b22      	cmp	r3, #34	; 0x22
 80041d0:	f040 80ac 	bne.w	800432c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d921      	bls.n	8004226 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b03      	cmp	r3, #3
 8004210:	f040 808c 	bne.w	800432c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004222:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004224:	e082      	b.n	800432c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	2b02      	cmp	r3, #2
 800422c:	d075      	beq.n	800431a <I2C_MasterReceive_RXNE+0x15c>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d002      	beq.n	800423a <I2C_MasterReceive_RXNE+0x7c>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d16f      	bne.n	800431a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f001 fa60 	bl	8005700 <I2C_WaitOnSTOPRequestThroughIT>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d142      	bne.n	80042cc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004254:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004264:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d10a      	bne.n	80042b6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff fdc1 	bl	8003e36 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042b4:	e03a      	b.n	800432c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2212      	movs	r2, #18
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff fd76 	bl	8003db6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042ca:	e02f      	b.n	800432c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff fd99 	bl	8003e4a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004318:	e008      	b.n	800432c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004328:	605a      	str	r2, [r3, #4]
}
 800432a:	e7ff      	b.n	800432c <I2C_MasterReceive_RXNE+0x16e>
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b04      	cmp	r3, #4
 800434a:	d11b      	bne.n	8004384 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004382:	e0bd      	b.n	8004500 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b03      	cmp	r3, #3
 800438c:	d129      	bne.n	80043e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800439c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d00a      	beq.n	80043ba <I2C_MasterReceive_BTF+0x86>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d007      	beq.n	80043ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043e0:	e08e      	b.n	8004500 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d176      	bne.n	80044da <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d002      	beq.n	80043f8 <I2C_MasterReceive_BTF+0xc4>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d108      	bne.n	800440a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	e019      	b.n	800443e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b04      	cmp	r3, #4
 800440e:	d002      	beq.n	8004416 <I2C_MasterReceive_BTF+0xe2>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d108      	bne.n	8004428 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e00a      	b.n	800443e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b10      	cmp	r3, #16
 800442c:	d007      	beq.n	800443e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004498:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	d10a      	bne.n	80044c4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff fcba 	bl	8003e36 <HAL_I2C_MemRxCpltCallback>
}
 80044c2:	e01d      	b.n	8004500 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2212      	movs	r2, #18
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff fc6f 	bl	8003db6 <HAL_I2C_MasterRxCpltCallback>
}
 80044d8:	e012      	b.n	8004500 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d117      	bne.n	800454c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004528:	b2db      	uxtb	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004534:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004536:	e067      	b.n	8004608 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	b2da      	uxtb	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	611a      	str	r2, [r3, #16]
}
 800454a:	e05d      	b.n	8004608 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004554:	d133      	bne.n	80045be <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b21      	cmp	r3, #33	; 0x21
 8004560:	d109      	bne.n	8004576 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	b2db      	uxtb	r3, r3
 8004568:	461a      	mov	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004572:	611a      	str	r2, [r3, #16]
 8004574:	e008      	b.n	8004588 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	b2da      	uxtb	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <I2C_Master_SB+0x92>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d108      	bne.n	80045ac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d032      	beq.n	8004608 <I2C_Master_SB+0x100>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d02d      	beq.n	8004608 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ba:	605a      	str	r2, [r3, #4]
}
 80045bc:	e024      	b.n	8004608 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10e      	bne.n	80045e4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	11db      	asrs	r3, r3, #7
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	f003 0306 	and.w	r3, r3, #6
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f063 030f 	orn	r3, r3, #15
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	611a      	str	r2, [r3, #16]
}
 80045e2:	e011      	b.n	8004608 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10d      	bne.n	8004608 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	11db      	asrs	r3, r3, #7
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f003 0306 	and.w	r3, r3, #6
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f063 030e 	orn	r3, r3, #14
 8004600:	b2da      	uxtb	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	611a      	str	r2, [r3, #16]
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	b2da      	uxtb	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <I2C_Master_ADD10+0x26>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d108      	bne.n	800464c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00c      	beq.n	800465c <I2C_Master_ADD10+0x48>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465a:	605a      	str	r2, [r3, #4]
  }
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004668:	b480      	push	{r7}
 800466a:	b091      	sub	sp, #68	; 0x44
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004676:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b22      	cmp	r3, #34	; 0x22
 8004690:	f040 8169 	bne.w	8004966 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10f      	bne.n	80046bc <I2C_Master_ADDR+0x54>
 800469c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d10b      	bne.n	80046bc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a4:	2300      	movs	r3, #0
 80046a6:	633b      	str	r3, [r7, #48]	; 0x30
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	633b      	str	r3, [r7, #48]	; 0x30
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	633b      	str	r3, [r7, #48]	; 0x30
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	e160      	b.n	800497e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d11d      	bne.n	8004700 <I2C_Master_ADDR+0x98>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046cc:	d118      	bne.n	8004700 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ce:	2300      	movs	r3, #0
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	651a      	str	r2, [r3, #80]	; 0x50
 80046fe:	e13e      	b.n	800497e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d113      	bne.n	8004732 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470a:	2300      	movs	r3, #0
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	62bb      	str	r3, [r7, #40]	; 0x28
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e115      	b.n	800495e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	f040 808a 	bne.w	8004852 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004744:	d137      	bne.n	80047b6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004754:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004764:	d113      	bne.n	800478e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004774:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004776:	2300      	movs	r3, #0
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	e0e7      	b.n	800495e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	623b      	str	r3, [r7, #32]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	623b      	str	r3, [r7, #32]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	623b      	str	r3, [r7, #32]
 80047a2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e0d3      	b.n	800495e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d02e      	beq.n	800481a <I2C_Master_ADDR+0x1b2>
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d02b      	beq.n	800481a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80047c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c4:	2b12      	cmp	r3, #18
 80047c6:	d102      	bne.n	80047ce <I2C_Master_ADDR+0x166>
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d125      	bne.n	800481a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d00e      	beq.n	80047f2 <I2C_Master_ADDR+0x18a>
 80047d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d00b      	beq.n	80047f2 <I2C_Master_ADDR+0x18a>
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	2b10      	cmp	r3, #16
 80047de:	d008      	beq.n	80047f2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e007      	b.n	8004802 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004800:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	e0a1      	b.n	800495e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004828:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482a:	2300      	movs	r3, #0
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e085      	b.n	800495e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d14d      	bne.n	80048f8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	2b04      	cmp	r3, #4
 8004860:	d016      	beq.n	8004890 <I2C_Master_ADDR+0x228>
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	2b02      	cmp	r3, #2
 8004866:	d013      	beq.n	8004890 <I2C_Master_ADDR+0x228>
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	2b10      	cmp	r3, #16
 800486c:	d010      	beq.n	8004890 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e007      	b.n	80048a0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800489e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ae:	d117      	bne.n	80048e0 <I2C_Master_ADDR+0x278>
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b6:	d00b      	beq.n	80048d0 <I2C_Master_ADDR+0x268>
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d008      	beq.n	80048d0 <I2C_Master_ADDR+0x268>
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d005      	beq.n	80048d0 <I2C_Master_ADDR+0x268>
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d002      	beq.n	80048d0 <I2C_Master_ADDR+0x268>
 80048ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d107      	bne.n	80048e0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	e032      	b.n	800495e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004906:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004916:	d117      	bne.n	8004948 <I2C_Master_ADDR+0x2e0>
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800491e:	d00b      	beq.n	8004938 <I2C_Master_ADDR+0x2d0>
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	2b01      	cmp	r3, #1
 8004924:	d008      	beq.n	8004938 <I2C_Master_ADDR+0x2d0>
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	2b08      	cmp	r3, #8
 800492a:	d005      	beq.n	8004938 <I2C_Master_ADDR+0x2d0>
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	2b10      	cmp	r3, #16
 8004930:	d002      	beq.n	8004938 <I2C_Master_ADDR+0x2d0>
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	2b20      	cmp	r3, #32
 8004936:	d107      	bne.n	8004948 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004946:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004964:	e00b      	b.n	800497e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	68fb      	ldr	r3, [r7, #12]
}
 800497c:	e7ff      	b.n	800497e <I2C_Master_ADDR+0x316>
 800497e:	bf00      	nop
 8004980:	3744      	adds	r7, #68	; 0x44
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d02b      	beq.n	80049fc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d114      	bne.n	80049fc <I2C_SlaveTransmit_TXE+0x72>
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b29      	cmp	r3, #41	; 0x29
 80049d6:	d111      	bne.n	80049fc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2221      	movs	r2, #33	; 0x21
 80049ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2228      	movs	r2, #40	; 0x28
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff f9e7 	bl	8003dca <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d011      	beq.n	8004a3a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	781a      	ldrb	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a54:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d02c      	beq.n	8004aba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d114      	bne.n	8004aba <I2C_SlaveReceive_RXNE+0x74>
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	2b2a      	cmp	r3, #42	; 0x2a
 8004a94:	d111      	bne.n	8004aba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2222      	movs	r2, #34	; 0x22
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2228      	movs	r2, #40	; 0x28
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff f992 	bl	8003dde <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d012      	beq.n	8004afa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b20:	2b28      	cmp	r3, #40	; 0x28
 8004b22:	d127      	bne.n	8004b74 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b32:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	089b      	lsrs	r3, r3, #2
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	09db      	lsrs	r3, r3, #7
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d103      	bne.n	8004b58 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	81bb      	strh	r3, [r7, #12]
 8004b56:	e002      	b.n	8004b5e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004b66:	89ba      	ldrh	r2, [r7, #12]
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff f940 	bl	8003df2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b72:	e00e      	b.n	8004b92 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b74:	2300      	movs	r3, #0
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	60bb      	str	r3, [r7, #8]
 8004b88:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	60bb      	str	r3, [r7, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf8:	d172      	bne.n	8004ce0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	2b22      	cmp	r3, #34	; 0x22
 8004bfe:	d002      	beq.n	8004c06 <I2C_Slave_STOPF+0x6a>
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	2b2a      	cmp	r3, #42	; 0x2a
 8004c04:	d135      	bne.n	8004c72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f043 0204 	orr.w	r2, r3, #4
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fc fced 	bl	800161e <HAL_DMA_GetState>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d049      	beq.n	8004cde <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	4a69      	ldr	r2, [pc, #420]	; (8004df4 <I2C_Slave_STOPF+0x258>)
 8004c50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fc fcbf 	bl	80015da <HAL_DMA_Abort_IT>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d03d      	beq.n	8004cde <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c70:	e035      	b.n	8004cde <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f043 0204 	orr.w	r2, r3, #4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fc fcb7 	bl	800161e <HAL_DMA_GetState>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d014      	beq.n	8004ce0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	4a4e      	ldr	r2, [pc, #312]	; (8004df4 <I2C_Slave_STOPF+0x258>)
 8004cbc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fc fc89 	bl	80015da <HAL_DMA_Abort_IT>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4798      	blx	r3
 8004cdc:	e000      	b.n	8004ce0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cde:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d03e      	beq.n	8004d68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d112      	bne.n	8004d1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	d112      	bne.n	8004d52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	f043 0204 	orr.w	r2, r3, #4
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f843 	bl	8004dfc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d76:	e039      	b.n	8004dec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d7c:	d109      	bne.n	8004d92 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2228      	movs	r2, #40	; 0x28
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff f826 	bl	8003dde <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b28      	cmp	r3, #40	; 0x28
 8004d9c:	d111      	bne.n	8004dc2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <I2C_Slave_STOPF+0x25c>)
 8004da2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff f827 	bl	8003e0e <HAL_I2C_ListenCpltCallback>
}
 8004dc0:	e014      	b.n	8004dec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	2b22      	cmp	r3, #34	; 0x22
 8004dc8:	d002      	beq.n	8004dd0 <I2C_Slave_STOPF+0x234>
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b22      	cmp	r3, #34	; 0x22
 8004dce:	d10d      	bne.n	8004dec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fe fff9 	bl	8003dde <HAL_I2C_SlaveRxCpltCallback>
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	08005301 	.word	0x08005301
 8004df8:	ffff0000 	.word	0xffff0000

08004dfc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e14:	7bbb      	ldrb	r3, [r7, #14]
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d002      	beq.n	8004e20 <I2C_ITError+0x24>
 8004e1a:	7bbb      	ldrb	r3, [r7, #14]
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d10a      	bne.n	8004e36 <I2C_ITError+0x3a>
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	2b22      	cmp	r3, #34	; 0x22
 8004e24:	d107      	bne.n	8004e36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e3c:	2b28      	cmp	r3, #40	; 0x28
 8004e3e:	d107      	bne.n	8004e50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2228      	movs	r2, #40	; 0x28
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e4e:	e015      	b.n	8004e7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e5e:	d00a      	beq.n	8004e76 <I2C_ITError+0x7a>
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b60      	cmp	r3, #96	; 0x60
 8004e64:	d007      	beq.n	8004e76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8a:	d162      	bne.n	8004f52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d020      	beq.n	8004eec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eae:	4a6a      	ldr	r2, [pc, #424]	; (8005058 <I2C_ITError+0x25c>)
 8004eb0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fc fb8f 	bl	80015da <HAL_DMA_Abort_IT>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8089 	beq.w	8004fd6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	4798      	blx	r3
 8004eea:	e074      	b.n	8004fd6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	4a59      	ldr	r2, [pc, #356]	; (8005058 <I2C_ITError+0x25c>)
 8004ef2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fc fb6e 	bl	80015da <HAL_DMA_Abort_IT>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d068      	beq.n	8004fd6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	2b40      	cmp	r3, #64	; 0x40
 8004f10:	d10b      	bne.n	8004f2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0201 	bic.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4798      	blx	r3
 8004f50:	e041      	b.n	8004fd6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b60      	cmp	r3, #96	; 0x60
 8004f5c:	d125      	bne.n	8004faa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f76:	2b40      	cmp	r3, #64	; 0x40
 8004f78:	d10b      	bne.n	8004f92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0201 	bic.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fe ff5b 	bl	8003e5e <HAL_I2C_AbortCpltCallback>
 8004fa8:	e015      	b.n	8004fd6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d10b      	bne.n	8004fd0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7fe ff3a 	bl	8003e4a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10e      	bne.n	8005004 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d109      	bne.n	8005004 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d104      	bne.n	8005004 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005012:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b04      	cmp	r3, #4
 8005026:	d113      	bne.n	8005050 <I2C_ITError+0x254>
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b28      	cmp	r3, #40	; 0x28
 800502c:	d110      	bne.n	8005050 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a0a      	ldr	r2, [pc, #40]	; (800505c <I2C_ITError+0x260>)
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fe fedf 	bl	8003e0e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	08005301 	.word	0x08005301
 800505c:	ffff0000 	.word	0xffff0000

08005060 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	607a      	str	r2, [r7, #4]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	460b      	mov	r3, r1
 800506e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b08      	cmp	r3, #8
 800507a:	d006      	beq.n	800508a <I2C_MasterRequestWrite+0x2a>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d003      	beq.n	800508a <I2C_MasterRequestWrite+0x2a>
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005088:	d108      	bne.n	800509c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	e00b      	b.n	80050b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	2b12      	cmp	r3, #18
 80050a2:	d107      	bne.n	80050b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f9c5 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00d      	beq.n	80050e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050da:	d103      	bne.n	80050e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e035      	b.n	8005154 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f0:	d108      	bne.n	8005104 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050f2:	897b      	ldrh	r3, [r7, #10]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005100:	611a      	str	r2, [r3, #16]
 8005102:	e01b      	b.n	800513c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005104:	897b      	ldrh	r3, [r7, #10]
 8005106:	11db      	asrs	r3, r3, #7
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f003 0306 	and.w	r3, r3, #6
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f063 030f 	orn	r3, r3, #15
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	490e      	ldr	r1, [pc, #56]	; (800515c <I2C_MasterRequestWrite+0xfc>)
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f9eb 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e010      	b.n	8005154 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005132:	897b      	ldrh	r3, [r7, #10]
 8005134:	b2da      	uxtb	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	4907      	ldr	r1, [pc, #28]	; (8005160 <I2C_MasterRequestWrite+0x100>)
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f9db 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	00010008 	.word	0x00010008
 8005160:	00010002 	.word	0x00010002

08005164 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	607a      	str	r2, [r7, #4]
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	460b      	mov	r3, r1
 8005172:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005188:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d006      	beq.n	800519e <I2C_MasterRequestRead+0x3a>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d003      	beq.n	800519e <I2C_MasterRequestRead+0x3a>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800519c:	d108      	bne.n	80051b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e00b      	b.n	80051c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	2b11      	cmp	r3, #17
 80051b6:	d107      	bne.n	80051c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f93b 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00d      	beq.n	80051fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ee:	d103      	bne.n	80051f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e079      	b.n	80052f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005204:	d108      	bne.n	8005218 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005206:	897b      	ldrh	r3, [r7, #10]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	b2da      	uxtb	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	611a      	str	r2, [r3, #16]
 8005216:	e05f      	b.n	80052d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005218:	897b      	ldrh	r3, [r7, #10]
 800521a:	11db      	asrs	r3, r3, #7
 800521c:	b2db      	uxtb	r3, r3
 800521e:	f003 0306 	and.w	r3, r3, #6
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f063 030f 	orn	r3, r3, #15
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4930      	ldr	r1, [pc, #192]	; (80052f8 <I2C_MasterRequestRead+0x194>)
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f961 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e054      	b.n	80052f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005246:	897b      	ldrh	r3, [r7, #10]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	4929      	ldr	r1, [pc, #164]	; (80052fc <I2C_MasterRequestRead+0x198>)
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f951 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e044      	b.n	80052f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800528a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f8d9 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00d      	beq.n	80052c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b2:	d103      	bne.n	80052bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e017      	b.n	80052f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80052c0:	897b      	ldrh	r3, [r7, #10]
 80052c2:	11db      	asrs	r3, r3, #7
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	f003 0306 	and.w	r3, r3, #6
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	f063 030e 	orn	r3, r3, #14
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4907      	ldr	r1, [pc, #28]	; (80052fc <I2C_MasterRequestRead+0x198>)
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 f90d 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	00010008 	.word	0x00010008
 80052fc:	00010002 	.word	0x00010002

08005300 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005318:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800531a:	4b4b      	ldr	r3, [pc, #300]	; (8005448 <I2C_DMAAbort+0x148>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	08db      	lsrs	r3, r3, #3
 8005320:	4a4a      	ldr	r2, [pc, #296]	; (800544c <I2C_DMAAbort+0x14c>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	0a1a      	lsrs	r2, r3, #8
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	00da      	lsls	r2, r3, #3
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005346:	e00a      	b.n	800535e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3b01      	subs	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800535c:	d0ea      	beq.n	8005334 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536a:	2200      	movs	r2, #0
 800536c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	2200      	movs	r2, #0
 800537c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2200      	movs	r2, #0
 8005392:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a0:	2200      	movs	r2, #0
 80053a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	2200      	movs	r2, #0
 80053b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0201 	bic.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b60      	cmp	r3, #96	; 0x60
 80053ce:	d10e      	bne.n	80053ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2200      	movs	r2, #0
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053e6:	6978      	ldr	r0, [r7, #20]
 80053e8:	f7fe fd39 	bl	8003e5e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053ec:	e027      	b.n	800543e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053ee:	7cfb      	ldrb	r3, [r7, #19]
 80053f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053f4:	2b28      	cmp	r3, #40	; 0x28
 80053f6:	d117      	bne.n	8005428 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005416:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2200      	movs	r2, #0
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2228      	movs	r2, #40	; 0x28
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005426:	e007      	b.n	8005438 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005438:	6978      	ldr	r0, [r7, #20]
 800543a:	f7fe fd06 	bl	8003e4a <HAL_I2C_ErrorCallback>
}
 800543e:	bf00      	nop
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000000 	.word	0x20000000
 800544c:	14f8b589 	.word	0x14f8b589

08005450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	4613      	mov	r3, r2
 800545e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005460:	e025      	b.n	80054ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005468:	d021      	beq.n	80054ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546a:	f7fb ff75 	bl	8001358 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <I2C_WaitOnFlagUntilTimeout+0x30>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d116      	bne.n	80054ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	f043 0220 	orr.w	r2, r3, #32
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e023      	b.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	0c1b      	lsrs	r3, r3, #16
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d10d      	bne.n	80054d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	43da      	mvns	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4013      	ands	r3, r2
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bf0c      	ite	eq
 80054ca:	2301      	moveq	r3, #1
 80054cc:	2300      	movne	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	e00c      	b.n	80054ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	43da      	mvns	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4013      	ands	r3, r2
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d0b6      	beq.n	8005462 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	607a      	str	r2, [r7, #4]
 800550a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800550c:	e051      	b.n	80055b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551c:	d123      	bne.n	8005566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005536:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f043 0204 	orr.w	r2, r3, #4
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e046      	b.n	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d021      	beq.n	80055b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556e:	f7fb fef3 	bl	8001358 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	429a      	cmp	r2, r3
 800557c:	d302      	bcc.n	8005584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d116      	bne.n	80055b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e020      	b.n	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d10c      	bne.n	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	43da      	mvns	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4013      	ands	r3, r2
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e00b      	b.n	80055ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	43da      	mvns	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d18d      	bne.n	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005608:	e02d      	b.n	8005666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 f900 	bl	8005810 <I2C_IsAcknowledgeFailed>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e02d      	b.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d021      	beq.n	8005666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005622:	f7fb fe99 	bl	8001358 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	429a      	cmp	r2, r3
 8005630:	d302      	bcc.n	8005638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d116      	bne.n	8005666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f043 0220 	orr.w	r2, r3, #32
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e007      	b.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005670:	2b80      	cmp	r3, #128	; 0x80
 8005672:	d1ca      	bne.n	800560a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800568a:	e02d      	b.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f8bf 	bl	8005810 <I2C_IsAcknowledgeFailed>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e02d      	b.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d021      	beq.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a4:	f7fb fe58 	bl	8001358 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d302      	bcc.n	80056ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d116      	bne.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	f043 0220 	orr.w	r2, r3, #32
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e007      	b.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d1ca      	bne.n	800568c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800570c:	4b13      	ldr	r3, [pc, #76]	; (800575c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	08db      	lsrs	r3, r3, #3
 8005712:	4a13      	ldr	r2, [pc, #76]	; (8005760 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005714:	fba2 2303 	umull	r2, r3, r2, r3
 8005718:	0a1a      	lsrs	r2, r3, #8
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3b01      	subs	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d107      	bne.n	800573e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f043 0220 	orr.w	r2, r3, #32
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e008      	b.n	8005750 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574c:	d0e9      	beq.n	8005722 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	20000000 	.word	0x20000000
 8005760:	14f8b589 	.word	0x14f8b589

08005764 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005770:	e042      	b.n	80057f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b10      	cmp	r3, #16
 800577e:	d119      	bne.n	80057b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0210 	mvn.w	r2, #16
 8005788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e029      	b.n	8005808 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b4:	f7fb fdd0 	bl	8001358 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d302      	bcc.n	80057ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d116      	bne.n	80057f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	f043 0220 	orr.w	r2, r3, #32
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e007      	b.n	8005808 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	d1b5      	bne.n	8005772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005826:	d11b      	bne.n	8005860 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005830:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	f043 0204 	orr.w	r2, r3, #4
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800587e:	d103      	bne.n	8005888 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005886:	e007      	b.n	8005898 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005890:	d102      	bne.n	8005898 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2208      	movs	r2, #8
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e128      	b.n	8005b08 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d109      	bne.n	80058d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a90      	ldr	r2, [pc, #576]	; (8005b10 <HAL_I2S_Init+0x26c>)
 80058ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7fb fb63 	bl	8000f9c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80058ec:	f023 030f 	bic.w	r3, r3, #15
 80058f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2202      	movs	r2, #2
 80058f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d060      	beq.n	80059c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800590a:	2310      	movs	r3, #16
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	e001      	b.n	8005914 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005910:	2320      	movs	r3, #32
 8005912:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b20      	cmp	r3, #32
 800591a:	d802      	bhi.n	8005922 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005922:	2001      	movs	r0, #1
 8005924:	f001 f9c4 	bl	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005928:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005932:	d125      	bne.n	8005980 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d010      	beq.n	800595e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	fbb2 f2f3 	udiv	r2, r2, r3
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	461a      	mov	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	fbb2 f3f3 	udiv	r3, r2, r3
 8005958:	3305      	adds	r3, #5
 800595a:	613b      	str	r3, [r7, #16]
 800595c:	e01f      	b.n	800599e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	fbb2 f2f3 	udiv	r2, r2, r3
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	461a      	mov	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	fbb2 f3f3 	udiv	r3, r2, r3
 800597a:	3305      	adds	r3, #5
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	e00e      	b.n	800599e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	fbb2 f2f3 	udiv	r2, r2, r3
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	461a      	mov	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	fbb2 f3f3 	udiv	r3, r2, r3
 800599a:	3305      	adds	r3, #5
 800599c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	4a5c      	ldr	r2, [pc, #368]	; (8005b14 <HAL_I2S_Init+0x270>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	08db      	lsrs	r3, r3, #3
 80059a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e003      	b.n	80059cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80059c4:	2302      	movs	r3, #2
 80059c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d902      	bls.n	80059d8 <HAL_I2S_Init+0x134>
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	2bff      	cmp	r3, #255	; 0xff
 80059d6:	d907      	bls.n	80059e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059dc:	f043 0210 	orr.w	r2, r3, #16
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e08f      	b.n	8005b08 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	ea42 0103 	orr.w	r1, r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a06:	f023 030f 	bic.w	r3, r3, #15
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6851      	ldr	r1, [r2, #4]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6892      	ldr	r2, [r2, #8]
 8005a12:	4311      	orrs	r1, r2
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	68d2      	ldr	r2, [r2, #12]
 8005a18:	4311      	orrs	r1, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6992      	ldr	r2, [r2, #24]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a2a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d161      	bne.n	8005af8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a38      	ldr	r2, [pc, #224]	; (8005b18 <HAL_I2S_Init+0x274>)
 8005a38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a37      	ldr	r2, [pc, #220]	; (8005b1c <HAL_I2S_Init+0x278>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d101      	bne.n	8005a48 <HAL_I2S_Init+0x1a4>
 8005a44:	4b36      	ldr	r3, [pc, #216]	; (8005b20 <HAL_I2S_Init+0x27c>)
 8005a46:	e001      	b.n	8005a4c <HAL_I2S_Init+0x1a8>
 8005a48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	4932      	ldr	r1, [pc, #200]	; (8005b1c <HAL_I2S_Init+0x278>)
 8005a54:	428a      	cmp	r2, r1
 8005a56:	d101      	bne.n	8005a5c <HAL_I2S_Init+0x1b8>
 8005a58:	4a31      	ldr	r2, [pc, #196]	; (8005b20 <HAL_I2S_Init+0x27c>)
 8005a5a:	e001      	b.n	8005a60 <HAL_I2S_Init+0x1bc>
 8005a5c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005a60:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a64:	f023 030f 	bic.w	r3, r3, #15
 8005a68:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a2b      	ldr	r2, [pc, #172]	; (8005b1c <HAL_I2S_Init+0x278>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d101      	bne.n	8005a78 <HAL_I2S_Init+0x1d4>
 8005a74:	4b2a      	ldr	r3, [pc, #168]	; (8005b20 <HAL_I2S_Init+0x27c>)
 8005a76:	e001      	b.n	8005a7c <HAL_I2S_Init+0x1d8>
 8005a78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a25      	ldr	r2, [pc, #148]	; (8005b1c <HAL_I2S_Init+0x278>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d101      	bne.n	8005a8e <HAL_I2S_Init+0x1ea>
 8005a8a:	4b25      	ldr	r3, [pc, #148]	; (8005b20 <HAL_I2S_Init+0x27c>)
 8005a8c:	e001      	b.n	8005a92 <HAL_I2S_Init+0x1ee>
 8005a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9e:	d003      	beq.n	8005aa8 <HAL_I2S_Init+0x204>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d103      	bne.n	8005ab0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	e001      	b.n	8005ab4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	897b      	ldrh	r3, [r7, #10]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ae0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a0d      	ldr	r2, [pc, #52]	; (8005b1c <HAL_I2S_Init+0x278>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d101      	bne.n	8005af0 <HAL_I2S_Init+0x24c>
 8005aec:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <HAL_I2S_Init+0x27c>)
 8005aee:	e001      	b.n	8005af4 <HAL_I2S_Init+0x250>
 8005af0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005af4:	897a      	ldrh	r2, [r7, #10]
 8005af6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	08005c1b 	.word	0x08005c1b
 8005b14:	cccccccd 	.word	0xcccccccd
 8005b18:	08005d31 	.word	0x08005d31
 8005b1c:	40003800 	.word	0x40003800
 8005b20:	40003400 	.word	0x40003400

08005b24 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	881a      	ldrh	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	1c9a      	adds	r2, r3, #2
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10e      	bne.n	8005bb4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ba4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff ffb8 	bl	8005b24 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	b292      	uxth	r2, r2
 8005bd0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	1c9a      	adds	r2, r3, #2
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10e      	bne.n	8005c12 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c02:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff ff93 	bl	8005b38 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b086      	sub	sp, #24
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d13a      	bne.n	8005cac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d109      	bne.n	8005c54 <I2S_IRQHandler+0x3a>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b40      	cmp	r3, #64	; 0x40
 8005c4c:	d102      	bne.n	8005c54 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff ffb4 	bl	8005bbc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d126      	bne.n	8005cac <I2S_IRQHandler+0x92>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d11f      	bne.n	8005cac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	f043 0202 	orr.w	r2, r3, #2
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff ff50 	bl	8005b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d136      	bne.n	8005d26 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d109      	bne.n	8005cd6 <I2S_IRQHandler+0xbc>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ccc:	2b80      	cmp	r3, #128	; 0x80
 8005cce:	d102      	bne.n	8005cd6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff ff45 	bl	8005b60 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d122      	bne.n	8005d26 <I2S_IRQHandler+0x10c>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d11b      	bne.n	8005d26 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cfc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d18:	f043 0204 	orr.w	r2, r3, #4
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff ff13 	bl	8005b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d26:	bf00      	nop
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a92      	ldr	r2, [pc, #584]	; (8005f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d101      	bne.n	8005d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005d4a:	4b92      	ldr	r3, [pc, #584]	; (8005f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d4c:	e001      	b.n	8005d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005d4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a8b      	ldr	r2, [pc, #556]	; (8005f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d101      	bne.n	8005d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005d68:	4b8a      	ldr	r3, [pc, #552]	; (8005f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d6a:	e001      	b.n	8005d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7c:	d004      	beq.n	8005d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f040 8099 	bne.w	8005eba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d107      	bne.n	8005da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f925 	bl	8005fec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d107      	bne.n	8005dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f9c8 	bl	800614c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc2:	2b40      	cmp	r3, #64	; 0x40
 8005dc4:	d13a      	bne.n	8005e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d035      	beq.n	8005e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a6e      	ldr	r2, [pc, #440]	; (8005f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d101      	bne.n	8005dde <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005dda:	4b6e      	ldr	r3, [pc, #440]	; (8005f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ddc:	e001      	b.n	8005de2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4969      	ldr	r1, [pc, #420]	; (8005f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dea:	428b      	cmp	r3, r1
 8005dec:	d101      	bne.n	8005df2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005dee:	4b69      	ldr	r3, [pc, #420]	; (8005f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005df0:	e001      	b.n	8005df6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005df6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005dfa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	f043 0202 	orr.w	r2, r3, #2
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff fe88 	bl	8005b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	f040 80c3 	bne.w	8005fce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 80bd 	beq.w	8005fce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a49      	ldr	r2, [pc, #292]	; (8005f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d101      	bne.n	8005e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005e6e:	4b49      	ldr	r3, [pc, #292]	; (8005f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e70:	e001      	b.n	8005e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4944      	ldr	r1, [pc, #272]	; (8005f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e7e:	428b      	cmp	r3, r1
 8005e80:	d101      	bne.n	8005e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005e82:	4b44      	ldr	r3, [pc, #272]	; (8005f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e84:	e001      	b.n	8005e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005e86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e90:	2300      	movs	r3, #0
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eaa:	f043 0204 	orr.w	r2, r3, #4
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fe4a 	bl	8005b4c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005eb8:	e089      	b.n	8005fce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d107      	bne.n	8005ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f8be 	bl	8006050 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d107      	bne.n	8005eee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f8fd 	bl	80060e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef4:	2b40      	cmp	r3, #64	; 0x40
 8005ef6:	d12f      	bne.n	8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d02a      	beq.n	8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f10:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1e      	ldr	r2, [pc, #120]	; (8005f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d101      	bne.n	8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005f1c:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f1e:	e001      	b.n	8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4919      	ldr	r1, [pc, #100]	; (8005f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	d101      	bne.n	8005f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005f30:	4b18      	ldr	r3, [pc, #96]	; (8005f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f32:	e001      	b.n	8005f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005f34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4a:	f043 0202 	orr.w	r2, r3, #2
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff fdfa 	bl	8005b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d136      	bne.n	8005fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d031      	beq.n	8005fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a07      	ldr	r2, [pc, #28]	; (8005f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d101      	bne.n	8005f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005f76:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f78:	e001      	b.n	8005f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005f7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4902      	ldr	r1, [pc, #8]	; (8005f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f86:	428b      	cmp	r3, r1
 8005f88:	d106      	bne.n	8005f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005f8a:	4b02      	ldr	r3, [pc, #8]	; (8005f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f8c:	e006      	b.n	8005f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005f8e:	bf00      	nop
 8005f90:	40003800 	.word	0x40003800
 8005f94:	40003400 	.word	0x40003400
 8005f98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fa0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbe:	f043 0204 	orr.w	r2, r3, #4
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff fdc0 	bl	8005b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fcc:	e000      	b.n	8005fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fce:	bf00      	nop
}
 8005fd0:	bf00      	nop
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	1c99      	adds	r1, r3, #2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6251      	str	r1, [r2, #36]	; 0x24
 8005ffe:	881a      	ldrh	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d113      	bne.n	8006046 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800602c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d106      	bne.n	8006046 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff ffc9 	bl	8005fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	1c99      	adds	r1, r3, #2
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6251      	str	r1, [r2, #36]	; 0x24
 8006062:	8819      	ldrh	r1, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1d      	ldr	r2, [pc, #116]	; (80060e0 <I2SEx_TxISR_I2SExt+0x90>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d101      	bne.n	8006072 <I2SEx_TxISR_I2SExt+0x22>
 800606e:	4b1d      	ldr	r3, [pc, #116]	; (80060e4 <I2SEx_TxISR_I2SExt+0x94>)
 8006070:	e001      	b.n	8006076 <I2SEx_TxISR_I2SExt+0x26>
 8006072:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006076:	460a      	mov	r2, r1
 8006078:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d121      	bne.n	80060d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a12      	ldr	r2, [pc, #72]	; (80060e0 <I2SEx_TxISR_I2SExt+0x90>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d101      	bne.n	80060a0 <I2SEx_TxISR_I2SExt+0x50>
 800609c:	4b11      	ldr	r3, [pc, #68]	; (80060e4 <I2SEx_TxISR_I2SExt+0x94>)
 800609e:	e001      	b.n	80060a4 <I2SEx_TxISR_I2SExt+0x54>
 80060a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	490d      	ldr	r1, [pc, #52]	; (80060e0 <I2SEx_TxISR_I2SExt+0x90>)
 80060ac:	428b      	cmp	r3, r1
 80060ae:	d101      	bne.n	80060b4 <I2SEx_TxISR_I2SExt+0x64>
 80060b0:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <I2SEx_TxISR_I2SExt+0x94>)
 80060b2:	e001      	b.n	80060b8 <I2SEx_TxISR_I2SExt+0x68>
 80060b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d106      	bne.n	80060d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff ff81 	bl	8005fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	40003800 	.word	0x40003800
 80060e4:	40003400 	.word	0x40003400

080060e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68d8      	ldr	r0, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	1c99      	adds	r1, r3, #2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006100:	b282      	uxth	r2, r0
 8006102:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d113      	bne.n	8006144 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800612a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff ff4a 	bl	8005fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a20      	ldr	r2, [pc, #128]	; (80061dc <I2SEx_RxISR_I2SExt+0x90>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d101      	bne.n	8006162 <I2SEx_RxISR_I2SExt+0x16>
 800615e:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <I2SEx_RxISR_I2SExt+0x94>)
 8006160:	e001      	b.n	8006166 <I2SEx_RxISR_I2SExt+0x1a>
 8006162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006166:	68d8      	ldr	r0, [r3, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	1c99      	adds	r1, r3, #2
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006172:	b282      	uxth	r2, r0
 8006174:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d121      	bne.n	80061d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a12      	ldr	r2, [pc, #72]	; (80061dc <I2SEx_RxISR_I2SExt+0x90>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d101      	bne.n	800619c <I2SEx_RxISR_I2SExt+0x50>
 8006198:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <I2SEx_RxISR_I2SExt+0x94>)
 800619a:	e001      	b.n	80061a0 <I2SEx_RxISR_I2SExt+0x54>
 800619c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	490d      	ldr	r1, [pc, #52]	; (80061dc <I2SEx_RxISR_I2SExt+0x90>)
 80061a8:	428b      	cmp	r3, r1
 80061aa:	d101      	bne.n	80061b0 <I2SEx_RxISR_I2SExt+0x64>
 80061ac:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <I2SEx_RxISR_I2SExt+0x94>)
 80061ae:	e001      	b.n	80061b4 <I2SEx_RxISR_I2SExt+0x68>
 80061b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d106      	bne.n	80061d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff ff03 	bl	8005fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40003800 	.word	0x40003800
 80061e0:	40003400 	.word	0x40003400

080061e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e267      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d075      	beq.n	80062ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006202:	4b88      	ldr	r3, [pc, #544]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 030c 	and.w	r3, r3, #12
 800620a:	2b04      	cmp	r3, #4
 800620c:	d00c      	beq.n	8006228 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800620e:	4b85      	ldr	r3, [pc, #532]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006216:	2b08      	cmp	r3, #8
 8006218:	d112      	bne.n	8006240 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800621a:	4b82      	ldr	r3, [pc, #520]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006226:	d10b      	bne.n	8006240 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006228:	4b7e      	ldr	r3, [pc, #504]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d05b      	beq.n	80062ec <HAL_RCC_OscConfig+0x108>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d157      	bne.n	80062ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e242      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006248:	d106      	bne.n	8006258 <HAL_RCC_OscConfig+0x74>
 800624a:	4b76      	ldr	r3, [pc, #472]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a75      	ldr	r2, [pc, #468]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e01d      	b.n	8006294 <HAL_RCC_OscConfig+0xb0>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006260:	d10c      	bne.n	800627c <HAL_RCC_OscConfig+0x98>
 8006262:	4b70      	ldr	r3, [pc, #448]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a6f      	ldr	r2, [pc, #444]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	4b6d      	ldr	r3, [pc, #436]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a6c      	ldr	r2, [pc, #432]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e00b      	b.n	8006294 <HAL_RCC_OscConfig+0xb0>
 800627c:	4b69      	ldr	r3, [pc, #420]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a68      	ldr	r2, [pc, #416]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	4b66      	ldr	r3, [pc, #408]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a65      	ldr	r2, [pc, #404]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 800628e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d013      	beq.n	80062c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629c:	f7fb f85c 	bl	8001358 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062a4:	f7fb f858 	bl	8001358 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b64      	cmp	r3, #100	; 0x64
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e207      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b6:	4b5b      	ldr	r3, [pc, #364]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0f0      	beq.n	80062a4 <HAL_RCC_OscConfig+0xc0>
 80062c2:	e014      	b.n	80062ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c4:	f7fb f848 	bl	8001358 <HAL_GetTick>
 80062c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062cc:	f7fb f844 	bl	8001358 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b64      	cmp	r3, #100	; 0x64
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e1f3      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062de:	4b51      	ldr	r3, [pc, #324]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1f0      	bne.n	80062cc <HAL_RCC_OscConfig+0xe8>
 80062ea:	e000      	b.n	80062ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d063      	beq.n	80063c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062fa:	4b4a      	ldr	r3, [pc, #296]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 030c 	and.w	r3, r3, #12
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006306:	4b47      	ldr	r3, [pc, #284]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800630e:	2b08      	cmp	r3, #8
 8006310:	d11c      	bne.n	800634c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006312:	4b44      	ldr	r3, [pc, #272]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d116      	bne.n	800634c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800631e:	4b41      	ldr	r3, [pc, #260]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d005      	beq.n	8006336 <HAL_RCC_OscConfig+0x152>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d001      	beq.n	8006336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e1c7      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006336:	4b3b      	ldr	r3, [pc, #236]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	4937      	ldr	r1, [pc, #220]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006346:	4313      	orrs	r3, r2
 8006348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800634a:	e03a      	b.n	80063c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d020      	beq.n	8006396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006354:	4b34      	ldr	r3, [pc, #208]	; (8006428 <HAL_RCC_OscConfig+0x244>)
 8006356:	2201      	movs	r2, #1
 8006358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635a:	f7fa fffd 	bl	8001358 <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006362:	f7fa fff9 	bl	8001358 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e1a8      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006374:	4b2b      	ldr	r3, [pc, #172]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0f0      	beq.n	8006362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006380:	4b28      	ldr	r3, [pc, #160]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	4925      	ldr	r1, [pc, #148]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 8006390:	4313      	orrs	r3, r2
 8006392:	600b      	str	r3, [r1, #0]
 8006394:	e015      	b.n	80063c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006396:	4b24      	ldr	r3, [pc, #144]	; (8006428 <HAL_RCC_OscConfig+0x244>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639c:	f7fa ffdc 	bl	8001358 <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063a4:	f7fa ffd8 	bl	8001358 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e187      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063b6:	4b1b      	ldr	r3, [pc, #108]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f0      	bne.n	80063a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d036      	beq.n	800643c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d016      	beq.n	8006404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063d6:	4b15      	ldr	r3, [pc, #84]	; (800642c <HAL_RCC_OscConfig+0x248>)
 80063d8:	2201      	movs	r2, #1
 80063da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063dc:	f7fa ffbc 	bl	8001358 <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063e4:	f7fa ffb8 	bl	8001358 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e167      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063f6:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <HAL_RCC_OscConfig+0x240>)
 80063f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0f0      	beq.n	80063e4 <HAL_RCC_OscConfig+0x200>
 8006402:	e01b      	b.n	800643c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006404:	4b09      	ldr	r3, [pc, #36]	; (800642c <HAL_RCC_OscConfig+0x248>)
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800640a:	f7fa ffa5 	bl	8001358 <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006410:	e00e      	b.n	8006430 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006412:	f7fa ffa1 	bl	8001358 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d907      	bls.n	8006430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e150      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
 8006424:	40023800 	.word	0x40023800
 8006428:	42470000 	.word	0x42470000
 800642c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006430:	4b88      	ldr	r3, [pc, #544]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 8006432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1ea      	bne.n	8006412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8097 	beq.w	8006578 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800644a:	2300      	movs	r3, #0
 800644c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800644e:	4b81      	ldr	r3, [pc, #516]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10f      	bne.n	800647a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800645a:	2300      	movs	r3, #0
 800645c:	60bb      	str	r3, [r7, #8]
 800645e:	4b7d      	ldr	r3, [pc, #500]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	4a7c      	ldr	r2, [pc, #496]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 8006464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006468:	6413      	str	r3, [r2, #64]	; 0x40
 800646a:	4b7a      	ldr	r3, [pc, #488]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006472:	60bb      	str	r3, [r7, #8]
 8006474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006476:	2301      	movs	r3, #1
 8006478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800647a:	4b77      	ldr	r3, [pc, #476]	; (8006658 <HAL_RCC_OscConfig+0x474>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006482:	2b00      	cmp	r3, #0
 8006484:	d118      	bne.n	80064b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006486:	4b74      	ldr	r3, [pc, #464]	; (8006658 <HAL_RCC_OscConfig+0x474>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a73      	ldr	r2, [pc, #460]	; (8006658 <HAL_RCC_OscConfig+0x474>)
 800648c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006492:	f7fa ff61 	bl	8001358 <HAL_GetTick>
 8006496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006498:	e008      	b.n	80064ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800649a:	f7fa ff5d 	bl	8001358 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d901      	bls.n	80064ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e10c      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ac:	4b6a      	ldr	r3, [pc, #424]	; (8006658 <HAL_RCC_OscConfig+0x474>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0f0      	beq.n	800649a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d106      	bne.n	80064ce <HAL_RCC_OscConfig+0x2ea>
 80064c0:	4b64      	ldr	r3, [pc, #400]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 80064c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c4:	4a63      	ldr	r2, [pc, #396]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	6713      	str	r3, [r2, #112]	; 0x70
 80064cc:	e01c      	b.n	8006508 <HAL_RCC_OscConfig+0x324>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b05      	cmp	r3, #5
 80064d4:	d10c      	bne.n	80064f0 <HAL_RCC_OscConfig+0x30c>
 80064d6:	4b5f      	ldr	r3, [pc, #380]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	4a5e      	ldr	r2, [pc, #376]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 80064dc:	f043 0304 	orr.w	r3, r3, #4
 80064e0:	6713      	str	r3, [r2, #112]	; 0x70
 80064e2:	4b5c      	ldr	r3, [pc, #368]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 80064e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e6:	4a5b      	ldr	r2, [pc, #364]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	6713      	str	r3, [r2, #112]	; 0x70
 80064ee:	e00b      	b.n	8006508 <HAL_RCC_OscConfig+0x324>
 80064f0:	4b58      	ldr	r3, [pc, #352]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 80064f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f4:	4a57      	ldr	r2, [pc, #348]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 80064f6:	f023 0301 	bic.w	r3, r3, #1
 80064fa:	6713      	str	r3, [r2, #112]	; 0x70
 80064fc:	4b55      	ldr	r3, [pc, #340]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006500:	4a54      	ldr	r2, [pc, #336]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 8006502:	f023 0304 	bic.w	r3, r3, #4
 8006506:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d015      	beq.n	800653c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006510:	f7fa ff22 	bl	8001358 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006516:	e00a      	b.n	800652e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006518:	f7fa ff1e 	bl	8001358 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	f241 3288 	movw	r2, #5000	; 0x1388
 8006526:	4293      	cmp	r3, r2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e0cb      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800652e:	4b49      	ldr	r3, [pc, #292]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 8006530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0ee      	beq.n	8006518 <HAL_RCC_OscConfig+0x334>
 800653a:	e014      	b.n	8006566 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800653c:	f7fa ff0c 	bl	8001358 <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006542:	e00a      	b.n	800655a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006544:	f7fa ff08 	bl	8001358 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e0b5      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800655a:	4b3e      	ldr	r3, [pc, #248]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 800655c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1ee      	bne.n	8006544 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006566:	7dfb      	ldrb	r3, [r7, #23]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d105      	bne.n	8006578 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800656c:	4b39      	ldr	r3, [pc, #228]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 800656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006570:	4a38      	ldr	r2, [pc, #224]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 8006572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006576:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 80a1 	beq.w	80066c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006582:	4b34      	ldr	r3, [pc, #208]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 030c 	and.w	r3, r3, #12
 800658a:	2b08      	cmp	r3, #8
 800658c:	d05c      	beq.n	8006648 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	2b02      	cmp	r3, #2
 8006594:	d141      	bne.n	800661a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006596:	4b31      	ldr	r3, [pc, #196]	; (800665c <HAL_RCC_OscConfig+0x478>)
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659c:	f7fa fedc 	bl	8001358 <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065a4:	f7fa fed8 	bl	8001358 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e087      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b6:	4b27      	ldr	r3, [pc, #156]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f0      	bne.n	80065a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69da      	ldr	r2, [r3, #28]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	019b      	lsls	r3, r3, #6
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	3b01      	subs	r3, #1
 80065dc:	041b      	lsls	r3, r3, #16
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	061b      	lsls	r3, r3, #24
 80065e6:	491b      	ldr	r1, [pc, #108]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065ec:	4b1b      	ldr	r3, [pc, #108]	; (800665c <HAL_RCC_OscConfig+0x478>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f2:	f7fa feb1 	bl	8001358 <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065fa:	f7fa fead 	bl	8001358 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e05c      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800660c:	4b11      	ldr	r3, [pc, #68]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0f0      	beq.n	80065fa <HAL_RCC_OscConfig+0x416>
 8006618:	e054      	b.n	80066c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800661a:	4b10      	ldr	r3, [pc, #64]	; (800665c <HAL_RCC_OscConfig+0x478>)
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006620:	f7fa fe9a 	bl	8001358 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006628:	f7fa fe96 	bl	8001358 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e045      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <HAL_RCC_OscConfig+0x470>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0x444>
 8006646:	e03d      	b.n	80066c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d107      	bne.n	8006660 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e038      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
 8006654:	40023800 	.word	0x40023800
 8006658:	40007000 	.word	0x40007000
 800665c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006660:	4b1b      	ldr	r3, [pc, #108]	; (80066d0 <HAL_RCC_OscConfig+0x4ec>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d028      	beq.n	80066c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006678:	429a      	cmp	r2, r3
 800667a:	d121      	bne.n	80066c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006686:	429a      	cmp	r2, r3
 8006688:	d11a      	bne.n	80066c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006690:	4013      	ands	r3, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006698:	4293      	cmp	r3, r2
 800669a:	d111      	bne.n	80066c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	3b01      	subs	r3, #1
 80066aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d107      	bne.n	80066c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066bc:	429a      	cmp	r2, r3
 80066be:	d001      	beq.n	80066c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40023800 	.word	0x40023800

080066d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0cc      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066e8:	4b68      	ldr	r3, [pc, #416]	; (800688c <HAL_RCC_ClockConfig+0x1b8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d90c      	bls.n	8006710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066f6:	4b65      	ldr	r3, [pc, #404]	; (800688c <HAL_RCC_ClockConfig+0x1b8>)
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fe:	4b63      	ldr	r3, [pc, #396]	; (800688c <HAL_RCC_ClockConfig+0x1b8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d001      	beq.n	8006710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0b8      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d020      	beq.n	800675e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d005      	beq.n	8006734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006728:	4b59      	ldr	r3, [pc, #356]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	4a58      	ldr	r2, [pc, #352]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006740:	4b53      	ldr	r3, [pc, #332]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4a52      	ldr	r2, [pc, #328]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800674a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800674c:	4b50      	ldr	r3, [pc, #320]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	494d      	ldr	r1, [pc, #308]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	4313      	orrs	r3, r2
 800675c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d044      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d107      	bne.n	8006782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006772:	4b47      	ldr	r3, [pc, #284]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d119      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e07f      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d003      	beq.n	8006792 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800678e:	2b03      	cmp	r3, #3
 8006790:	d107      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006792:	4b3f      	ldr	r3, [pc, #252]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e06f      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a2:	4b3b      	ldr	r3, [pc, #236]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e067      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067b2:	4b37      	ldr	r3, [pc, #220]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f023 0203 	bic.w	r2, r3, #3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4934      	ldr	r1, [pc, #208]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067c4:	f7fa fdc8 	bl	8001358 <HAL_GetTick>
 80067c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ca:	e00a      	b.n	80067e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067cc:	f7fa fdc4 	bl	8001358 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e04f      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e2:	4b2b      	ldr	r3, [pc, #172]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 020c 	and.w	r2, r3, #12
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d1eb      	bne.n	80067cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067f4:	4b25      	ldr	r3, [pc, #148]	; (800688c <HAL_RCC_ClockConfig+0x1b8>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d20c      	bcs.n	800681c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006802:	4b22      	ldr	r3, [pc, #136]	; (800688c <HAL_RCC_ClockConfig+0x1b8>)
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800680a:	4b20      	ldr	r3, [pc, #128]	; (800688c <HAL_RCC_ClockConfig+0x1b8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	429a      	cmp	r2, r3
 8006816:	d001      	beq.n	800681c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e032      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006828:	4b19      	ldr	r3, [pc, #100]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	4916      	ldr	r1, [pc, #88]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 8006836:	4313      	orrs	r3, r2
 8006838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d009      	beq.n	800685a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006846:	4b12      	ldr	r3, [pc, #72]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	490e      	ldr	r1, [pc, #56]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	4313      	orrs	r3, r2
 8006858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800685a:	f000 f821 	bl	80068a0 <HAL_RCC_GetSysClockFreq>
 800685e:	4602      	mov	r2, r0
 8006860:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <HAL_RCC_ClockConfig+0x1bc>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	091b      	lsrs	r3, r3, #4
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	490a      	ldr	r1, [pc, #40]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 800686c:	5ccb      	ldrb	r3, [r1, r3]
 800686e:	fa22 f303 	lsr.w	r3, r2, r3
 8006872:	4a09      	ldr	r2, [pc, #36]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006876:	4b09      	ldr	r3, [pc, #36]	; (800689c <HAL_RCC_ClockConfig+0x1c8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f7fa fd28 	bl	80012d0 <HAL_InitTick>

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40023c00 	.word	0x40023c00
 8006890:	40023800 	.word	0x40023800
 8006894:	0800a6ec 	.word	0x0800a6ec
 8006898:	20000000 	.word	0x20000000
 800689c:	20000004 	.word	0x20000004

080068a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068a4:	b094      	sub	sp, #80	; 0x50
 80068a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	647b      	str	r3, [r7, #68]	; 0x44
 80068ac:	2300      	movs	r3, #0
 80068ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b0:	2300      	movs	r3, #0
 80068b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068b8:	4b79      	ldr	r3, [pc, #484]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 030c 	and.w	r3, r3, #12
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d00d      	beq.n	80068e0 <HAL_RCC_GetSysClockFreq+0x40>
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	f200 80e1 	bhi.w	8006a8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_RCC_GetSysClockFreq+0x34>
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d003      	beq.n	80068da <HAL_RCC_GetSysClockFreq+0x3a>
 80068d2:	e0db      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068d4:	4b73      	ldr	r3, [pc, #460]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 80068d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80068d8:	e0db      	b.n	8006a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068da:	4b73      	ldr	r3, [pc, #460]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x208>)
 80068dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068de:	e0d8      	b.n	8006a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068e0:	4b6f      	ldr	r3, [pc, #444]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068ea:	4b6d      	ldr	r3, [pc, #436]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d063      	beq.n	80069be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068f6:	4b6a      	ldr	r3, [pc, #424]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	099b      	lsrs	r3, r3, #6
 80068fc:	2200      	movs	r2, #0
 80068fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006900:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006908:	633b      	str	r3, [r7, #48]	; 0x30
 800690a:	2300      	movs	r3, #0
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
 800690e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006912:	4622      	mov	r2, r4
 8006914:	462b      	mov	r3, r5
 8006916:	f04f 0000 	mov.w	r0, #0
 800691a:	f04f 0100 	mov.w	r1, #0
 800691e:	0159      	lsls	r1, r3, #5
 8006920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006924:	0150      	lsls	r0, r2, #5
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4621      	mov	r1, r4
 800692c:	1a51      	subs	r1, r2, r1
 800692e:	6139      	str	r1, [r7, #16]
 8006930:	4629      	mov	r1, r5
 8006932:	eb63 0301 	sbc.w	r3, r3, r1
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006944:	4659      	mov	r1, fp
 8006946:	018b      	lsls	r3, r1, #6
 8006948:	4651      	mov	r1, sl
 800694a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800694e:	4651      	mov	r1, sl
 8006950:	018a      	lsls	r2, r1, #6
 8006952:	4651      	mov	r1, sl
 8006954:	ebb2 0801 	subs.w	r8, r2, r1
 8006958:	4659      	mov	r1, fp
 800695a:	eb63 0901 	sbc.w	r9, r3, r1
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800696a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800696e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006972:	4690      	mov	r8, r2
 8006974:	4699      	mov	r9, r3
 8006976:	4623      	mov	r3, r4
 8006978:	eb18 0303 	adds.w	r3, r8, r3
 800697c:	60bb      	str	r3, [r7, #8]
 800697e:	462b      	mov	r3, r5
 8006980:	eb49 0303 	adc.w	r3, r9, r3
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	f04f 0200 	mov.w	r2, #0
 800698a:	f04f 0300 	mov.w	r3, #0
 800698e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006992:	4629      	mov	r1, r5
 8006994:	024b      	lsls	r3, r1, #9
 8006996:	4621      	mov	r1, r4
 8006998:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800699c:	4621      	mov	r1, r4
 800699e:	024a      	lsls	r2, r1, #9
 80069a0:	4610      	mov	r0, r2
 80069a2:	4619      	mov	r1, r3
 80069a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a6:	2200      	movs	r2, #0
 80069a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069b0:	f7f9 fc0a 	bl	80001c8 <__aeabi_uldivmod>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	4613      	mov	r3, r2
 80069ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069bc:	e058      	b.n	8006a70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069be:	4b38      	ldr	r3, [pc, #224]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	099b      	lsrs	r3, r3, #6
 80069c4:	2200      	movs	r2, #0
 80069c6:	4618      	mov	r0, r3
 80069c8:	4611      	mov	r1, r2
 80069ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069ce:	623b      	str	r3, [r7, #32]
 80069d0:	2300      	movs	r3, #0
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
 80069d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069d8:	4642      	mov	r2, r8
 80069da:	464b      	mov	r3, r9
 80069dc:	f04f 0000 	mov.w	r0, #0
 80069e0:	f04f 0100 	mov.w	r1, #0
 80069e4:	0159      	lsls	r1, r3, #5
 80069e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069ea:	0150      	lsls	r0, r2, #5
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4641      	mov	r1, r8
 80069f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80069f6:	4649      	mov	r1, r9
 80069f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a10:	ebb2 040a 	subs.w	r4, r2, sl
 8006a14:	eb63 050b 	sbc.w	r5, r3, fp
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	00eb      	lsls	r3, r5, #3
 8006a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a26:	00e2      	lsls	r2, r4, #3
 8006a28:	4614      	mov	r4, r2
 8006a2a:	461d      	mov	r5, r3
 8006a2c:	4643      	mov	r3, r8
 8006a2e:	18e3      	adds	r3, r4, r3
 8006a30:	603b      	str	r3, [r7, #0]
 8006a32:	464b      	mov	r3, r9
 8006a34:	eb45 0303 	adc.w	r3, r5, r3
 8006a38:	607b      	str	r3, [r7, #4]
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	f04f 0300 	mov.w	r3, #0
 8006a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a46:	4629      	mov	r1, r5
 8006a48:	028b      	lsls	r3, r1, #10
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a50:	4621      	mov	r1, r4
 8006a52:	028a      	lsls	r2, r1, #10
 8006a54:	4610      	mov	r0, r2
 8006a56:	4619      	mov	r1, r3
 8006a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	61fa      	str	r2, [r7, #28]
 8006a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a64:	f7f9 fbb0 	bl	80001c8 <__aeabi_uldivmod>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	0c1b      	lsrs	r3, r3, #16
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a8a:	e002      	b.n	8006a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a8c:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3750      	adds	r7, #80	; 0x50
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40023800 	.word	0x40023800
 8006aa4:	00f42400 	.word	0x00f42400
 8006aa8:	007a1200 	.word	0x007a1200

08006aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ab0:	4b03      	ldr	r3, [pc, #12]	; (8006ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	20000000 	.word	0x20000000

08006ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ac8:	f7ff fff0 	bl	8006aac <HAL_RCC_GetHCLKFreq>
 8006acc:	4602      	mov	r2, r0
 8006ace:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	0a9b      	lsrs	r3, r3, #10
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	4903      	ldr	r1, [pc, #12]	; (8006ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ada:	5ccb      	ldrb	r3, [r1, r3]
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40023800 	.word	0x40023800
 8006ae8:	0800a6fc 	.word	0x0800a6fc

08006aec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d105      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d035      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b14:	4b62      	ldr	r3, [pc, #392]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b1a:	f7fa fc1d 	bl	8001358 <HAL_GetTick>
 8006b1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b20:	e008      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b22:	f7fa fc19 	bl	8001358 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e0b0      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b34:	4b5b      	ldr	r3, [pc, #364]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1f0      	bne.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	019a      	lsls	r2, r3, #6
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	071b      	lsls	r3, r3, #28
 8006b4c:	4955      	ldr	r1, [pc, #340]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b54:	4b52      	ldr	r3, [pc, #328]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b56:	2201      	movs	r2, #1
 8006b58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b5a:	f7fa fbfd 	bl	8001358 <HAL_GetTick>
 8006b5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b60:	e008      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b62:	f7fa fbf9 	bl	8001358 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e090      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b74:	4b4b      	ldr	r3, [pc, #300]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0f0      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8083 	beq.w	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	4b44      	ldr	r3, [pc, #272]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	4a43      	ldr	r2, [pc, #268]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b9e:	4b41      	ldr	r3, [pc, #260]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006baa:	4b3f      	ldr	r3, [pc, #252]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a3e      	ldr	r2, [pc, #248]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bb6:	f7fa fbcf 	bl	8001358 <HAL_GetTick>
 8006bba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006bbe:	f7fa fbcb 	bl	8001358 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e062      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bd0:	4b35      	ldr	r3, [pc, #212]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0f0      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bdc:	4b31      	ldr	r3, [pc, #196]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d02f      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d028      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bfa:	4b2a      	ldr	r3, [pc, #168]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c02:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c04:	4b29      	ldr	r3, [pc, #164]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c06:	2201      	movs	r2, #1
 8006c08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c0a:	4b28      	ldr	r3, [pc, #160]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c10:	4a24      	ldr	r2, [pc, #144]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c16:	4b23      	ldr	r3, [pc, #140]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d114      	bne.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c22:	f7fa fb99 	bl	8001358 <HAL_GetTick>
 8006c26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c28:	e00a      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c2a:	f7fa fb95 	bl	8001358 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e02a      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c40:	4b18      	ldr	r3, [pc, #96]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0ee      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c58:	d10d      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006c5a:	4b12      	ldr	r3, [pc, #72]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c6e:	490d      	ldr	r1, [pc, #52]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	608b      	str	r3, [r1, #8]
 8006c74:	e005      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c76:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c80:	6093      	str	r3, [r2, #8]
 8006c82:	4b08      	ldr	r3, [pc, #32]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c8e:	4905      	ldr	r1, [pc, #20]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	42470068 	.word	0x42470068
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	40007000 	.word	0x40007000
 8006cac:	42470e40 	.word	0x42470e40

08006cb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d13e      	bne.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006cce:	4b23      	ldr	r3, [pc, #140]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d12f      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ce4:	4b1e      	ldr	r3, [pc, #120]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ce6:	617b      	str	r3, [r7, #20]
          break;
 8006ce8:	e02f      	b.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006cea:	4b1c      	ldr	r3, [pc, #112]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cf6:	d108      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006cf8:	4b18      	ldr	r3, [pc, #96]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d00:	4a18      	ldr	r2, [pc, #96]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	e007      	b.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d0a:	4b14      	ldr	r3, [pc, #80]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d12:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006d1a:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d20:	099b      	lsrs	r3, r3, #6
 8006d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	fb02 f303 	mul.w	r3, r2, r3
 8006d2c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d34:	0f1b      	lsrs	r3, r3, #28
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d40:	617b      	str	r3, [r7, #20]
          break;
 8006d42:	e002      	b.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
          break;
 8006d48:	bf00      	nop
        }
      }
      break;
 8006d4a:	bf00      	nop
    }
  }
  return frequency;
 8006d4c:	697b      	ldr	r3, [r7, #20]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	00bb8000 	.word	0x00bb8000
 8006d64:	007a1200 	.word	0x007a1200
 8006d68:	00f42400 	.word	0x00f42400

08006d6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e07b      	b.n	8006e76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d108      	bne.n	8006d98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d8e:	d009      	beq.n	8006da4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	61da      	str	r2, [r3, #28]
 8006d96:	e005      	b.n	8006da4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fa f96c 	bl	800109c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006dec:	431a      	orrs	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e14:	431a      	orrs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e28:	ea42 0103 	orr.w	r1, r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	0c1b      	lsrs	r3, r3, #16
 8006e42:	f003 0104 	and.w	r1, r3, #4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	f003 0210 	and.w	r2, r3, #16
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e7e:	b084      	sub	sp, #16
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	f107 001c 	add.w	r0, r7, #28
 8006e8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d122      	bne.n	8006edc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d105      	bne.n	8006ed0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f9bf 	bl	8007254 <USB_CoreReset>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	73fb      	strb	r3, [r7, #15]
 8006eda:	e01a      	b.n	8006f12 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f9b3 	bl	8007254 <USB_CoreReset>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d106      	bne.n	8006f06 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	639a      	str	r2, [r3, #56]	; 0x38
 8006f04:	e005      	b.n	8006f12 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d10b      	bne.n	8006f30 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f043 0206 	orr.w	r2, r3, #6
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f043 0220 	orr.w	r2, r3, #32
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f3c:	b004      	add	sp, #16
 8006f3e:	4770      	bx	lr

08006f40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f043 0201 	orr.w	r2, r3, #1
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f023 0201 	bic.w	r2, r3, #1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d115      	bne.n	8006fd2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	f7fa f9dc 	bl	8001370 <HAL_Delay>
      ms++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f939 	bl	8007236 <USB_GetMode>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d01e      	beq.n	8007008 <USB_SetCurrentMode+0x84>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b31      	cmp	r3, #49	; 0x31
 8006fce:	d9f0      	bls.n	8006fb2 <USB_SetCurrentMode+0x2e>
 8006fd0:	e01a      	b.n	8007008 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d115      	bne.n	8007004 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fe4:	2001      	movs	r0, #1
 8006fe6:	f7fa f9c3 	bl	8001370 <HAL_Delay>
      ms++;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f920 	bl	8007236 <USB_GetMode>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <USB_SetCurrentMode+0x84>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b31      	cmp	r3, #49	; 0x31
 8007000:	d9f0      	bls.n	8006fe4 <USB_SetCurrentMode+0x60>
 8007002:	e001      	b.n	8007008 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e005      	b.n	8007014 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b32      	cmp	r3, #50	; 0x32
 800700c:	d101      	bne.n	8007012 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e000      	b.n	8007014 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3301      	adds	r3, #1
 800702e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4a13      	ldr	r2, [pc, #76]	; (8007080 <USB_FlushTxFifo+0x64>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d901      	bls.n	800703c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e01b      	b.n	8007074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	daf2      	bge.n	800702a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	019b      	lsls	r3, r3, #6
 800704c:	f043 0220 	orr.w	r2, r3, #32
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4a08      	ldr	r2, [pc, #32]	; (8007080 <USB_FlushTxFifo+0x64>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d901      	bls.n	8007066 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e006      	b.n	8007074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b20      	cmp	r3, #32
 8007070:	d0f0      	beq.n	8007054 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	00030d40 	.word	0x00030d40

08007084 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3301      	adds	r3, #1
 8007094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4a11      	ldr	r2, [pc, #68]	; (80070e0 <USB_FlushRxFifo+0x5c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d901      	bls.n	80070a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e018      	b.n	80070d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	daf2      	bge.n	8007090 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2210      	movs	r2, #16
 80070b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3301      	adds	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4a08      	ldr	r2, [pc, #32]	; (80070e0 <USB_FlushRxFifo+0x5c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d901      	bls.n	80070c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e006      	b.n	80070d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0310 	and.w	r3, r3, #16
 80070ce:	2b10      	cmp	r3, #16
 80070d0:	d0f0      	beq.n	80070b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	00030d40 	.word	0x00030d40

080070e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b089      	sub	sp, #36	; 0x24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	4611      	mov	r1, r2
 80070f0:	461a      	mov	r2, r3
 80070f2:	460b      	mov	r3, r1
 80070f4:	71fb      	strb	r3, [r7, #7]
 80070f6:	4613      	mov	r3, r2
 80070f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007102:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007106:	2b00      	cmp	r3, #0
 8007108:	d123      	bne.n	8007152 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800710a:	88bb      	ldrh	r3, [r7, #4]
 800710c:	3303      	adds	r3, #3
 800710e:	089b      	lsrs	r3, r3, #2
 8007110:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007112:	2300      	movs	r3, #0
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	e018      	b.n	800714a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007118:	79fb      	ldrb	r3, [r7, #7]
 800711a:	031a      	lsls	r2, r3, #12
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	4413      	add	r3, r2
 8007120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007124:	461a      	mov	r2, r3
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	3301      	adds	r3, #1
 8007130:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	3301      	adds	r3, #1
 8007136:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	3301      	adds	r3, #1
 800713c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	3301      	adds	r3, #1
 8007142:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	3301      	adds	r3, #1
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	429a      	cmp	r2, r3
 8007150:	d3e2      	bcc.n	8007118 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3724      	adds	r7, #36	; 0x24
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007160:	b480      	push	{r7}
 8007162:	b08b      	sub	sp, #44	; 0x2c
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	4613      	mov	r3, r2
 800716c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	089b      	lsrs	r3, r3, #2
 800717a:	b29b      	uxth	r3, r3
 800717c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800717e:	88fb      	ldrh	r3, [r7, #6]
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007186:	2300      	movs	r3, #0
 8007188:	623b      	str	r3, [r7, #32]
 800718a:	e014      	b.n	80071b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	601a      	str	r2, [r3, #0]
    pDest++;
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	3301      	adds	r3, #1
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	3301      	adds	r3, #1
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	3301      	adds	r3, #1
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	3301      	adds	r3, #1
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	3301      	adds	r3, #1
 80071b4:	623b      	str	r3, [r7, #32]
 80071b6:	6a3a      	ldr	r2, [r7, #32]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d3e6      	bcc.n	800718c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071be:	8bfb      	ldrh	r3, [r7, #30]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d01e      	beq.n	8007202 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ce:	461a      	mov	r2, r3
 80071d0:	f107 0310 	add.w	r3, r7, #16
 80071d4:	6812      	ldr	r2, [r2, #0]
 80071d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	fa22 f303 	lsr.w	r3, r2, r3
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	701a      	strb	r2, [r3, #0]
      i++;
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	3301      	adds	r3, #1
 80071ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	3301      	adds	r3, #1
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80071f6:	8bfb      	ldrh	r3, [r7, #30]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80071fc:	8bfb      	ldrh	r3, [r7, #30]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1ea      	bne.n	80071d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007204:	4618      	mov	r0, r3
 8007206:	372c      	adds	r7, #44	; 0x2c
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	4013      	ands	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007228:	68fb      	ldr	r3, [r7, #12]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	f003 0301 	and.w	r3, r3, #1
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
	...

08007254 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <USB_CoreReset+0x64>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d901      	bls.n	8007272 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e01b      	b.n	80072aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	daf2      	bge.n	8007260 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f043 0201 	orr.w	r2, r3, #1
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3301      	adds	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4a09      	ldr	r2, [pc, #36]	; (80072b8 <USB_CoreReset+0x64>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d901      	bls.n	800729c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e006      	b.n	80072aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d0f0      	beq.n	800728a <USB_CoreReset+0x36>

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	00030d40 	.word	0x00030d40

080072bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072bc:	b084      	sub	sp, #16
 80072be:	b580      	push	{r7, lr}
 80072c0:	b086      	sub	sp, #24
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072dc:	461a      	mov	r2, r3
 80072de:	2300      	movs	r3, #0
 80072e0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730e:	2b00      	cmp	r3, #0
 8007310:	d018      	beq.n	8007344 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007314:	2b01      	cmp	r3, #1
 8007316:	d10a      	bne.n	800732e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007326:	f043 0304 	orr.w	r3, r3, #4
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	e014      	b.n	8007358 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800733c:	f023 0304 	bic.w	r3, r3, #4
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	e009      	b.n	8007358 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007352:	f023 0304 	bic.w	r3, r3, #4
 8007356:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007358:	2110      	movs	r1, #16
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fe5e 	bl	800701c <USB_FlushTxFifo>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff fe8a 	bl	8007084 <USB_FlushRxFifo>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800737a:	2300      	movs	r3, #0
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	e015      	b.n	80073ac <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738c:	461a      	mov	r2, r3
 800738e:	f04f 33ff 	mov.w	r3, #4294967295
 8007392:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a0:	461a      	mov	r2, r3
 80073a2:	2300      	movs	r3, #0
 80073a4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	3301      	adds	r3, #1
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d3e5      	bcc.n	8007380 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f04f 32ff 	mov.w	r2, #4294967295
 80073c0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00b      	beq.n	80073e6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073d4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a13      	ldr	r2, [pc, #76]	; (8007428 <USB_HostInit+0x16c>)
 80073da:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a13      	ldr	r2, [pc, #76]	; (800742c <USB_HostInit+0x170>)
 80073e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80073e4:	e009      	b.n	80073fa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2280      	movs	r2, #128	; 0x80
 80073ea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a10      	ldr	r2, [pc, #64]	; (8007430 <USB_HostInit+0x174>)
 80073f0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a0f      	ldr	r2, [pc, #60]	; (8007434 <USB_HostInit+0x178>)
 80073f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d105      	bne.n	800740c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	f043 0210 	orr.w	r2, r3, #16
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699a      	ldr	r2, [r3, #24]
 8007410:	4b09      	ldr	r3, [pc, #36]	; (8007438 <USB_HostInit+0x17c>)
 8007412:	4313      	orrs	r3, r2
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007418:	7dfb      	ldrb	r3, [r7, #23]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007424:	b004      	add	sp, #16
 8007426:	4770      	bx	lr
 8007428:	01000200 	.word	0x01000200
 800742c:	00e00300 	.word	0x00e00300
 8007430:	00600080 	.word	0x00600080
 8007434:	004000e0 	.word	0x004000e0
 8007438:	a3200008 	.word	0xa3200008

0800743c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800745a:	f023 0303 	bic.w	r3, r3, #3
 800745e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	78fb      	ldrb	r3, [r7, #3]
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	68f9      	ldr	r1, [r7, #12]
 8007470:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007474:	4313      	orrs	r3, r2
 8007476:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d107      	bne.n	800748e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007484:	461a      	mov	r2, r3
 8007486:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800748a:	6053      	str	r3, [r2, #4]
 800748c:	e009      	b.n	80074a2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d106      	bne.n	80074a2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800749a:	461a      	mov	r2, r3
 800749c:	f241 7370 	movw	r3, #6000	; 0x1770
 80074a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80074d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074de:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80074e0:	2064      	movs	r0, #100	; 0x64
 80074e2:	f7f9 ff45 	bl	8001370 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80074f4:	200a      	movs	r0, #10
 80074f6:	f7f9 ff3b 	bl	8001370 <HAL_Delay>

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007528:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d109      	bne.n	8007548 <USB_DriveVbus+0x44>
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d106      	bne.n	8007548 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007542:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007546:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800754e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007552:	d109      	bne.n	8007568 <USB_DriveVbus+0x64>
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007566:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007576:	b480      	push	{r7}
 8007578:	b085      	sub	sp, #20
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	0c5b      	lsrs	r3, r3, #17
 8007594:	f003 0303 	and.w	r3, r3, #3
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	b29b      	uxth	r3, r3
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
	...

080075c8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	4608      	mov	r0, r1
 80075d2:	4611      	mov	r1, r2
 80075d4:	461a      	mov	r2, r3
 80075d6:	4603      	mov	r3, r0
 80075d8:	70fb      	strb	r3, [r7, #3]
 80075da:	460b      	mov	r3, r1
 80075dc:	70bb      	strb	r3, [r7, #2]
 80075de:	4613      	mov	r3, r2
 80075e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f6:	461a      	mov	r2, r3
 80075f8:	f04f 33ff 	mov.w	r3, #4294967295
 80075fc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80075fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007602:	2b03      	cmp	r3, #3
 8007604:	d87e      	bhi.n	8007704 <USB_HC_Init+0x13c>
 8007606:	a201      	add	r2, pc, #4	; (adr r2, 800760c <USB_HC_Init+0x44>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	0800761d 	.word	0x0800761d
 8007610:	080076c7 	.word	0x080076c7
 8007614:	0800761d 	.word	0x0800761d
 8007618:	08007689 	.word	0x08007689
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	4413      	add	r3, r2
 8007624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007628:	461a      	mov	r2, r3
 800762a:	f240 439d 	movw	r3, #1181	; 0x49d
 800762e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007630:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007634:	2b00      	cmp	r3, #0
 8007636:	da10      	bge.n	800765a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	4413      	add	r3, r2
 8007640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	78fa      	ldrb	r2, [r7, #3]
 8007648:	0151      	lsls	r1, r2, #5
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	440a      	add	r2, r1
 800764e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007656:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007658:	e057      	b.n	800770a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007662:	2b00      	cmp	r3, #0
 8007664:	d051      	beq.n	800770a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	4413      	add	r3, r2
 800766e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	78fa      	ldrb	r2, [r7, #3]
 8007676:	0151      	lsls	r1, r2, #5
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	440a      	add	r2, r1
 800767c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007680:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007684:	60d3      	str	r3, [r2, #12]
      break;
 8007686:	e040      	b.n	800770a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	4413      	add	r3, r2
 8007690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007694:	461a      	mov	r2, r3
 8007696:	f240 639d 	movw	r3, #1693	; 0x69d
 800769a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800769c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	da34      	bge.n	800770e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80076a4:	78fb      	ldrb	r3, [r7, #3]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	78fa      	ldrb	r2, [r7, #3]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076c2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80076c4:	e023      	b.n	800770e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d2:	461a      	mov	r2, r3
 80076d4:	f240 2325 	movw	r3, #549	; 0x225
 80076d8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80076da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	da17      	bge.n	8007712 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	0151      	lsls	r1, r2, #5
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	440a      	add	r2, r1
 80076f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076fc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007700:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007702:	e006      	b.n	8007712 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	77fb      	strb	r3, [r7, #31]
      break;
 8007708:	e004      	b.n	8007714 <USB_HC_Init+0x14c>
      break;
 800770a:	bf00      	nop
 800770c:	e002      	b.n	8007714 <USB_HC_Init+0x14c>
      break;
 800770e:	bf00      	nop
 8007710:	e000      	b.n	8007714 <USB_HC_Init+0x14c>
      break;
 8007712:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007714:	78fb      	ldrb	r3, [r7, #3]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	4413      	add	r3, r2
 800771c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	78fa      	ldrb	r2, [r7, #3]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	440a      	add	r2, r1
 800772a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800772e:	f043 0302 	orr.w	r3, r3, #2
 8007732:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800773a:	699a      	ldr	r2, [r3, #24]
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	2101      	movs	r1, #1
 8007744:	fa01 f303 	lsl.w	r3, r1, r3
 8007748:	6939      	ldr	r1, [r7, #16]
 800774a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800774e:	4313      	orrs	r3, r2
 8007750:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800775e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007762:	2b00      	cmp	r3, #0
 8007764:	da03      	bge.n	800776e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	e001      	b.n	8007772 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff feff 	bl	8007576 <USB_GetHostSpeed>
 8007778:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800777a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800777e:	2b02      	cmp	r3, #2
 8007780:	d106      	bne.n	8007790 <USB_HC_Init+0x1c8>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d003      	beq.n	8007790 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	e001      	b.n	8007794 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007794:	787b      	ldrb	r3, [r7, #1]
 8007796:	059b      	lsls	r3, r3, #22
 8007798:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800779c:	78bb      	ldrb	r3, [r7, #2]
 800779e:	02db      	lsls	r3, r3, #11
 80077a0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077a4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80077a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077aa:	049b      	lsls	r3, r3, #18
 80077ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80077b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80077b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80077b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80077b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077be:	78fb      	ldrb	r3, [r7, #3]
 80077c0:	0159      	lsls	r1, r3, #5
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	440b      	add	r3, r1
 80077c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ca:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077d0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80077d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d003      	beq.n	80077e2 <USB_HC_Init+0x21a>
 80077da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d10f      	bne.n	8007802 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80077e2:	78fb      	ldrb	r3, [r7, #3]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	78fa      	ldrb	r2, [r7, #3]
 80077f2:	0151      	lsls	r1, r2, #5
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	440a      	add	r2, r1
 80077f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007800:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007802:	7ffb      	ldrb	r3, [r7, #31]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3720      	adds	r7, #32
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	; 0x30
 8007810:	af02      	add	r7, sp, #8
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	785b      	ldrb	r3, [r3, #1]
 8007822:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007828:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007832:	2b00      	cmp	r3, #0
 8007834:	d02d      	beq.n	8007892 <USB_HC_StartXfer+0x86>
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	791b      	ldrb	r3, [r3, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d129      	bne.n	8007892 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d117      	bne.n	8007874 <USB_HC_StartXfer+0x68>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	79db      	ldrb	r3, [r3, #7]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <USB_HC_StartXfer+0x48>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	79db      	ldrb	r3, [r3, #7]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d10f      	bne.n	8007874 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	4413      	add	r3, r2
 800785c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	0151      	lsls	r1, r2, #5
 8007866:	6a3a      	ldr	r2, [r7, #32]
 8007868:	440a      	add	r2, r1
 800786a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800786e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007872:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007874:	79fb      	ldrb	r3, [r7, #7]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10b      	bne.n	8007892 <USB_HC_StartXfer+0x86>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	795b      	ldrb	r3, [r3, #5]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d107      	bne.n	8007892 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	785b      	ldrb	r3, [r3, #1]
 8007886:	4619      	mov	r1, r3
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 fa0f 	bl	8007cac <USB_DoPing>
      return HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	e0f8      	b.n	8007a84 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d018      	beq.n	80078cc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	8912      	ldrh	r2, [r2, #8]
 80078a2:	4413      	add	r3, r2
 80078a4:	3b01      	subs	r3, #1
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	8912      	ldrh	r2, [r2, #8]
 80078aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80078ae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80078b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80078b2:	8b7b      	ldrh	r3, [r7, #26]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d90b      	bls.n	80078d0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80078b8:	8b7b      	ldrh	r3, [r7, #26]
 80078ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	8912      	ldrh	r2, [r2, #8]
 80078c2:	fb03 f202 	mul.w	r2, r3, r2
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	611a      	str	r2, [r3, #16]
 80078ca:	e001      	b.n	80078d0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80078cc:	2301      	movs	r3, #1
 80078ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	78db      	ldrb	r3, [r3, #3]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d007      	beq.n	80078e8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	8912      	ldrh	r2, [r2, #8]
 80078de:	fb03 f202 	mul.w	r2, r3, r2
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	611a      	str	r2, [r3, #16]
 80078e6:	e003      	b.n	80078f0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	695a      	ldr	r2, [r3, #20]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078fa:	04d9      	lsls	r1, r3, #19
 80078fc:	4b63      	ldr	r3, [pc, #396]	; (8007a8c <USB_HC_StartXfer+0x280>)
 80078fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007900:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	7a9b      	ldrb	r3, [r3, #10]
 8007906:	075b      	lsls	r3, r3, #29
 8007908:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800790c:	69f9      	ldr	r1, [r7, #28]
 800790e:	0148      	lsls	r0, r1, #5
 8007910:	6a39      	ldr	r1, [r7, #32]
 8007912:	4401      	add	r1, r0
 8007914:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007918:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800791a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	68d9      	ldr	r1, [r3, #12]
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	4413      	add	r3, r2
 800792e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007932:	460a      	mov	r2, r1
 8007934:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	bf0c      	ite	eq
 8007946:	2301      	moveq	r3, #1
 8007948:	2300      	movne	r3, #0
 800794a:	b2db      	uxtb	r3, r3
 800794c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	4413      	add	r3, r2
 8007956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	0151      	lsls	r1, r2, #5
 8007960:	6a3a      	ldr	r2, [r7, #32]
 8007962:	440a      	add	r2, r1
 8007964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007968:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800796c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	4413      	add	r3, r2
 8007976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	7e7b      	ldrb	r3, [r7, #25]
 800797e:	075b      	lsls	r3, r3, #29
 8007980:	69f9      	ldr	r1, [r7, #28]
 8007982:	0148      	lsls	r0, r1, #5
 8007984:	6a39      	ldr	r1, [r7, #32]
 8007986:	4401      	add	r1, r0
 8007988:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800798c:	4313      	orrs	r3, r2
 800798e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	4413      	add	r3, r2
 8007998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079a6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	78db      	ldrb	r3, [r3, #3]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b6:	613b      	str	r3, [r7, #16]
 80079b8:	e003      	b.n	80079c2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079c0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079c8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d6:	461a      	mov	r2, r3
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	e04e      	b.n	8007a84 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	78db      	ldrb	r3, [r3, #3]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d149      	bne.n	8007a82 <USB_HC_StartXfer+0x276>
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d045      	beq.n	8007a82 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	79db      	ldrb	r3, [r3, #7]
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d830      	bhi.n	8007a60 <USB_HC_StartXfer+0x254>
 80079fe:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <USB_HC_StartXfer+0x1f8>)
 8007a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a04:	08007a15 	.word	0x08007a15
 8007a08:	08007a39 	.word	0x08007a39
 8007a0c:	08007a15 	.word	0x08007a15
 8007a10:	08007a39 	.word	0x08007a39
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	3303      	adds	r3, #3
 8007a1a:	089b      	lsrs	r3, r3, #2
 8007a1c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007a1e:	8afa      	ldrh	r2, [r7, #22]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d91c      	bls.n	8007a64 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f043 0220 	orr.w	r2, r3, #32
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a36:	e015      	b.n	8007a64 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	3303      	adds	r3, #3
 8007a3e:	089b      	lsrs	r3, r3, #2
 8007a40:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007a42:	8afa      	ldrh	r2, [r7, #22]
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d90a      	bls.n	8007a68 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a5e:	e003      	b.n	8007a68 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007a60:	bf00      	nop
 8007a62:	e002      	b.n	8007a6a <USB_HC_StartXfer+0x25e>
        break;
 8007a64:	bf00      	nop
 8007a66:	e000      	b.n	8007a6a <USB_HC_StartXfer+0x25e>
        break;
 8007a68:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	68d9      	ldr	r1, [r3, #12]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	785a      	ldrb	r2, [r3, #1]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2000      	movs	r0, #0
 8007a7a:	9000      	str	r0, [sp, #0]
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f7ff fb31 	bl	80070e4 <USB_WritePacket>
  }

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3728      	adds	r7, #40	; 0x28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	1ff80000 	.word	0x1ff80000

08007a90 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	b29b      	uxth	r3, r3
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b089      	sub	sp, #36	; 0x24
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	460b      	mov	r3, r1
 8007abc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	0c9b      	lsrs	r3, r3, #18
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	0fdb      	lsrs	r3, r3, #31
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b20      	cmp	r3, #32
 8007b00:	d104      	bne.n	8007b0c <USB_HC_Halt+0x5a>
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e0c8      	b.n	8007c9e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <USB_HC_Halt+0x66>
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d163      	bne.n	8007be0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	0151      	lsls	r1, r2, #5
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	440a      	add	r2, r1
 8007b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b36:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f040 80ab 	bne.w	8007c9c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d133      	bne.n	8007bba <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	0151      	lsls	r1, r2, #5
 8007b64:	69fa      	ldr	r2, [r7, #28]
 8007b66:	440a      	add	r2, r1
 8007b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b70:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	0151      	lsls	r1, r2, #5
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	440a      	add	r2, r1
 8007b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b90:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3301      	adds	r3, #1
 8007b96:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b9e:	d81d      	bhi.n	8007bdc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb6:	d0ec      	beq.n	8007b92 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bb8:	e070      	b.n	8007c9c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	0151      	lsls	r1, r2, #5
 8007bcc:	69fa      	ldr	r2, [r7, #28]
 8007bce:	440a      	add	r2, r1
 8007bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bd8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bda:	e05f      	b.n	8007c9c <USB_HC_Halt+0x1ea>
            break;
 8007bdc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bde:	e05d      	b.n	8007c9c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	0151      	lsls	r1, r2, #5
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	440a      	add	r2, r1
 8007bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bfe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d133      	bne.n	8007c78 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	0151      	lsls	r1, r2, #5
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	440a      	add	r2, r1
 8007c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	0151      	lsls	r1, r2, #5
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	440a      	add	r2, r1
 8007c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c4e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c5c:	d81d      	bhi.n	8007c9a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c74:	d0ec      	beq.n	8007c50 <USB_HC_Halt+0x19e>
 8007c76:	e011      	b.n	8007c9c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	0151      	lsls	r1, r2, #5
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	440a      	add	r2, r1
 8007c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	e000      	b.n	8007c9c <USB_HC_Halt+0x1ea>
          break;
 8007c9a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3724      	adds	r7, #36	; 0x24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
	...

08007cac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	04da      	lsls	r2, r3, #19
 8007cc8:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <USB_DoPing+0x74>)
 8007cca:	4013      	ands	r3, r2
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	0151      	lsls	r1, r2, #5
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	440a      	add	r2, r1
 8007cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cdc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cf4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cfc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	1ff80000 	.word	0x1ff80000

08007d24 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff f912 	bl	8006f62 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d3e:	2110      	movs	r1, #16
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff f96b 	bl	800701c <USB_FlushTxFifo>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff f997 	bl	8007084 <USB_FlushRxFifo>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007d60:	2300      	movs	r3, #0
 8007d62:	61bb      	str	r3, [r7, #24]
 8007d64:	e01f      	b.n	8007da6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d84:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d8c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	3301      	adds	r3, #1
 8007da4:	61bb      	str	r3, [r7, #24]
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	2b0f      	cmp	r3, #15
 8007daa:	d9dc      	bls.n	8007d66 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007dac:	2300      	movs	r3, #0
 8007dae:	61bb      	str	r3, [r7, #24]
 8007db0:	e034      	b.n	8007e1c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dc8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007dd8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de6:	461a      	mov	r2, r3
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3301      	adds	r3, #1
 8007df0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007df8:	d80c      	bhi.n	8007e14 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e10:	d0ec      	beq.n	8007dec <USB_StopHost+0xc8>
 8007e12:	e000      	b.n	8007e16 <USB_StopHost+0xf2>
        break;
 8007e14:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	61bb      	str	r3, [r7, #24]
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	2b0f      	cmp	r3, #15
 8007e20:	d9c7      	bls.n	8007db2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e28:	461a      	mov	r2, r3
 8007e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f04f 32ff 	mov.w	r2, #4294967295
 8007e36:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff f881 	bl	8006f40 <USB_EnableGlobalInt>

  return ret;
 8007e3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3720      	adds	r7, #32
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007e48:	b590      	push	{r4, r7, lr}
 8007e4a:	b089      	sub	sp, #36	; 0x24
 8007e4c:	af04      	add	r7, sp, #16
 8007e4e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007e50:	2301      	movs	r3, #1
 8007e52:	2202      	movs	r2, #2
 8007e54:	2102      	movs	r1, #2
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fc66 	bl	8008728 <USBH_FindInterface>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	2bff      	cmp	r3, #255	; 0xff
 8007e64:	d002      	beq.n	8007e6c <USBH_CDC_InterfaceInit+0x24>
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d901      	bls.n	8007e70 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e13d      	b.n	80080ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fc3b 	bl	80086f0 <USBH_SelectInterface>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007e84:	2302      	movs	r3, #2
 8007e86:	e131      	b.n	80080ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007e8e:	2050      	movs	r0, #80	; 0x50
 8007e90:	f002 fafa 	bl	800a488 <malloc>
 8007e94:	4603      	mov	r3, r0
 8007e96:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e11f      	b.n	80080ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007eac:	2250      	movs	r2, #80	; 0x50
 8007eae:	2100      	movs	r1, #0
 8007eb0:	68b8      	ldr	r0, [r7, #8]
 8007eb2:	f002 fb07 	bl	800a4c4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	211a      	movs	r1, #26
 8007ebc:	fb01 f303 	mul.w	r3, r1, r3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	b25b      	sxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	da15      	bge.n	8007efa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	211a      	movs	r1, #26
 8007ed4:	fb01 f303 	mul.w	r3, r1, r3
 8007ed8:	4413      	add	r3, r2
 8007eda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ede:	781a      	ldrb	r2, [r3, #0]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	211a      	movs	r1, #26
 8007eea:	fb01 f303 	mul.w	r3, r1, r3
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ef4:	881a      	ldrh	r2, [r3, #0]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	785b      	ldrb	r3, [r3, #1]
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f001 ff2c 	bl	8009d5e <USBH_AllocPipe>
 8007f06:	4603      	mov	r3, r0
 8007f08:	461a      	mov	r2, r3
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	7819      	ldrb	r1, [r3, #0]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	7858      	ldrb	r0, [r3, #1]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	8952      	ldrh	r2, [r2, #10]
 8007f26:	9202      	str	r2, [sp, #8]
 8007f28:	2203      	movs	r2, #3
 8007f2a:	9201      	str	r2, [sp, #4]
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	4623      	mov	r3, r4
 8007f30:	4602      	mov	r2, r0
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 fee4 	bl	8009d00 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f002 f9f3 	bl	800a32c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007f46:	2300      	movs	r3, #0
 8007f48:	2200      	movs	r2, #0
 8007f4a:	210a      	movs	r1, #10
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fbeb 	bl	8008728 <USBH_FindInterface>
 8007f52:	4603      	mov	r3, r0
 8007f54:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	2bff      	cmp	r3, #255	; 0xff
 8007f5a:	d002      	beq.n	8007f62 <USBH_CDC_InterfaceInit+0x11a>
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d901      	bls.n	8007f66 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f62:	2302      	movs	r3, #2
 8007f64:	e0c2      	b.n	80080ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	211a      	movs	r1, #26
 8007f6c:	fb01 f303 	mul.w	r3, r1, r3
 8007f70:	4413      	add	r3, r2
 8007f72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	b25b      	sxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	da16      	bge.n	8007fac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	211a      	movs	r1, #26
 8007f84:	fb01 f303 	mul.w	r3, r1, r3
 8007f88:	4413      	add	r3, r2
 8007f8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f8e:	781a      	ldrb	r2, [r3, #0]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	211a      	movs	r1, #26
 8007f9a:	fb01 f303 	mul.w	r3, r1, r3
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007fa4:	881a      	ldrh	r2, [r3, #0]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	835a      	strh	r2, [r3, #26]
 8007faa:	e015      	b.n	8007fd8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	211a      	movs	r1, #26
 8007fb2:	fb01 f303 	mul.w	r3, r1, r3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007fbc:	781a      	ldrb	r2, [r3, #0]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	211a      	movs	r1, #26
 8007fc8:	fb01 f303 	mul.w	r3, r1, r3
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007fd2:	881a      	ldrh	r2, [r3, #0]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	211a      	movs	r1, #26
 8007fde:	fb01 f303 	mul.w	r3, r1, r3
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	b25b      	sxtb	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	da16      	bge.n	800801e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	211a      	movs	r1, #26
 8007ff6:	fb01 f303 	mul.w	r3, r1, r3
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008000:	781a      	ldrb	r2, [r3, #0]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	211a      	movs	r1, #26
 800800c:	fb01 f303 	mul.w	r3, r1, r3
 8008010:	4413      	add	r3, r2
 8008012:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008016:	881a      	ldrh	r2, [r3, #0]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	835a      	strh	r2, [r3, #26]
 800801c:	e015      	b.n	800804a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	211a      	movs	r1, #26
 8008024:	fb01 f303 	mul.w	r3, r1, r3
 8008028:	4413      	add	r3, r2
 800802a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800802e:	781a      	ldrb	r2, [r3, #0]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	211a      	movs	r1, #26
 800803a:	fb01 f303 	mul.w	r3, r1, r3
 800803e:	4413      	add	r3, r2
 8008040:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008044:	881a      	ldrh	r2, [r3, #0]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	7b9b      	ldrb	r3, [r3, #14]
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 fe84 	bl	8009d5e <USBH_AllocPipe>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	7bdb      	ldrb	r3, [r3, #15]
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 fe7a 	bl	8009d5e <USBH_AllocPipe>
 800806a:	4603      	mov	r3, r0
 800806c:	461a      	mov	r2, r3
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	7b59      	ldrb	r1, [r3, #13]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	7b98      	ldrb	r0, [r3, #14]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	8b12      	ldrh	r2, [r2, #24]
 800808a:	9202      	str	r2, [sp, #8]
 800808c:	2202      	movs	r2, #2
 800808e:	9201      	str	r2, [sp, #4]
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	4623      	mov	r3, r4
 8008094:	4602      	mov	r2, r0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 fe32 	bl	8009d00 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	7b19      	ldrb	r1, [r3, #12]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	7bd8      	ldrb	r0, [r3, #15]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	8b52      	ldrh	r2, [r2, #26]
 80080b4:	9202      	str	r2, [sp, #8]
 80080b6:	2202      	movs	r2, #2
 80080b8:	9201      	str	r2, [sp, #4]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	4623      	mov	r3, r4
 80080be:	4602      	mov	r2, r0
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 fe1d 	bl	8009d00 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	7b5b      	ldrb	r3, [r3, #13]
 80080d2:	2200      	movs	r2, #0
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f002 f928 	bl	800a32c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	7b1b      	ldrb	r3, [r3, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f002 f921 	bl	800a32c <USBH_LL_SetToggle>

  return USBH_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd90      	pop	{r4, r7, pc}

080080f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00e      	beq.n	800812c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 fe12 	bl	8009d3e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 fe3d 	bl	8009da0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	7b1b      	ldrb	r3, [r3, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00e      	beq.n	8008152 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	7b1b      	ldrb	r3, [r3, #12]
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f001 fdff 	bl	8009d3e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	7b1b      	ldrb	r3, [r3, #12]
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 fe2a 	bl	8009da0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	7b5b      	ldrb	r3, [r3, #13]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00e      	beq.n	8008178 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	7b5b      	ldrb	r3, [r3, #13]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 fdec 	bl	8009d3e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	7b5b      	ldrb	r3, [r3, #13]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 fe17 	bl	8009da0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800817e:	69db      	ldr	r3, [r3, #28]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00b      	beq.n	800819c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	4618      	mov	r0, r3
 800818e:	f002 f983 	bl	800a498 <free>
    phost->pActiveClass->pData = 0U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008198:	2200      	movs	r2, #0
 800819a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	3340      	adds	r3, #64	; 0x40
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f8b1 	bl	8008326 <GetLineCoding>
 80081c4:	4603      	mov	r3, r0
 80081c6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80081c8:	7afb      	ldrb	r3, [r7, #11]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d105      	bne.n	80081da <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081d4:	2102      	movs	r1, #2
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80081da:	7afb      	ldrb	r3, [r7, #11]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008204:	2b04      	cmp	r3, #4
 8008206:	d877      	bhi.n	80082f8 <USBH_CDC_Process+0x114>
 8008208:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <USBH_CDC_Process+0x2c>)
 800820a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820e:	bf00      	nop
 8008210:	08008225 	.word	0x08008225
 8008214:	0800822b 	.word	0x0800822b
 8008218:	0800825b 	.word	0x0800825b
 800821c:	080082cf 	.word	0x080082cf
 8008220:	080082dd 	.word	0x080082dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	73fb      	strb	r3, [r7, #15]
      break;
 8008228:	e06d      	b.n	8008306 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f897 	bl	8008364 <SetLineCoding>
 8008236:	4603      	mov	r3, r0
 8008238:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d104      	bne.n	800824a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008248:	e058      	b.n	80082fc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d055      	beq.n	80082fc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2204      	movs	r2, #4
 8008254:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008258:	e050      	b.n	80082fc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	3340      	adds	r3, #64	; 0x40
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f860 	bl	8008326 <GetLineCoding>
 8008266:	4603      	mov	r3, r0
 8008268:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d126      	bne.n	80082be <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008282:	791b      	ldrb	r3, [r3, #4]
 8008284:	429a      	cmp	r2, r3
 8008286:	d13b      	bne.n	8008300 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008292:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008294:	429a      	cmp	r2, r3
 8008296:	d133      	bne.n	8008300 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d12b      	bne.n	8008300 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d124      	bne.n	8008300 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f958 	bl	800856c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80082bc:	e020      	b.n	8008300 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d01d      	beq.n	8008300 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2204      	movs	r2, #4
 80082c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80082cc:	e018      	b.n	8008300 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f867 	bl	80083a2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f8da 	bl	800848e <CDC_ProcessReception>
      break;
 80082da:	e014      	b.n	8008306 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80082dc:	2100      	movs	r1, #0
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 ffef 	bl	80092c2 <USBH_ClrFeature>
 80082e4:	4603      	mov	r3, r0
 80082e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80082f6:	e005      	b.n	8008304 <USBH_CDC_Process+0x120>

    default:
      break;
 80082f8:	bf00      	nop
 80082fa:	e004      	b.n	8008306 <USBH_CDC_Process+0x122>
      break;
 80082fc:	bf00      	nop
 80082fe:	e002      	b.n	8008306 <USBH_CDC_Process+0x122>
      break;
 8008300:	bf00      	nop
 8008302:	e000      	b.n	8008306 <USBH_CDC_Process+0x122>
      break;
 8008304:	bf00      	nop

  }

  return status;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	22a1      	movs	r2, #161	; 0xa1
 8008334:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2221      	movs	r2, #33	; 0x21
 800833a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2207      	movs	r2, #7
 800834c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2207      	movs	r2, #7
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 fa81 	bl	800985c <USBH_CtlReq>
 800835a:	4603      	mov	r3, r0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2221      	movs	r2, #33	; 0x21
 8008372:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2220      	movs	r2, #32
 8008378:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2207      	movs	r2, #7
 800838a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2207      	movs	r2, #7
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f001 fa62 	bl	800985c <USBH_CtlReq>
 8008398:	4603      	mov	r3, r0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b086      	sub	sp, #24
 80083a6:	af02      	add	r7, sp, #8
 80083a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083b4:	2300      	movs	r3, #0
 80083b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d002      	beq.n	80083c8 <CDC_ProcessTransmission+0x26>
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d023      	beq.n	800840e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80083c6:	e05e      	b.n	8008486 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	8b12      	ldrh	r2, [r2, #24]
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d90b      	bls.n	80083ec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	69d9      	ldr	r1, [r3, #28]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8b1a      	ldrh	r2, [r3, #24]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	7b5b      	ldrb	r3, [r3, #13]
 80083e0:	2001      	movs	r0, #1
 80083e2:	9000      	str	r0, [sp, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 fc48 	bl	8009c7a <USBH_BulkSendData>
 80083ea:	e00b      	b.n	8008404 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	7b5b      	ldrb	r3, [r3, #13]
 80083fa:	2001      	movs	r0, #1
 80083fc:	9000      	str	r0, [sp, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 fc3b 	bl	8009c7a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800840c:	e03b      	b.n	8008486 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	7b5b      	ldrb	r3, [r3, #13]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 ff5f 	bl	800a2d8 <USBH_LL_GetURBState>
 800841a:	4603      	mov	r3, r0
 800841c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800841e:	7afb      	ldrb	r3, [r7, #11]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d128      	bne.n	8008476 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	8b12      	ldrh	r2, [r2, #24]
 800842c:	4293      	cmp	r3, r2
 800842e:	d90e      	bls.n	800844e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	8b12      	ldrh	r2, [r2, #24]
 8008438:	1a9a      	subs	r2, r3, r2
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	8b12      	ldrh	r2, [r2, #24]
 8008446:	441a      	add	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	61da      	str	r2, [r3, #28]
 800844c:	e002      	b.n	8008454 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	2b00      	cmp	r3, #0
 800845a:	d004      	beq.n	8008466 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008464:	e00e      	b.n	8008484 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f868 	bl	8008544 <USBH_CDC_TransmitCallback>
      break;
 8008474:	e006      	b.n	8008484 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008476:	7afb      	ldrb	r3, [r7, #11]
 8008478:	2b02      	cmp	r3, #2
 800847a:	d103      	bne.n	8008484 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008484:	bf00      	nop
  }
}
 8008486:	bf00      	nop
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b086      	sub	sp, #24
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084a0:	2300      	movs	r3, #0
 80084a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d002      	beq.n	80084b4 <CDC_ProcessReception+0x26>
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d00e      	beq.n	80084d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80084b2:	e043      	b.n	800853c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	6a19      	ldr	r1, [r3, #32]
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	8b5a      	ldrh	r2, [r3, #26]
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	7b1b      	ldrb	r3, [r3, #12]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 fbff 	bl	8009cc4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2204      	movs	r2, #4
 80084ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80084ce:	e035      	b.n	800853c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	7b1b      	ldrb	r3, [r3, #12]
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f001 fefe 	bl	800a2d8 <USBH_LL_GetURBState>
 80084dc:	4603      	mov	r3, r0
 80084de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80084e0:	7cfb      	ldrb	r3, [r7, #19]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d129      	bne.n	800853a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	7b1b      	ldrb	r3, [r3, #12]
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f001 fe61 	bl	800a1b4 <USBH_LL_GetLastXferSize>
 80084f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d016      	beq.n	800852c <CDC_ProcessReception+0x9e>
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	8b5b      	ldrh	r3, [r3, #26]
 8008502:	461a      	mov	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4293      	cmp	r3, r2
 8008508:	d910      	bls.n	800852c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	1ad2      	subs	r2, r2, r3
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	6a1a      	ldr	r2, [r3, #32]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	441a      	add	r2, r3
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2203      	movs	r2, #3
 8008526:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800852a:	e006      	b.n	800853a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f80f 	bl	8008558 <USBH_CDC_ReceiveCallback>
      break;
 800853a:	bf00      	nop
  }
}
 800853c:	bf00      	nop
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	4613      	mov	r3, r2
 800858c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008594:	2302      	movs	r3, #2
 8008596:	e029      	b.n	80085ec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	79fa      	ldrb	r2, [r7, #7]
 800859c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 f81f 	bl	80085f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d003      	beq.n	80085e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f001 fd31 	bl	800a04c <USBH_LL_Init>

  return USBH_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	e009      	b.n	800861a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	33e0      	adds	r3, #224	; 0xe0
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	2200      	movs	r2, #0
 8008612:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3301      	adds	r3, #1
 8008618:	60fb      	str	r3, [r7, #12]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2b0f      	cmp	r3, #15
 800861e:	d9f2      	bls.n	8008606 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008620:	2300      	movs	r3, #0
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	e009      	b.n	800863a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4413      	add	r3, r2
 800862c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008630:	2200      	movs	r2, #0
 8008632:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3301      	adds	r3, #1
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008640:	d3f1      	bcc.n	8008626 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2240      	movs	r2, #64	; 0x40
 8008666:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d016      	beq.n	80086de <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10e      	bne.n	80086d8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80086c0:	1c59      	adds	r1, r3, #1
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	33de      	adds	r3, #222	; 0xde
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]
 80086d6:	e004      	b.n	80086e2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80086d8:	2302      	movs	r3, #2
 80086da:	73fb      	strb	r3, [r7, #15]
 80086dc:	e001      	b.n	80086e2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80086de:	2302      	movs	r3, #2
 80086e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008706:	78fa      	ldrb	r2, [r7, #3]
 8008708:	429a      	cmp	r2, r3
 800870a:	d204      	bcs.n	8008716 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	78fa      	ldrb	r2, [r7, #3]
 8008710:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008714:	e001      	b.n	800871a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008716:	2302      	movs	r3, #2
 8008718:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008728:	b480      	push	{r7}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	4608      	mov	r0, r1
 8008732:	4611      	mov	r1, r2
 8008734:	461a      	mov	r2, r3
 8008736:	4603      	mov	r3, r0
 8008738:	70fb      	strb	r3, [r7, #3]
 800873a:	460b      	mov	r3, r1
 800873c:	70bb      	strb	r3, [r7, #2]
 800873e:	4613      	mov	r3, r2
 8008740:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008746:	2300      	movs	r3, #0
 8008748:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008750:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008752:	e025      	b.n	80087a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	221a      	movs	r2, #26
 8008758:	fb02 f303 	mul.w	r3, r2, r3
 800875c:	3308      	adds	r3, #8
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	4413      	add	r3, r2
 8008762:	3302      	adds	r3, #2
 8008764:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	795b      	ldrb	r3, [r3, #5]
 800876a:	78fa      	ldrb	r2, [r7, #3]
 800876c:	429a      	cmp	r2, r3
 800876e:	d002      	beq.n	8008776 <USBH_FindInterface+0x4e>
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	2bff      	cmp	r3, #255	; 0xff
 8008774:	d111      	bne.n	800879a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800877a:	78ba      	ldrb	r2, [r7, #2]
 800877c:	429a      	cmp	r2, r3
 800877e:	d002      	beq.n	8008786 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008780:	78bb      	ldrb	r3, [r7, #2]
 8008782:	2bff      	cmp	r3, #255	; 0xff
 8008784:	d109      	bne.n	800879a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800878a:	787a      	ldrb	r2, [r7, #1]
 800878c:	429a      	cmp	r2, r3
 800878e:	d002      	beq.n	8008796 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008790:	787b      	ldrb	r3, [r7, #1]
 8008792:	2bff      	cmp	r3, #255	; 0xff
 8008794:	d101      	bne.n	800879a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	e006      	b.n	80087a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	3301      	adds	r3, #1
 800879e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d9d6      	bls.n	8008754 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80087a6:	23ff      	movs	r3, #255	; 0xff
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	371c      	adds	r7, #28
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 fc81 	bl	800a0c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80087c2:	2101      	movs	r1, #1
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 fd9a 	bl	800a2fe <USBH_LL_DriverVBUS>

  return USBH_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af04      	add	r7, sp, #16
 80087da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80087dc:	2302      	movs	r3, #2
 80087de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d102      	bne.n	80087f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2203      	movs	r2, #3
 80087f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b0b      	cmp	r3, #11
 80087fe:	f200 81be 	bhi.w	8008b7e <USBH_Process+0x3aa>
 8008802:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <USBH_Process+0x34>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	08008839 	.word	0x08008839
 800880c:	0800886b 	.word	0x0800886b
 8008810:	080088d3 	.word	0x080088d3
 8008814:	08008b19 	.word	0x08008b19
 8008818:	08008b7f 	.word	0x08008b7f
 800881c:	08008977 	.word	0x08008977
 8008820:	08008abf 	.word	0x08008abf
 8008824:	080089ad 	.word	0x080089ad
 8008828:	080089cd 	.word	0x080089cd
 800882c:	080089ed 	.word	0x080089ed
 8008830:	08008a31 	.word	0x08008a31
 8008834:	08008b01 	.word	0x08008b01
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 819e 	beq.w	8008b82 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800884c:	20c8      	movs	r0, #200	; 0xc8
 800884e:	f001 fd9d 	bl	800a38c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f001 fc93 	bl	800a17e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008868:	e18b      	b.n	8008b82 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008870:	2b01      	cmp	r3, #1
 8008872:	d107      	bne.n	8008884 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2202      	movs	r2, #2
 8008880:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008882:	e18d      	b.n	8008ba0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800888a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800888e:	d914      	bls.n	80088ba <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008896:	3301      	adds	r3, #1
 8008898:	b2da      	uxtb	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d903      	bls.n	80088b2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	220d      	movs	r2, #13
 80088ae:	701a      	strb	r2, [r3, #0]
      break;
 80088b0:	e176      	b.n	8008ba0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	701a      	strb	r2, [r3, #0]
      break;
 80088b8:	e172      	b.n	8008ba0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80088c0:	f103 020a 	add.w	r2, r3, #10
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80088ca:	200a      	movs	r0, #10
 80088cc:	f001 fd5e 	bl	800a38c <USBH_Delay>
      break;
 80088d0:	e166      	b.n	8008ba0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088e2:	2104      	movs	r1, #4
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80088e8:	2064      	movs	r0, #100	; 0x64
 80088ea:	f001 fd4f 	bl	800a38c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 fc1e 	bl	800a130 <USBH_LL_GetSpeed>
 80088f4:	4603      	mov	r3, r0
 80088f6:	461a      	mov	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2205      	movs	r2, #5
 8008902:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008904:	2100      	movs	r1, #0
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fa29 	bl	8009d5e <USBH_AllocPipe>
 800890c:	4603      	mov	r3, r0
 800890e:	461a      	mov	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008914:	2180      	movs	r1, #128	; 0x80
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 fa21 	bl	8009d5e <USBH_AllocPipe>
 800891c:	4603      	mov	r3, r0
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	7919      	ldrb	r1, [r3, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008938:	b292      	uxth	r2, r2
 800893a:	9202      	str	r2, [sp, #8]
 800893c:	2200      	movs	r2, #0
 800893e:	9201      	str	r2, [sp, #4]
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	4603      	mov	r3, r0
 8008944:	2280      	movs	r2, #128	; 0x80
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f001 f9da 	bl	8009d00 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7959      	ldrb	r1, [r3, #5]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008960:	b292      	uxth	r2, r2
 8008962:	9202      	str	r2, [sp, #8]
 8008964:	2200      	movs	r2, #0
 8008966:	9201      	str	r2, [sp, #4]
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	4603      	mov	r3, r0
 800896c:	2200      	movs	r2, #0
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 f9c6 	bl	8009d00 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008974:	e114      	b.n	8008ba0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f918 	bl	8008bac <USBH_HandleEnum>
 800897c:	4603      	mov	r3, r0
 800897e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 80fe 	bne.w	8008b86 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008998:	2b01      	cmp	r3, #1
 800899a:	d103      	bne.n	80089a4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2208      	movs	r2, #8
 80089a0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80089a2:	e0f0      	b.n	8008b86 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2207      	movs	r2, #7
 80089a8:	701a      	strb	r2, [r3, #0]
      break;
 80089aa:	e0ec      	b.n	8008b86 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 80e9 	beq.w	8008b8a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089be:	2101      	movs	r1, #1
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2208      	movs	r2, #8
 80089c8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80089ca:	e0de      	b.n	8008b8a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fc2c 	bl	8009234 <USBH_SetCfg>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f040 80d5 	bne.w	8008b8e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2209      	movs	r2, #9
 80089e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089ea:	e0d0      	b.n	8008b8e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80089f2:	f003 0320 	and.w	r3, r3, #32
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d016      	beq.n	8008a28 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80089fa:	2101      	movs	r1, #1
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fc3c 	bl	800927a <USBH_SetFeature>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d103      	bne.n	8008a16 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	220a      	movs	r2, #10
 8008a12:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a14:	e0bd      	b.n	8008b92 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	f040 80b9 	bne.w	8008b92 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	220a      	movs	r2, #10
 8008a24:	701a      	strb	r2, [r3, #0]
      break;
 8008a26:	e0b4      	b.n	8008b92 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	220a      	movs	r2, #10
 8008a2c:	701a      	strb	r2, [r3, #0]
      break;
 8008a2e:	e0b0      	b.n	8008b92 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80ad 	beq.w	8008b96 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a44:	2300      	movs	r3, #0
 8008a46:	73fb      	strb	r3, [r7, #15]
 8008a48:	e016      	b.n	8008a78 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008a4a:	7bfa      	ldrb	r2, [r7, #15]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	32de      	adds	r2, #222	; 0xde
 8008a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a54:	791a      	ldrb	r2, [r3, #4]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d108      	bne.n	8008a72 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008a60:	7bfa      	ldrb	r2, [r7, #15]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	32de      	adds	r2, #222	; 0xde
 8008a66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008a70:	e005      	b.n	8008a7e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	3301      	adds	r3, #1
 8008a76:	73fb      	strb	r3, [r7, #15]
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0e5      	beq.n	8008a4a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d016      	beq.n	8008ab6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d109      	bne.n	8008aae <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2206      	movs	r2, #6
 8008a9e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008aa6:	2103      	movs	r1, #3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008aac:	e073      	b.n	8008b96 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	220d      	movs	r2, #13
 8008ab2:	701a      	strb	r2, [r3, #0]
      break;
 8008ab4:	e06f      	b.n	8008b96 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	220d      	movs	r2, #13
 8008aba:	701a      	strb	r2, [r3, #0]
      break;
 8008abc:	e06b      	b.n	8008b96 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d017      	beq.n	8008af8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	4798      	blx	r3
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d103      	bne.n	8008ae8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	220b      	movs	r2, #11
 8008ae4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ae6:	e058      	b.n	8008b9a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d154      	bne.n	8008b9a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	220d      	movs	r2, #13
 8008af4:	701a      	strb	r2, [r3, #0]
      break;
 8008af6:	e050      	b.n	8008b9a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	220d      	movs	r2, #13
 8008afc:	701a      	strb	r2, [r3, #0]
      break;
 8008afe:	e04c      	b.n	8008b9a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d049      	beq.n	8008b9e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	4798      	blx	r3
      }
      break;
 8008b16:	e042      	b.n	8008b9e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7ff fd67 	bl	80085f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d009      	beq.n	8008b44 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d005      	beq.n	8008b5a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b54:	2105      	movs	r1, #5
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d107      	bne.n	8008b76 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7ff fe20 	bl	80087b4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b74:	e014      	b.n	8008ba0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 faa4 	bl	800a0c4 <USBH_LL_Start>
      break;
 8008b7c:	e010      	b.n	8008ba0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008b7e:	bf00      	nop
 8008b80:	e00e      	b.n	8008ba0 <USBH_Process+0x3cc>
      break;
 8008b82:	bf00      	nop
 8008b84:	e00c      	b.n	8008ba0 <USBH_Process+0x3cc>
      break;
 8008b86:	bf00      	nop
 8008b88:	e00a      	b.n	8008ba0 <USBH_Process+0x3cc>
    break;
 8008b8a:	bf00      	nop
 8008b8c:	e008      	b.n	8008ba0 <USBH_Process+0x3cc>
      break;
 8008b8e:	bf00      	nop
 8008b90:	e006      	b.n	8008ba0 <USBH_Process+0x3cc>
      break;
 8008b92:	bf00      	nop
 8008b94:	e004      	b.n	8008ba0 <USBH_Process+0x3cc>
      break;
 8008b96:	bf00      	nop
 8008b98:	e002      	b.n	8008ba0 <USBH_Process+0x3cc>
      break;
 8008b9a:	bf00      	nop
 8008b9c:	e000      	b.n	8008ba0 <USBH_Process+0x3cc>
      break;
 8008b9e:	bf00      	nop
  }
  return USBH_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop

08008bac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af04      	add	r7, sp, #16
 8008bb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	785b      	ldrb	r3, [r3, #1]
 8008bc0:	2b07      	cmp	r3, #7
 8008bc2:	f200 81c1 	bhi.w	8008f48 <USBH_HandleEnum+0x39c>
 8008bc6:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <USBH_HandleEnum+0x20>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008bed 	.word	0x08008bed
 8008bd0:	08008cab 	.word	0x08008cab
 8008bd4:	08008d15 	.word	0x08008d15
 8008bd8:	08008da3 	.word	0x08008da3
 8008bdc:	08008e0d 	.word	0x08008e0d
 8008be0:	08008e7d 	.word	0x08008e7d
 8008be4:	08008ec3 	.word	0x08008ec3
 8008be8:	08008f09 	.word	0x08008f09
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008bec:	2108      	movs	r1, #8
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fa50 	bl	8009094 <USBH_Get_DevDesc>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008bf8:	7bbb      	ldrb	r3, [r7, #14]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d130      	bne.n	8008c60 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	7919      	ldrb	r1, [r3, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c22:	b292      	uxth	r2, r2
 8008c24:	9202      	str	r2, [sp, #8]
 8008c26:	2200      	movs	r2, #0
 8008c28:	9201      	str	r2, [sp, #4]
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2280      	movs	r2, #128	; 0x80
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f001 f865 	bl	8009d00 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	7959      	ldrb	r1, [r3, #5]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c4a:	b292      	uxth	r2, r2
 8008c4c:	9202      	str	r2, [sp, #8]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	9201      	str	r2, [sp, #4]
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	4603      	mov	r3, r0
 8008c56:	2200      	movs	r2, #0
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 f851 	bl	8009d00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c5e:	e175      	b.n	8008f4c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	f040 8172 	bne.w	8008f4c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c6e:	3301      	adds	r3, #1
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d903      	bls.n	8008c8a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	220d      	movs	r2, #13
 8008c86:	701a      	strb	r2, [r3, #0]
      break;
 8008c88:	e160      	b.n	8008f4c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	795b      	ldrb	r3, [r3, #5]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 f885 	bl	8009da0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	791b      	ldrb	r3, [r3, #4]
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f001 f87f 	bl	8009da0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	701a      	strb	r2, [r3, #0]
      break;
 8008ca8:	e150      	b.n	8008f4c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008caa:	2112      	movs	r1, #18
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f9f1 	bl	8009094 <USBH_Get_DevDesc>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d103      	bne.n	8008cc4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008cc2:	e145      	b.n	8008f50 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	f040 8142 	bne.w	8008f50 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d903      	bls.n	8008cee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	220d      	movs	r2, #13
 8008cea:	701a      	strb	r2, [r3, #0]
      break;
 8008cec:	e130      	b.n	8008f50 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	795b      	ldrb	r3, [r3, #5]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 f853 	bl	8009da0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	791b      	ldrb	r3, [r3, #4]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 f84d 	bl	8009da0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	701a      	strb	r2, [r3, #0]
      break;
 8008d12:	e11d      	b.n	8008f50 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008d14:	2101      	movs	r1, #1
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fa68 	bl	80091ec <USBH_SetAddress>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d132      	bne.n	8008d8c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008d26:	2002      	movs	r0, #2
 8008d28:	f001 fb30 	bl	800a38c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2203      	movs	r2, #3
 8008d38:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	7919      	ldrb	r1, [r3, #4]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d4e:	b292      	uxth	r2, r2
 8008d50:	9202      	str	r2, [sp, #8]
 8008d52:	2200      	movs	r2, #0
 8008d54:	9201      	str	r2, [sp, #4]
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2280      	movs	r2, #128	; 0x80
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 ffcf 	bl	8009d00 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	7959      	ldrb	r1, [r3, #5]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d76:	b292      	uxth	r2, r2
 8008d78:	9202      	str	r2, [sp, #8]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	9201      	str	r2, [sp, #4]
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	4603      	mov	r3, r0
 8008d82:	2200      	movs	r2, #0
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 ffbb 	bl	8009d00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008d8a:	e0e3      	b.n	8008f54 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	f040 80e0 	bne.w	8008f54 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	220d      	movs	r2, #13
 8008d98:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	705a      	strb	r2, [r3, #1]
      break;
 8008da0:	e0d8      	b.n	8008f54 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008da2:	2109      	movs	r1, #9
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f99d 	bl	80090e4 <USBH_Get_CfgDesc>
 8008daa:	4603      	mov	r3, r0
 8008dac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d103      	bne.n	8008dbc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2204      	movs	r2, #4
 8008db8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008dba:	e0cd      	b.n	8008f58 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	f040 80ca 	bne.w	8008f58 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008dca:	3301      	adds	r3, #1
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d903      	bls.n	8008de6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	220d      	movs	r2, #13
 8008de2:	701a      	strb	r2, [r3, #0]
      break;
 8008de4:	e0b8      	b.n	8008f58 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	795b      	ldrb	r3, [r3, #5]
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 ffd7 	bl	8009da0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	791b      	ldrb	r3, [r3, #4]
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 ffd1 	bl	8009da0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
      break;
 8008e0a:	e0a5      	b.n	8008f58 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f965 	bl	80090e4 <USBH_Get_CfgDesc>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d103      	bne.n	8008e2c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2205      	movs	r2, #5
 8008e28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e2a:	e097      	b.n	8008f5c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	f040 8094 	bne.w	8008f5c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d903      	bls.n	8008e56 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	220d      	movs	r2, #13
 8008e52:	701a      	strb	r2, [r3, #0]
      break;
 8008e54:	e082      	b.n	8008f5c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	795b      	ldrb	r3, [r3, #5]
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 ff9f 	bl	8009da0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	791b      	ldrb	r3, [r3, #4]
 8008e66:	4619      	mov	r1, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 ff99 	bl	8009da0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	701a      	strb	r2, [r3, #0]
      break;
 8008e7a:	e06f      	b.n	8008f5c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d019      	beq.n	8008eba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008e92:	23ff      	movs	r3, #255	; 0xff
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f949 	bl	800912c <USBH_Get_StringDesc>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d103      	bne.n	8008eac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2206      	movs	r2, #6
 8008ea8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008eaa:	e059      	b.n	8008f60 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d156      	bne.n	8008f60 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2206      	movs	r2, #6
 8008eb6:	705a      	strb	r2, [r3, #1]
      break;
 8008eb8:	e052      	b.n	8008f60 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2206      	movs	r2, #6
 8008ebe:	705a      	strb	r2, [r3, #1]
      break;
 8008ec0:	e04e      	b.n	8008f60 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d019      	beq.n	8008f00 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ed8:	23ff      	movs	r3, #255	; 0xff
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f926 	bl	800912c <USBH_Get_StringDesc>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d103      	bne.n	8008ef2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2207      	movs	r2, #7
 8008eee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ef0:	e038      	b.n	8008f64 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d135      	bne.n	8008f64 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2207      	movs	r2, #7
 8008efc:	705a      	strb	r2, [r3, #1]
      break;
 8008efe:	e031      	b.n	8008f64 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2207      	movs	r2, #7
 8008f04:	705a      	strb	r2, [r3, #1]
      break;
 8008f06:	e02d      	b.n	8008f64 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d017      	beq.n	8008f42 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f1e:	23ff      	movs	r3, #255	; 0xff
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f903 	bl	800912c <USBH_Get_StringDesc>
 8008f26:	4603      	mov	r3, r0
 8008f28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d102      	bne.n	8008f36 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008f34:	e018      	b.n	8008f68 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d115      	bne.n	8008f68 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f40:	e012      	b.n	8008f68 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]
      break;
 8008f46:	e00f      	b.n	8008f68 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008f48:	bf00      	nop
 8008f4a:	e00e      	b.n	8008f6a <USBH_HandleEnum+0x3be>
      break;
 8008f4c:	bf00      	nop
 8008f4e:	e00c      	b.n	8008f6a <USBH_HandleEnum+0x3be>
      break;
 8008f50:	bf00      	nop
 8008f52:	e00a      	b.n	8008f6a <USBH_HandleEnum+0x3be>
      break;
 8008f54:	bf00      	nop
 8008f56:	e008      	b.n	8008f6a <USBH_HandleEnum+0x3be>
      break;
 8008f58:	bf00      	nop
 8008f5a:	e006      	b.n	8008f6a <USBH_HandleEnum+0x3be>
      break;
 8008f5c:	bf00      	nop
 8008f5e:	e004      	b.n	8008f6a <USBH_HandleEnum+0x3be>
      break;
 8008f60:	bf00      	nop
 8008f62:	e002      	b.n	8008f6a <USBH_HandleEnum+0x3be>
      break;
 8008f64:	bf00      	nop
 8008f66:	e000      	b.n	8008f6a <USBH_HandleEnum+0x3be>
      break;
 8008f68:	bf00      	nop
  }
  return Status;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008f86:	bf00      	nop
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b082      	sub	sp, #8
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f804 	bl	8008fb6 <USBH_HandleSof>
}
 8008fae:	bf00      	nop
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b0b      	cmp	r3, #11
 8008fc6:	d10a      	bne.n	8008fde <USBH_HandleSof+0x28>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	4798      	blx	r3
  }
}
 8008fde:	bf00      	nop
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b083      	sub	sp, #12
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008ff6:	bf00      	nop
}
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009012:	bf00      	nop
}
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f001 f844 	bl	800a0fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	791b      	ldrb	r3, [r3, #4]
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fe91 	bl	8009da0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	795b      	ldrb	r3, [r3, #5]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fe8b 	bl	8009da0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af02      	add	r7, sp, #8
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80090a6:	78fb      	ldrb	r3, [r7, #3]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	4613      	mov	r3, r2
 80090ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090b2:	2100      	movs	r1, #0
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f864 	bl	8009182 <USBH_GetDescriptor>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10a      	bne.n	80090da <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80090d0:	78fa      	ldrb	r2, [r7, #3]
 80090d2:	b292      	uxth	r2, r2
 80090d4:	4619      	mov	r1, r3
 80090d6:	f000 f918 	bl	800930a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80090da:	7bfb      	ldrb	r3, [r7, #15]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	331c      	adds	r3, #28
 80090f4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80090f6:	887b      	ldrh	r3, [r7, #2]
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009100:	2100      	movs	r1, #0
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f83d 	bl	8009182 <USBH_GetDescriptor>
 8009108:	4603      	mov	r3, r0
 800910a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d107      	bne.n	8009122 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009112:	887b      	ldrh	r3, [r7, #2]
 8009114:	461a      	mov	r2, r3
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f987 	bl	800942c <USBH_ParseCfgDesc>
 800911e:	4603      	mov	r3, r0
 8009120:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009122:	7bfb      	ldrb	r3, [r7, #15]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af02      	add	r7, sp, #8
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	607a      	str	r2, [r7, #4]
 8009136:	461a      	mov	r2, r3
 8009138:	460b      	mov	r3, r1
 800913a:	72fb      	strb	r3, [r7, #11]
 800913c:	4613      	mov	r3, r2
 800913e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009140:	7afb      	ldrb	r3, [r7, #11]
 8009142:	b29b      	uxth	r3, r3
 8009144:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009148:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009150:	893b      	ldrh	r3, [r7, #8]
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	460b      	mov	r3, r1
 8009156:	2100      	movs	r1, #0
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 f812 	bl	8009182 <USBH_GetDescriptor>
 800915e:	4603      	mov	r3, r0
 8009160:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009162:	7dfb      	ldrb	r3, [r7, #23]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d107      	bne.n	8009178 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800916e:	893a      	ldrh	r2, [r7, #8]
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fb24 	bl	80097c0 <USBH_ParseStringDesc>
  }

  return status;
 8009178:	7dfb      	ldrb	r3, [r7, #23]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	60f8      	str	r0, [r7, #12]
 800918a:	607b      	str	r3, [r7, #4]
 800918c:	460b      	mov	r3, r1
 800918e:	72fb      	strb	r3, [r7, #11]
 8009190:	4613      	mov	r3, r2
 8009192:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	789b      	ldrb	r3, [r3, #2]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d11c      	bne.n	80091d6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800919c:	7afb      	ldrb	r3, [r7, #11]
 800919e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2206      	movs	r2, #6
 80091ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	893a      	ldrh	r2, [r7, #8]
 80091b2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80091b4:	893b      	ldrh	r3, [r7, #8]
 80091b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80091ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091be:	d104      	bne.n	80091ca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f240 4209 	movw	r2, #1033	; 0x409
 80091c6:	829a      	strh	r2, [r3, #20]
 80091c8:	e002      	b.n	80091d0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	8b3a      	ldrh	r2, [r7, #24]
 80091d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80091d6:	8b3b      	ldrh	r3, [r7, #24]
 80091d8:	461a      	mov	r2, r3
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 fb3d 	bl	800985c <USBH_CtlReq>
 80091e2:	4603      	mov	r3, r0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	789b      	ldrb	r3, [r3, #2]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d10f      	bne.n	8009220 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2205      	movs	r2, #5
 800920a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	b29a      	uxth	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009220:	2200      	movs	r2, #0
 8009222:	2100      	movs	r1, #0
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fb19 	bl	800985c <USBH_CtlReq>
 800922a:	4603      	mov	r3, r0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	789b      	ldrb	r3, [r3, #2]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d10e      	bne.n	8009266 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2209      	movs	r2, #9
 8009252:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	887a      	ldrh	r2, [r7, #2]
 8009258:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009266:	2200      	movs	r2, #0
 8009268:	2100      	movs	r1, #0
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 faf6 	bl	800985c <USBH_CtlReq>
 8009270:	4603      	mov	r3, r0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	789b      	ldrb	r3, [r3, #2]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d10f      	bne.n	80092ae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2203      	movs	r2, #3
 8009298:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800929a:	78fb      	ldrb	r3, [r7, #3]
 800929c:	b29a      	uxth	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092ae:	2200      	movs	r2, #0
 80092b0:	2100      	movs	r1, #0
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fad2 	bl	800985c <USBH_CtlReq>
 80092b8:	4603      	mov	r3, r0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	460b      	mov	r3, r1
 80092cc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	789b      	ldrb	r3, [r3, #2]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d10f      	bne.n	80092f6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2202      	movs	r2, #2
 80092da:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80092e8:	78fb      	ldrb	r3, [r7, #3]
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80092f6:	2200      	movs	r2, #0
 80092f8:	2100      	movs	r1, #0
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 faae 	bl	800985c <USBH_CtlReq>
 8009300:	4603      	mov	r3, r0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800930a:	b480      	push	{r7}
 800930c:	b085      	sub	sp, #20
 800930e:	af00      	add	r7, sp, #0
 8009310:	60f8      	str	r0, [r7, #12]
 8009312:	60b9      	str	r1, [r7, #8]
 8009314:	4613      	mov	r3, r2
 8009316:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	781a      	ldrb	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	785a      	ldrb	r2, [r3, #1]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	3302      	adds	r3, #2
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	b29a      	uxth	r2, r3
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	3303      	adds	r3, #3
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	b29b      	uxth	r3, r3
 8009338:	021b      	lsls	r3, r3, #8
 800933a:	b29b      	uxth	r3, r3
 800933c:	4313      	orrs	r3, r2
 800933e:	b29a      	uxth	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	791a      	ldrb	r2, [r3, #4]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	795a      	ldrb	r2, [r3, #5]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	799a      	ldrb	r2, [r3, #6]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	79da      	ldrb	r2, [r3, #7]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	79db      	ldrb	r3, [r3, #7]
 8009368:	2b20      	cmp	r3, #32
 800936a:	dc11      	bgt.n	8009390 <USBH_ParseDevDesc+0x86>
 800936c:	2b08      	cmp	r3, #8
 800936e:	db16      	blt.n	800939e <USBH_ParseDevDesc+0x94>
 8009370:	3b08      	subs	r3, #8
 8009372:	2201      	movs	r2, #1
 8009374:	fa02 f303 	lsl.w	r3, r2, r3
 8009378:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800937c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009380:	2b00      	cmp	r3, #0
 8009382:	bf14      	ite	ne
 8009384:	2301      	movne	r3, #1
 8009386:	2300      	moveq	r3, #0
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d102      	bne.n	8009394 <USBH_ParseDevDesc+0x8a>
 800938e:	e006      	b.n	800939e <USBH_ParseDevDesc+0x94>
 8009390:	2b40      	cmp	r3, #64	; 0x40
 8009392:	d104      	bne.n	800939e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	79da      	ldrb	r2, [r3, #7]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	71da      	strb	r2, [r3, #7]
      break;
 800939c:	e003      	b.n	80093a6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2240      	movs	r2, #64	; 0x40
 80093a2:	71da      	strb	r2, [r3, #7]
      break;
 80093a4:	bf00      	nop
  }

  if (length > 8U)
 80093a6:	88fb      	ldrh	r3, [r7, #6]
 80093a8:	2b08      	cmp	r3, #8
 80093aa:	d939      	bls.n	8009420 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	3308      	adds	r3, #8
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	3309      	adds	r3, #9
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	021b      	lsls	r3, r3, #8
 80093be:	b29b      	uxth	r3, r3
 80093c0:	4313      	orrs	r3, r2
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	330a      	adds	r3, #10
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	330b      	adds	r3, #11
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	021b      	lsls	r3, r3, #8
 80093da:	b29b      	uxth	r3, r3
 80093dc:	4313      	orrs	r3, r2
 80093de:	b29a      	uxth	r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	330c      	adds	r3, #12
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	330d      	adds	r3, #13
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	021b      	lsls	r3, r3, #8
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	4313      	orrs	r3, r2
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	7b9a      	ldrb	r2, [r3, #14]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	7bda      	ldrb	r2, [r3, #15]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	7c1a      	ldrb	r2, [r3, #16]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	7c5a      	ldrb	r2, [r3, #17]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	745a      	strb	r2, [r3, #17]
  }
}
 8009420:	bf00      	nop
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b08c      	sub	sp, #48	; 0x30
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009440:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	781a      	ldrb	r2, [r3, #0]
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	785a      	ldrb	r2, [r3, #1]
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	3302      	adds	r3, #2
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	b29a      	uxth	r2, r3
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	3303      	adds	r3, #3
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	b29b      	uxth	r3, r3
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	b29b      	uxth	r3, r3
 8009480:	4313      	orrs	r3, r2
 8009482:	b29b      	uxth	r3, r3
 8009484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009488:	bf28      	it	cs
 800948a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800948e:	b29a      	uxth	r2, r3
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	791a      	ldrb	r2, [r3, #4]
 8009498:	6a3b      	ldr	r3, [r7, #32]
 800949a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	795a      	ldrb	r2, [r3, #5]
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	799a      	ldrb	r2, [r3, #6]
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	79da      	ldrb	r2, [r3, #7]
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	7a1a      	ldrb	r2, [r3, #8]
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b09      	cmp	r3, #9
 80094c2:	d002      	beq.n	80094ca <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	2209      	movs	r2, #9
 80094c8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	2b09      	cmp	r3, #9
 80094ce:	f240 809d 	bls.w	800960c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80094d2:	2309      	movs	r3, #9
 80094d4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80094da:	e081      	b.n	80095e0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80094dc:	f107 0316 	add.w	r3, r7, #22
 80094e0:	4619      	mov	r1, r3
 80094e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094e4:	f000 f99f 	bl	8009826 <USBH_GetNextDesc>
 80094e8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	785b      	ldrb	r3, [r3, #1]
 80094ee:	2b04      	cmp	r3, #4
 80094f0:	d176      	bne.n	80095e0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80094f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b09      	cmp	r3, #9
 80094f8:	d002      	beq.n	8009500 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80094fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fc:	2209      	movs	r2, #9
 80094fe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009504:	221a      	movs	r2, #26
 8009506:	fb02 f303 	mul.w	r3, r2, r3
 800950a:	3308      	adds	r3, #8
 800950c:	6a3a      	ldr	r2, [r7, #32]
 800950e:	4413      	add	r3, r2
 8009510:	3302      	adds	r3, #2
 8009512:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009516:	69f8      	ldr	r0, [r7, #28]
 8009518:	f000 f87e 	bl	8009618 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800951c:	2300      	movs	r3, #0
 800951e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009522:	2300      	movs	r3, #0
 8009524:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009526:	e043      	b.n	80095b0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009528:	f107 0316 	add.w	r3, r7, #22
 800952c:	4619      	mov	r1, r3
 800952e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009530:	f000 f979 	bl	8009826 <USBH_GetNextDesc>
 8009534:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009538:	785b      	ldrb	r3, [r3, #1]
 800953a:	2b05      	cmp	r3, #5
 800953c:	d138      	bne.n	80095b0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	795b      	ldrb	r3, [r3, #5]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d10f      	bne.n	8009566 <USBH_ParseCfgDesc+0x13a>
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	799b      	ldrb	r3, [r3, #6]
 800954a:	2b02      	cmp	r3, #2
 800954c:	d10b      	bne.n	8009566 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	79db      	ldrb	r3, [r3, #7]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10f      	bne.n	8009576 <USBH_ParseCfgDesc+0x14a>
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	2b09      	cmp	r3, #9
 800955c:	d00b      	beq.n	8009576 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009560:	2209      	movs	r2, #9
 8009562:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009564:	e007      	b.n	8009576 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b07      	cmp	r3, #7
 800956c:	d004      	beq.n	8009578 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009570:	2207      	movs	r2, #7
 8009572:	701a      	strb	r2, [r3, #0]
 8009574:	e000      	b.n	8009578 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009576:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800957c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009580:	3201      	adds	r2, #1
 8009582:	00d2      	lsls	r2, r2, #3
 8009584:	211a      	movs	r1, #26
 8009586:	fb01 f303 	mul.w	r3, r1, r3
 800958a:	4413      	add	r3, r2
 800958c:	3308      	adds	r3, #8
 800958e:	6a3a      	ldr	r2, [r7, #32]
 8009590:	4413      	add	r3, r2
 8009592:	3304      	adds	r3, #4
 8009594:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009598:	69b9      	ldr	r1, [r7, #24]
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 f86b 	bl	8009676 <USBH_ParseEPDesc>
 80095a0:	4603      	mov	r3, r0
 80095a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80095a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095aa:	3301      	adds	r3, #1
 80095ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	791b      	ldrb	r3, [r3, #4]
 80095b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d204      	bcs.n	80095c6 <USBH_ParseCfgDesc+0x19a>
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	885a      	ldrh	r2, [r3, #2]
 80095c0:	8afb      	ldrh	r3, [r7, #22]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d8b0      	bhi.n	8009528 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	791b      	ldrb	r3, [r3, #4]
 80095ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d201      	bcs.n	80095d6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e01c      	b.n	8009610 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80095d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095da:	3301      	adds	r3, #1
 80095dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80095e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d805      	bhi.n	80095f4 <USBH_ParseCfgDesc+0x1c8>
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	885a      	ldrh	r2, [r3, #2]
 80095ec:	8afb      	ldrh	r3, [r7, #22]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	f63f af74 	bhi.w	80094dc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	791b      	ldrb	r3, [r3, #4]
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	bf28      	it	cs
 80095fc:	2302      	movcs	r3, #2
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009604:	429a      	cmp	r2, r3
 8009606:	d201      	bcs.n	800960c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009608:	2303      	movs	r3, #3
 800960a:	e001      	b.n	8009610 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800960c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009610:	4618      	mov	r0, r3
 8009612:	3730      	adds	r7, #48	; 0x30
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	781a      	ldrb	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	785a      	ldrb	r2, [r3, #1]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	789a      	ldrb	r2, [r3, #2]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	78da      	ldrb	r2, [r3, #3]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	791a      	ldrb	r2, [r3, #4]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	795a      	ldrb	r2, [r3, #5]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	799a      	ldrb	r2, [r3, #6]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	79da      	ldrb	r2, [r3, #7]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	7a1a      	ldrb	r2, [r3, #8]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	721a      	strb	r2, [r3, #8]
}
 800966a:	bf00      	nop
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009676:	b480      	push	{r7}
 8009678:	b087      	sub	sp, #28
 800967a:	af00      	add	r7, sp, #0
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	781a      	ldrb	r2, [r3, #0]
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	785a      	ldrb	r2, [r3, #1]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	789a      	ldrb	r2, [r3, #2]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	78da      	ldrb	r2, [r3, #3]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	3304      	adds	r3, #4
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3305      	adds	r3, #5
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	021b      	lsls	r3, r3, #8
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	4313      	orrs	r3, r2
 80096bc:	b29a      	uxth	r2, r3
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	799a      	ldrb	r2, [r3, #6]
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	889b      	ldrh	r3, [r3, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d102      	bne.n	80096d8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80096d2:	2303      	movs	r3, #3
 80096d4:	75fb      	strb	r3, [r7, #23]
 80096d6:	e033      	b.n	8009740 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	889b      	ldrh	r3, [r3, #4]
 80096dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80096e0:	f023 0307 	bic.w	r3, r3, #7
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	889b      	ldrh	r3, [r3, #4]
 80096ee:	b21a      	sxth	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3304      	adds	r3, #4
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	b299      	uxth	r1, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	3305      	adds	r3, #5
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	b29b      	uxth	r3, r3
 8009700:	021b      	lsls	r3, r3, #8
 8009702:	b29b      	uxth	r3, r3
 8009704:	430b      	orrs	r3, r1
 8009706:	b29b      	uxth	r3, r3
 8009708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800970c:	2b00      	cmp	r3, #0
 800970e:	d110      	bne.n	8009732 <USBH_ParseEPDesc+0xbc>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3304      	adds	r3, #4
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	b299      	uxth	r1, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3305      	adds	r3, #5
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	b29b      	uxth	r3, r3
 8009720:	021b      	lsls	r3, r3, #8
 8009722:	b29b      	uxth	r3, r3
 8009724:	430b      	orrs	r3, r1
 8009726:	b29b      	uxth	r3, r3
 8009728:	b21b      	sxth	r3, r3
 800972a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800972e:	b21b      	sxth	r3, r3
 8009730:	e001      	b.n	8009736 <USBH_ParseEPDesc+0xc0>
 8009732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009736:	4313      	orrs	r3, r2
 8009738:	b21b      	sxth	r3, r3
 800973a:	b29a      	uxth	r2, r3
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009746:	2b00      	cmp	r3, #0
 8009748:	d116      	bne.n	8009778 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	78db      	ldrb	r3, [r3, #3]
 800974e:	f003 0303 	and.w	r3, r3, #3
 8009752:	2b01      	cmp	r3, #1
 8009754:	d005      	beq.n	8009762 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	78db      	ldrb	r3, [r3, #3]
 800975a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800975e:	2b03      	cmp	r3, #3
 8009760:	d127      	bne.n	80097b2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	799b      	ldrb	r3, [r3, #6]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <USBH_ParseEPDesc+0xfc>
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	799b      	ldrb	r3, [r3, #6]
 800976e:	2b10      	cmp	r3, #16
 8009770:	d91f      	bls.n	80097b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009772:	2303      	movs	r3, #3
 8009774:	75fb      	strb	r3, [r7, #23]
 8009776:	e01c      	b.n	80097b2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	78db      	ldrb	r3, [r3, #3]
 800977c:	f003 0303 	and.w	r3, r3, #3
 8009780:	2b01      	cmp	r3, #1
 8009782:	d10a      	bne.n	800979a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	799b      	ldrb	r3, [r3, #6]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d003      	beq.n	8009794 <USBH_ParseEPDesc+0x11e>
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	799b      	ldrb	r3, [r3, #6]
 8009790:	2b10      	cmp	r3, #16
 8009792:	d90e      	bls.n	80097b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009794:	2303      	movs	r3, #3
 8009796:	75fb      	strb	r3, [r7, #23]
 8009798:	e00b      	b.n	80097b2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	78db      	ldrb	r3, [r3, #3]
 800979e:	f003 0303 	and.w	r3, r3, #3
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d105      	bne.n	80097b2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	799b      	ldrb	r3, [r3, #6]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80097ae:	2303      	movs	r3, #3
 80097b0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	371c      	adds	r7, #28
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	4613      	mov	r3, r2
 80097cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3301      	adds	r3, #1
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d120      	bne.n	800981a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	1e9a      	subs	r2, r3, #2
 80097de:	88fb      	ldrh	r3, [r7, #6]
 80097e0:	4293      	cmp	r3, r2
 80097e2:	bf28      	it	cs
 80097e4:	4613      	movcs	r3, r2
 80097e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3302      	adds	r3, #2
 80097ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80097ee:	2300      	movs	r3, #0
 80097f0:	82fb      	strh	r3, [r7, #22]
 80097f2:	e00b      	b.n	800980c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80097f4:	8afb      	ldrh	r3, [r7, #22]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	4413      	add	r3, r2
 80097fa:	781a      	ldrb	r2, [r3, #0]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	3301      	adds	r3, #1
 8009804:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009806:	8afb      	ldrh	r3, [r7, #22]
 8009808:	3302      	adds	r3, #2
 800980a:	82fb      	strh	r3, [r7, #22]
 800980c:	8afa      	ldrh	r2, [r7, #22]
 800980e:	8abb      	ldrh	r3, [r7, #20]
 8009810:	429a      	cmp	r2, r3
 8009812:	d3ef      	bcc.n	80097f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2200      	movs	r2, #0
 8009818:	701a      	strb	r2, [r3, #0]
  }
}
 800981a:	bf00      	nop
 800981c:	371c      	adds	r7, #28
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009826:	b480      	push	{r7}
 8009828:	b085      	sub	sp, #20
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	881a      	ldrh	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	b29b      	uxth	r3, r3
 800983a:	4413      	add	r3, r2
 800983c:	b29a      	uxth	r2, r3
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4413      	add	r3, r2
 800984c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800984e:	68fb      	ldr	r3, [r7, #12]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	4613      	mov	r3, r2
 8009868:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800986a:	2301      	movs	r3, #1
 800986c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	789b      	ldrb	r3, [r3, #2]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d002      	beq.n	800987c <USBH_CtlReq+0x20>
 8009876:	2b02      	cmp	r3, #2
 8009878:	d00f      	beq.n	800989a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800987a:	e027      	b.n	80098cc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	88fa      	ldrh	r2, [r7, #6]
 8009886:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2201      	movs	r2, #1
 800988c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2202      	movs	r2, #2
 8009892:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009894:	2301      	movs	r3, #1
 8009896:	75fb      	strb	r3, [r7, #23]
      break;
 8009898:	e018      	b.n	80098cc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 f81c 	bl	80098d8 <USBH_HandleControl>
 80098a0:	4603      	mov	r3, r0
 80098a2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <USBH_CtlReq+0x54>
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d106      	bne.n	80098be <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2201      	movs	r2, #1
 80098b4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	761a      	strb	r2, [r3, #24]
      break;
 80098bc:	e005      	b.n	80098ca <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d102      	bne.n	80098ca <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2201      	movs	r2, #1
 80098c8:	709a      	strb	r2, [r3, #2]
      break;
 80098ca:	bf00      	nop
  }
  return status;
 80098cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af02      	add	r7, sp, #8
 80098de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80098e0:	2301      	movs	r3, #1
 80098e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	7e1b      	ldrb	r3, [r3, #24]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	2b0a      	cmp	r3, #10
 80098f0:	f200 8156 	bhi.w	8009ba0 <USBH_HandleControl+0x2c8>
 80098f4:	a201      	add	r2, pc, #4	; (adr r2, 80098fc <USBH_HandleControl+0x24>)
 80098f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fa:	bf00      	nop
 80098fc:	08009929 	.word	0x08009929
 8009900:	08009943 	.word	0x08009943
 8009904:	080099ad 	.word	0x080099ad
 8009908:	080099d3 	.word	0x080099d3
 800990c:	08009a0b 	.word	0x08009a0b
 8009910:	08009a35 	.word	0x08009a35
 8009914:	08009a87 	.word	0x08009a87
 8009918:	08009aa9 	.word	0x08009aa9
 800991c:	08009ae5 	.word	0x08009ae5
 8009920:	08009b0b 	.word	0x08009b0b
 8009924:	08009b49 	.word	0x08009b49
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f103 0110 	add.w	r1, r3, #16
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	795b      	ldrb	r3, [r3, #5]
 8009932:	461a      	mov	r2, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f943 	bl	8009bc0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2202      	movs	r2, #2
 800993e:	761a      	strb	r2, [r3, #24]
      break;
 8009940:	e139      	b.n	8009bb6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	795b      	ldrb	r3, [r3, #5]
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fcc5 	bl	800a2d8 <USBH_LL_GetURBState>
 800994e:	4603      	mov	r3, r0
 8009950:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d11e      	bne.n	8009996 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7c1b      	ldrb	r3, [r3, #16]
 800995c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009960:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	8adb      	ldrh	r3, [r3, #22]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800996a:	7b7b      	ldrb	r3, [r7, #13]
 800996c:	2b80      	cmp	r3, #128	; 0x80
 800996e:	d103      	bne.n	8009978 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2203      	movs	r2, #3
 8009974:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009976:	e115      	b.n	8009ba4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2205      	movs	r2, #5
 800997c:	761a      	strb	r2, [r3, #24]
      break;
 800997e:	e111      	b.n	8009ba4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009980:	7b7b      	ldrb	r3, [r7, #13]
 8009982:	2b80      	cmp	r3, #128	; 0x80
 8009984:	d103      	bne.n	800998e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2209      	movs	r2, #9
 800998a:	761a      	strb	r2, [r3, #24]
      break;
 800998c:	e10a      	b.n	8009ba4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2207      	movs	r2, #7
 8009992:	761a      	strb	r2, [r3, #24]
      break;
 8009994:	e106      	b.n	8009ba4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	2b04      	cmp	r3, #4
 800999a:	d003      	beq.n	80099a4 <USBH_HandleControl+0xcc>
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	2b02      	cmp	r3, #2
 80099a0:	f040 8100 	bne.w	8009ba4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	220b      	movs	r2, #11
 80099a8:	761a      	strb	r2, [r3, #24]
      break;
 80099aa:	e0fb      	b.n	8009ba4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6899      	ldr	r1, [r3, #8]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	899a      	ldrh	r2, [r3, #12]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	791b      	ldrb	r3, [r3, #4]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f93a 	bl	8009c3e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2204      	movs	r2, #4
 80099ce:	761a      	strb	r2, [r3, #24]
      break;
 80099d0:	e0f1      	b.n	8009bb6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	791b      	ldrb	r3, [r3, #4]
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fc7d 	bl	800a2d8 <USBH_LL_GetURBState>
 80099de:	4603      	mov	r3, r0
 80099e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d102      	bne.n	80099ee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2209      	movs	r2, #9
 80099ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
 80099f0:	2b05      	cmp	r3, #5
 80099f2:	d102      	bne.n	80099fa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80099f4:	2303      	movs	r3, #3
 80099f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099f8:	e0d6      	b.n	8009ba8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	f040 80d3 	bne.w	8009ba8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	220b      	movs	r2, #11
 8009a06:	761a      	strb	r2, [r3, #24]
      break;
 8009a08:	e0ce      	b.n	8009ba8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6899      	ldr	r1, [r3, #8]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	899a      	ldrh	r2, [r3, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	795b      	ldrb	r3, [r3, #5]
 8009a16:	2001      	movs	r0, #1
 8009a18:	9000      	str	r0, [sp, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f8ea 	bl	8009bf4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2206      	movs	r2, #6
 8009a30:	761a      	strb	r2, [r3, #24]
      break;
 8009a32:	e0c0      	b.n	8009bb6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	795b      	ldrb	r3, [r3, #5]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fc4c 	bl	800a2d8 <USBH_LL_GetURBState>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d103      	bne.n	8009a52 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2207      	movs	r2, #7
 8009a4e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a50:	e0ac      	b.n	8009bac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	2b05      	cmp	r3, #5
 8009a56:	d105      	bne.n	8009a64 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	220c      	movs	r2, #12
 8009a5c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	73fb      	strb	r3, [r7, #15]
      break;
 8009a62:	e0a3      	b.n	8009bac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d103      	bne.n	8009a72 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2205      	movs	r2, #5
 8009a6e:	761a      	strb	r2, [r3, #24]
      break;
 8009a70:	e09c      	b.n	8009bac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	f040 8099 	bne.w	8009bac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	220b      	movs	r2, #11
 8009a7e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009a80:	2302      	movs	r3, #2
 8009a82:	73fb      	strb	r3, [r7, #15]
      break;
 8009a84:	e092      	b.n	8009bac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	791b      	ldrb	r3, [r3, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f8d5 	bl	8009c3e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2208      	movs	r2, #8
 8009aa4:	761a      	strb	r2, [r3, #24]

      break;
 8009aa6:	e086      	b.n	8009bb6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	791b      	ldrb	r3, [r3, #4]
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fc12 	bl	800a2d8 <USBH_LL_GetURBState>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009ab8:	7bbb      	ldrb	r3, [r7, #14]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d105      	bne.n	8009aca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	220d      	movs	r2, #13
 8009ac2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ac8:	e072      	b.n	8009bb0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	d103      	bne.n	8009ad8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	220b      	movs	r2, #11
 8009ad4:	761a      	strb	r2, [r3, #24]
      break;
 8009ad6:	e06b      	b.n	8009bb0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	2b05      	cmp	r3, #5
 8009adc:	d168      	bne.n	8009bb0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ae2:	e065      	b.n	8009bb0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	795b      	ldrb	r3, [r3, #5]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	9200      	str	r2, [sp, #0]
 8009aec:	2200      	movs	r2, #0
 8009aee:	2100      	movs	r1, #0
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f87f 	bl	8009bf4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	220a      	movs	r2, #10
 8009b06:	761a      	strb	r2, [r3, #24]
      break;
 8009b08:	e055      	b.n	8009bb6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	795b      	ldrb	r3, [r3, #5]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fbe1 	bl	800a2d8 <USBH_LL_GetURBState>
 8009b16:	4603      	mov	r3, r0
 8009b18:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d105      	bne.n	8009b2c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	220d      	movs	r2, #13
 8009b28:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b2a:	e043      	b.n	8009bb4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d103      	bne.n	8009b3a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2209      	movs	r2, #9
 8009b36:	761a      	strb	r2, [r3, #24]
      break;
 8009b38:	e03c      	b.n	8009bb4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d139      	bne.n	8009bb4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	220b      	movs	r2, #11
 8009b44:	761a      	strb	r2, [r3, #24]
      break;
 8009b46:	e035      	b.n	8009bb4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	7e5b      	ldrb	r3, [r3, #25]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	765a      	strb	r2, [r3, #25]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	7e5b      	ldrb	r3, [r3, #25]
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d806      	bhi.n	8009b6a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009b68:	e025      	b.n	8009bb6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b70:	2106      	movs	r1, #6
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	795b      	ldrb	r3, [r3, #5]
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f90c 	bl	8009da0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	791b      	ldrb	r3, [r3, #4]
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f906 	bl	8009da0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b9e:	e00a      	b.n	8009bb6 <USBH_HandleControl+0x2de>

    default:
      break;
 8009ba0:	bf00      	nop
 8009ba2:	e008      	b.n	8009bb6 <USBH_HandleControl+0x2de>
      break;
 8009ba4:	bf00      	nop
 8009ba6:	e006      	b.n	8009bb6 <USBH_HandleControl+0x2de>
      break;
 8009ba8:	bf00      	nop
 8009baa:	e004      	b.n	8009bb6 <USBH_HandleControl+0x2de>
      break;
 8009bac:	bf00      	nop
 8009bae:	e002      	b.n	8009bb6 <USBH_HandleControl+0x2de>
      break;
 8009bb0:	bf00      	nop
 8009bb2:	e000      	b.n	8009bb6 <USBH_HandleControl+0x2de>
      break;
 8009bb4:	bf00      	nop
  }

  return status;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b088      	sub	sp, #32
 8009bc4:	af04      	add	r7, sp, #16
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bce:	79f9      	ldrb	r1, [r7, #7]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	9303      	str	r3, [sp, #12]
 8009bd4:	2308      	movs	r3, #8
 8009bd6:	9302      	str	r3, [sp, #8]
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	2300      	movs	r3, #0
 8009be2:	2200      	movs	r2, #0
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f000 fb46 	bl	800a276 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af04      	add	r7, sp, #16
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	4611      	mov	r1, r2
 8009c00:	461a      	mov	r2, r3
 8009c02:	460b      	mov	r3, r1
 8009c04:	80fb      	strh	r3, [r7, #6]
 8009c06:	4613      	mov	r3, r2
 8009c08:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c18:	7979      	ldrb	r1, [r7, #5]
 8009c1a:	7e3b      	ldrb	r3, [r7, #24]
 8009c1c:	9303      	str	r3, [sp, #12]
 8009c1e:	88fb      	ldrh	r3, [r7, #6]
 8009c20:	9302      	str	r3, [sp, #8]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	2301      	movs	r3, #1
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f000 fb21 	bl	800a276 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b088      	sub	sp, #32
 8009c42:	af04      	add	r7, sp, #16
 8009c44:	60f8      	str	r0, [r7, #12]
 8009c46:	60b9      	str	r1, [r7, #8]
 8009c48:	4611      	mov	r1, r2
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	80fb      	strh	r3, [r7, #6]
 8009c50:	4613      	mov	r3, r2
 8009c52:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c54:	7979      	ldrb	r1, [r7, #5]
 8009c56:	2300      	movs	r3, #0
 8009c58:	9303      	str	r3, [sp, #12]
 8009c5a:	88fb      	ldrh	r3, [r7, #6]
 8009c5c:	9302      	str	r3, [sp, #8]
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	2301      	movs	r3, #1
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	2300      	movs	r3, #0
 8009c68:	2201      	movs	r2, #1
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 fb03 	bl	800a276 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c70:	2300      	movs	r3, #0

}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b088      	sub	sp, #32
 8009c7e:	af04      	add	r7, sp, #16
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	60b9      	str	r1, [r7, #8]
 8009c84:	4611      	mov	r1, r2
 8009c86:	461a      	mov	r2, r3
 8009c88:	460b      	mov	r3, r1
 8009c8a:	80fb      	strh	r3, [r7, #6]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c9e:	7979      	ldrb	r1, [r7, #5]
 8009ca0:	7e3b      	ldrb	r3, [r7, #24]
 8009ca2:	9303      	str	r3, [sp, #12]
 8009ca4:	88fb      	ldrh	r3, [r7, #6]
 8009ca6:	9302      	str	r3, [sp, #8]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	9301      	str	r3, [sp, #4]
 8009cac:	2301      	movs	r3, #1
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f000 fade 	bl	800a276 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af04      	add	r7, sp, #16
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	4611      	mov	r1, r2
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	80fb      	strh	r3, [r7, #6]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009cda:	7979      	ldrb	r1, [r7, #5]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	9303      	str	r3, [sp, #12]
 8009ce0:	88fb      	ldrh	r3, [r7, #6]
 8009ce2:	9302      	str	r3, [sp, #8]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	9301      	str	r3, [sp, #4]
 8009ce8:	2301      	movs	r3, #1
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	2302      	movs	r3, #2
 8009cee:	2201      	movs	r2, #1
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 fac0 	bl	800a276 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af04      	add	r7, sp, #16
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	4608      	mov	r0, r1
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	4603      	mov	r3, r0
 8009d10:	70fb      	strb	r3, [r7, #3]
 8009d12:	460b      	mov	r3, r1
 8009d14:	70bb      	strb	r3, [r7, #2]
 8009d16:	4613      	mov	r3, r2
 8009d18:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009d1a:	7878      	ldrb	r0, [r7, #1]
 8009d1c:	78ba      	ldrb	r2, [r7, #2]
 8009d1e:	78f9      	ldrb	r1, [r7, #3]
 8009d20:	8b3b      	ldrh	r3, [r7, #24]
 8009d22:	9302      	str	r3, [sp, #8]
 8009d24:	7d3b      	ldrb	r3, [r7, #20]
 8009d26:	9301      	str	r3, [sp, #4]
 8009d28:	7c3b      	ldrb	r3, [r7, #16]
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa53 	bl	800a1da <USBH_LL_OpenPipe>

  return USBH_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b082      	sub	sp, #8
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	460b      	mov	r3, r1
 8009d48:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009d4a:	78fb      	ldrb	r3, [r7, #3]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fa72 	bl	800a238 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	460b      	mov	r3, r1
 8009d68:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f836 	bl	8009ddc <USBH_GetFreePipe>
 8009d70:	4603      	mov	r3, r0
 8009d72:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009d74:	89fb      	ldrh	r3, [r7, #14]
 8009d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d00a      	beq.n	8009d94 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009d7e:	78fa      	ldrb	r2, [r7, #3]
 8009d80:	89fb      	ldrh	r3, [r7, #14]
 8009d82:	f003 030f 	and.w	r3, r3, #15
 8009d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	33e0      	adds	r3, #224	; 0xe0
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	440b      	add	r3, r1
 8009d92:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009d94:	89fb      	ldrh	r3, [r7, #14]
 8009d96:	b2db      	uxtb	r3, r3
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009dac:	78fb      	ldrb	r3, [r7, #3]
 8009dae:	2b0f      	cmp	r3, #15
 8009db0:	d80d      	bhi.n	8009dce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009db2:	78fb      	ldrb	r3, [r7, #3]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	33e0      	adds	r3, #224	; 0xe0
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	685a      	ldr	r2, [r3, #4]
 8009dbe:	78fb      	ldrb	r3, [r7, #3]
 8009dc0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009dc4:	6879      	ldr	r1, [r7, #4]
 8009dc6:	33e0      	adds	r3, #224	; 0xe0
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	440b      	add	r3, r1
 8009dcc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]
 8009dec:	e00f      	b.n	8009e0e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	33e0      	adds	r3, #224	; 0xe0
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d102      	bne.n	8009e08 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	e007      	b.n	8009e18 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	73fb      	strb	r3, [r7, #15]
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	2b0f      	cmp	r3, #15
 8009e12:	d9ec      	bls.n	8009dee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009e28:	2201      	movs	r2, #1
 8009e2a:	490e      	ldr	r1, [pc, #56]	; (8009e64 <MX_USB_HOST_Init+0x40>)
 8009e2c:	480e      	ldr	r0, [pc, #56]	; (8009e68 <MX_USB_HOST_Init+0x44>)
 8009e2e:	f7fe fba7 	bl	8008580 <USBH_Init>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009e38:	f7f6 fde6 	bl	8000a08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009e3c:	490b      	ldr	r1, [pc, #44]	; (8009e6c <MX_USB_HOST_Init+0x48>)
 8009e3e:	480a      	ldr	r0, [pc, #40]	; (8009e68 <MX_USB_HOST_Init+0x44>)
 8009e40:	f7fe fc2c 	bl	800869c <USBH_RegisterClass>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009e4a:	f7f6 fddd 	bl	8000a08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009e4e:	4806      	ldr	r0, [pc, #24]	; (8009e68 <MX_USB_HOST_Init+0x44>)
 8009e50:	f7fe fcb0 	bl	80087b4 <USBH_Start>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009e5a:	f7f6 fdd5 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009e5e:	bf00      	nop
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	08009e85 	.word	0x08009e85
 8009e68:	20000410 	.word	0x20000410
 8009e6c:	2000000c 	.word	0x2000000c

08009e70 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009e74:	4802      	ldr	r0, [pc, #8]	; (8009e80 <MX_USB_HOST_Process+0x10>)
 8009e76:	f7fe fcad 	bl	80087d4 <USBH_Process>
}
 8009e7a:	bf00      	nop
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20000410 	.word	0x20000410

08009e84 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	2b04      	cmp	r3, #4
 8009e96:	d819      	bhi.n	8009ecc <USBH_UserProcess+0x48>
 8009e98:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <USBH_UserProcess+0x1c>)
 8009e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9e:	bf00      	nop
 8009ea0:	08009ecd 	.word	0x08009ecd
 8009ea4:	08009ebd 	.word	0x08009ebd
 8009ea8:	08009ecd 	.word	0x08009ecd
 8009eac:	08009ec5 	.word	0x08009ec5
 8009eb0:	08009eb5 	.word	0x08009eb5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009eb4:	4b09      	ldr	r3, [pc, #36]	; (8009edc <USBH_UserProcess+0x58>)
 8009eb6:	2203      	movs	r2, #3
 8009eb8:	701a      	strb	r2, [r3, #0]
  break;
 8009eba:	e008      	b.n	8009ece <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009ebc:	4b07      	ldr	r3, [pc, #28]	; (8009edc <USBH_UserProcess+0x58>)
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	701a      	strb	r2, [r3, #0]
  break;
 8009ec2:	e004      	b.n	8009ece <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009ec4:	4b05      	ldr	r3, [pc, #20]	; (8009edc <USBH_UserProcess+0x58>)
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	701a      	strb	r2, [r3, #0]
  break;
 8009eca:	e000      	b.n	8009ece <USBH_UserProcess+0x4a>

  default:
  break;
 8009ecc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009ece:	bf00      	nop
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	200007e8 	.word	0x200007e8

08009ee0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08a      	sub	sp, #40	; 0x28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ee8:	f107 0314 	add.w	r3, r7, #20
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	605a      	str	r2, [r3, #4]
 8009ef2:	609a      	str	r2, [r3, #8]
 8009ef4:	60da      	str	r2, [r3, #12]
 8009ef6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f00:	d147      	bne.n	8009f92 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f02:	2300      	movs	r3, #0
 8009f04:	613b      	str	r3, [r7, #16]
 8009f06:	4b25      	ldr	r3, [pc, #148]	; (8009f9c <HAL_HCD_MspInit+0xbc>)
 8009f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0a:	4a24      	ldr	r2, [pc, #144]	; (8009f9c <HAL_HCD_MspInit+0xbc>)
 8009f0c:	f043 0301 	orr.w	r3, r3, #1
 8009f10:	6313      	str	r3, [r2, #48]	; 0x30
 8009f12:	4b22      	ldr	r3, [pc, #136]	; (8009f9c <HAL_HCD_MspInit+0xbc>)
 8009f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	613b      	str	r3, [r7, #16]
 8009f1c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f24:	2300      	movs	r3, #0
 8009f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009f2c:	f107 0314 	add.w	r3, r7, #20
 8009f30:	4619      	mov	r1, r3
 8009f32:	481b      	ldr	r0, [pc, #108]	; (8009fa0 <HAL_HCD_MspInit+0xc0>)
 8009f34:	f7f7 fb82 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009f38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f3e:	2302      	movs	r3, #2
 8009f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f46:	2300      	movs	r3, #0
 8009f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f4a:	230a      	movs	r3, #10
 8009f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f4e:	f107 0314 	add.w	r3, r7, #20
 8009f52:	4619      	mov	r1, r3
 8009f54:	4812      	ldr	r0, [pc, #72]	; (8009fa0 <HAL_HCD_MspInit+0xc0>)
 8009f56:	f7f7 fb71 	bl	800163c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f5a:	4b10      	ldr	r3, [pc, #64]	; (8009f9c <HAL_HCD_MspInit+0xbc>)
 8009f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5e:	4a0f      	ldr	r2, [pc, #60]	; (8009f9c <HAL_HCD_MspInit+0xbc>)
 8009f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f64:	6353      	str	r3, [r2, #52]	; 0x34
 8009f66:	2300      	movs	r3, #0
 8009f68:	60fb      	str	r3, [r7, #12]
 8009f6a:	4b0c      	ldr	r3, [pc, #48]	; (8009f9c <HAL_HCD_MspInit+0xbc>)
 8009f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f6e:	4a0b      	ldr	r2, [pc, #44]	; (8009f9c <HAL_HCD_MspInit+0xbc>)
 8009f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f74:	6453      	str	r3, [r2, #68]	; 0x44
 8009f76:	4b09      	ldr	r3, [pc, #36]	; (8009f9c <HAL_HCD_MspInit+0xbc>)
 8009f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f82:	2200      	movs	r2, #0
 8009f84:	2100      	movs	r1, #0
 8009f86:	2043      	movs	r0, #67	; 0x43
 8009f88:	f7f7 faf1 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f8c:	2043      	movs	r0, #67	; 0x43
 8009f8e:	f7f7 fb0a 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f92:	bf00      	nop
 8009f94:	3728      	adds	r7, #40	; 0x28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	40023800 	.word	0x40023800
 8009fa0:	40020000 	.word	0x40020000

08009fa4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe ffed 	bl	8008f92 <USBH_LL_IncTimer>
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7ff f825 	bl	800901e <USBH_LL_Connect>
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7ff f82e 	bl	800904c <USBH_LL_Disconnect>
}
 8009ff0:	bf00      	nop
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
 800a004:	4613      	mov	r3, r2
 800a006:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe ffdf 	bl	8008fe6 <USBH_LL_PortEnabled>
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe ffdf 	bl	8009002 <USBH_LL_PortDisabled>
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d12a      	bne.n	800a0b4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a05e:	4a18      	ldr	r2, [pc, #96]	; (800a0c0 <USBH_LL_Init+0x74>)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a15      	ldr	r2, [pc, #84]	; (800a0c0 <USBH_LL_Init+0x74>)
 800a06a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a06e:	4b14      	ldr	r3, [pc, #80]	; (800a0c0 <USBH_LL_Init+0x74>)
 800a070:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a074:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a076:	4b12      	ldr	r3, [pc, #72]	; (800a0c0 <USBH_LL_Init+0x74>)
 800a078:	2208      	movs	r2, #8
 800a07a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a07c:	4b10      	ldr	r3, [pc, #64]	; (800a0c0 <USBH_LL_Init+0x74>)
 800a07e:	2201      	movs	r2, #1
 800a080:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a082:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <USBH_LL_Init+0x74>)
 800a084:	2200      	movs	r2, #0
 800a086:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a088:	4b0d      	ldr	r3, [pc, #52]	; (800a0c0 <USBH_LL_Init+0x74>)
 800a08a:	2202      	movs	r2, #2
 800a08c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a08e:	4b0c      	ldr	r3, [pc, #48]	; (800a0c0 <USBH_LL_Init+0x74>)
 800a090:	2200      	movs	r2, #0
 800a092:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a094:	480a      	ldr	r0, [pc, #40]	; (800a0c0 <USBH_LL_Init+0x74>)
 800a096:	f7f7 fca0 	bl	80019da <HAL_HCD_Init>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a0a0:	f7f6 fcb2 	bl	8000a08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a0a4:	4806      	ldr	r0, [pc, #24]	; (800a0c0 <USBH_LL_Init+0x74>)
 800a0a6:	f7f8 f884 	bl	80021b2 <HAL_HCD_GetCurrentFrame>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7fe ff60 	bl	8008f74 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	200007ec 	.word	0x200007ec

0800a0c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7f7 fff3 	bl	80020c6 <HAL_HCD_Start>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 f95c 	bl	800a3a4 <USBH_Get_USB_Status>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b084      	sub	sp, #16
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a110:	4618      	mov	r0, r3
 800a112:	f7f7 fffb 	bl	800210c <HAL_HCD_Stop>
 800a116:	4603      	mov	r3, r0
 800a118:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f000 f941 	bl	800a3a4 <USBH_Get_USB_Status>
 800a122:	4603      	mov	r3, r0
 800a124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a126:	7bbb      	ldrb	r3, [r7, #14]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a138:	2301      	movs	r3, #1
 800a13a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a142:	4618      	mov	r0, r3
 800a144:	f7f8 f843 	bl	80021ce <HAL_HCD_GetCurrentSpeed>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d00c      	beq.n	800a168 <USBH_LL_GetSpeed+0x38>
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d80d      	bhi.n	800a16e <USBH_LL_GetSpeed+0x3e>
 800a152:	2b00      	cmp	r3, #0
 800a154:	d002      	beq.n	800a15c <USBH_LL_GetSpeed+0x2c>
 800a156:	2b01      	cmp	r3, #1
 800a158:	d003      	beq.n	800a162 <USBH_LL_GetSpeed+0x32>
 800a15a:	e008      	b.n	800a16e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73fb      	strb	r3, [r7, #15]
    break;
 800a160:	e008      	b.n	800a174 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a162:	2301      	movs	r3, #1
 800a164:	73fb      	strb	r3, [r7, #15]
    break;
 800a166:	e005      	b.n	800a174 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a168:	2302      	movs	r3, #2
 800a16a:	73fb      	strb	r3, [r7, #15]
    break;
 800a16c:	e002      	b.n	800a174 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a16e:	2301      	movs	r3, #1
 800a170:	73fb      	strb	r3, [r7, #15]
    break;
 800a172:	bf00      	nop
  }
  return  speed;
 800a174:	7bfb      	ldrb	r3, [r7, #15]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a194:	4618      	mov	r0, r3
 800a196:	f7f7 ffd6 	bl	8002146 <HAL_HCD_ResetPort>
 800a19a:	4603      	mov	r3, r0
 800a19c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 f8ff 	bl	800a3a4 <USBH_Get_USB_Status>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	460b      	mov	r3, r1
 800a1be:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1c6:	78fa      	ldrb	r2, [r7, #3]
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7f7 ffdd 	bl	800218a <HAL_HCD_HC_GetXferCount>
 800a1d0:	4603      	mov	r3, r0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a1da:	b590      	push	{r4, r7, lr}
 800a1dc:	b089      	sub	sp, #36	; 0x24
 800a1de:	af04      	add	r7, sp, #16
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	4608      	mov	r0, r1
 800a1e4:	4611      	mov	r1, r2
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	70fb      	strb	r3, [r7, #3]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70bb      	strb	r3, [r7, #2]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a202:	787c      	ldrb	r4, [r7, #1]
 800a204:	78ba      	ldrb	r2, [r7, #2]
 800a206:	78f9      	ldrb	r1, [r7, #3]
 800a208:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a20a:	9302      	str	r3, [sp, #8]
 800a20c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	4623      	mov	r3, r4
 800a21a:	f7f7 fc40 	bl	8001a9e <HAL_HCD_HC_Init>
 800a21e:	4603      	mov	r3, r0
 800a220:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a222:	7bfb      	ldrb	r3, [r7, #15]
 800a224:	4618      	mov	r0, r3
 800a226:	f000 f8bd 	bl	800a3a4 <USBH_Get_USB_Status>
 800a22a:	4603      	mov	r3, r0
 800a22c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a22e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	bd90      	pop	{r4, r7, pc}

0800a238 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a252:	78fa      	ldrb	r2, [r7, #3]
 800a254:	4611      	mov	r1, r2
 800a256:	4618      	mov	r0, r3
 800a258:	f7f7 fcb0 	bl	8001bbc <HAL_HCD_HC_Halt>
 800a25c:	4603      	mov	r3, r0
 800a25e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a260:	7bfb      	ldrb	r3, [r7, #15]
 800a262:	4618      	mov	r0, r3
 800a264:	f000 f89e 	bl	800a3a4 <USBH_Get_USB_Status>
 800a268:	4603      	mov	r3, r0
 800a26a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a26c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a276:	b590      	push	{r4, r7, lr}
 800a278:	b089      	sub	sp, #36	; 0x24
 800a27a:	af04      	add	r7, sp, #16
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	4608      	mov	r0, r1
 800a280:	4611      	mov	r1, r2
 800a282:	461a      	mov	r2, r3
 800a284:	4603      	mov	r3, r0
 800a286:	70fb      	strb	r3, [r7, #3]
 800a288:	460b      	mov	r3, r1
 800a28a:	70bb      	strb	r3, [r7, #2]
 800a28c:	4613      	mov	r3, r2
 800a28e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a294:	2300      	movs	r3, #0
 800a296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a29e:	787c      	ldrb	r4, [r7, #1]
 800a2a0:	78ba      	ldrb	r2, [r7, #2]
 800a2a2:	78f9      	ldrb	r1, [r7, #3]
 800a2a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a2a8:	9303      	str	r3, [sp, #12]
 800a2aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a2ac:	9302      	str	r3, [sp, #8]
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b0:	9301      	str	r3, [sp, #4]
 800a2b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	4623      	mov	r3, r4
 800a2ba:	f7f7 fca3 	bl	8001c04 <HAL_HCD_HC_SubmitRequest>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f000 f86d 	bl	800a3a4 <USBH_Get_USB_Status>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd90      	pop	{r4, r7, pc}

0800a2d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7f7 ff37 	bl	8002162 <HAL_HCD_HC_GetURBState>
 800a2f4:	4603      	mov	r3, r0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b082      	sub	sp, #8
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	460b      	mov	r3, r1
 800a308:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a310:	2b01      	cmp	r3, #1
 800a312:	d103      	bne.n	800a31c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a314:	78fb      	ldrb	r3, [r7, #3]
 800a316:	4618      	mov	r0, r3
 800a318:	f000 f870 	bl	800a3fc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a31c:	20c8      	movs	r0, #200	; 0xc8
 800a31e:	f7f7 f827 	bl	8001370 <HAL_Delay>
  return USBH_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
 800a338:	4613      	mov	r3, r2
 800a33a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a342:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	212c      	movs	r1, #44	; 0x2c
 800a34a:	fb01 f303 	mul.w	r3, r1, r3
 800a34e:	4413      	add	r3, r2
 800a350:	333b      	adds	r3, #59	; 0x3b
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d009      	beq.n	800a36c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a358:	78fb      	ldrb	r3, [r7, #3]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	212c      	movs	r1, #44	; 0x2c
 800a35e:	fb01 f303 	mul.w	r3, r1, r3
 800a362:	4413      	add	r3, r2
 800a364:	3354      	adds	r3, #84	; 0x54
 800a366:	78ba      	ldrb	r2, [r7, #2]
 800a368:	701a      	strb	r2, [r3, #0]
 800a36a:	e008      	b.n	800a37e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a36c:	78fb      	ldrb	r3, [r7, #3]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	212c      	movs	r1, #44	; 0x2c
 800a372:	fb01 f303 	mul.w	r3, r1, r3
 800a376:	4413      	add	r3, r2
 800a378:	3355      	adds	r3, #85	; 0x55
 800a37a:	78ba      	ldrb	r2, [r7, #2]
 800a37c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7f6 ffeb 	bl	8001370 <HAL_Delay>
}
 800a39a:	bf00      	nop
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3b2:	79fb      	ldrb	r3, [r7, #7]
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d817      	bhi.n	800a3e8 <USBH_Get_USB_Status+0x44>
 800a3b8:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <USBH_Get_USB_Status+0x1c>)
 800a3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3be:	bf00      	nop
 800a3c0:	0800a3d1 	.word	0x0800a3d1
 800a3c4:	0800a3d7 	.word	0x0800a3d7
 800a3c8:	0800a3dd 	.word	0x0800a3dd
 800a3cc:	0800a3e3 	.word	0x0800a3e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d4:	e00b      	b.n	800a3ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a3da:	e008      	b.n	800a3ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	73fb      	strb	r3, [r7, #15]
    break;
 800a3e0:	e005      	b.n	800a3ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3e6:	e002      	b.n	800a3ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ec:	bf00      	nop
  }
  return usb_status;
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a40a:	79fb      	ldrb	r3, [r7, #7]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d102      	bne.n	800a416 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a410:	2300      	movs	r3, #0
 800a412:	73fb      	strb	r3, [r7, #15]
 800a414:	e001      	b.n	800a41a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a416:	2301      	movs	r3, #1
 800a418:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	461a      	mov	r2, r3
 800a41e:	2101      	movs	r1, #1
 800a420:	4803      	ldr	r0, [pc, #12]	; (800a430 <MX_DriverVbusFS+0x34>)
 800a422:	f7f7 faa7 	bl	8001974 <HAL_GPIO_WritePin>
}
 800a426:	bf00      	nop
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	40020800 	.word	0x40020800

0800a434 <__errno>:
 800a434:	4b01      	ldr	r3, [pc, #4]	; (800a43c <__errno+0x8>)
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	2000002c 	.word	0x2000002c

0800a440 <__libc_init_array>:
 800a440:	b570      	push	{r4, r5, r6, lr}
 800a442:	4d0d      	ldr	r5, [pc, #52]	; (800a478 <__libc_init_array+0x38>)
 800a444:	4c0d      	ldr	r4, [pc, #52]	; (800a47c <__libc_init_array+0x3c>)
 800a446:	1b64      	subs	r4, r4, r5
 800a448:	10a4      	asrs	r4, r4, #2
 800a44a:	2600      	movs	r6, #0
 800a44c:	42a6      	cmp	r6, r4
 800a44e:	d109      	bne.n	800a464 <__libc_init_array+0x24>
 800a450:	4d0b      	ldr	r5, [pc, #44]	; (800a480 <__libc_init_array+0x40>)
 800a452:	4c0c      	ldr	r4, [pc, #48]	; (800a484 <__libc_init_array+0x44>)
 800a454:	f000 f93c 	bl	800a6d0 <_init>
 800a458:	1b64      	subs	r4, r4, r5
 800a45a:	10a4      	asrs	r4, r4, #2
 800a45c:	2600      	movs	r6, #0
 800a45e:	42a6      	cmp	r6, r4
 800a460:	d105      	bne.n	800a46e <__libc_init_array+0x2e>
 800a462:	bd70      	pop	{r4, r5, r6, pc}
 800a464:	f855 3b04 	ldr.w	r3, [r5], #4
 800a468:	4798      	blx	r3
 800a46a:	3601      	adds	r6, #1
 800a46c:	e7ee      	b.n	800a44c <__libc_init_array+0xc>
 800a46e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a472:	4798      	blx	r3
 800a474:	3601      	adds	r6, #1
 800a476:	e7f2      	b.n	800a45e <__libc_init_array+0x1e>
 800a478:	0800a70c 	.word	0x0800a70c
 800a47c:	0800a70c 	.word	0x0800a70c
 800a480:	0800a70c 	.word	0x0800a70c
 800a484:	0800a710 	.word	0x0800a710

0800a488 <malloc>:
 800a488:	4b02      	ldr	r3, [pc, #8]	; (800a494 <malloc+0xc>)
 800a48a:	4601      	mov	r1, r0
 800a48c:	6818      	ldr	r0, [r3, #0]
 800a48e:	f000 b88d 	b.w	800a5ac <_malloc_r>
 800a492:	bf00      	nop
 800a494:	2000002c 	.word	0x2000002c

0800a498 <free>:
 800a498:	4b02      	ldr	r3, [pc, #8]	; (800a4a4 <free+0xc>)
 800a49a:	4601      	mov	r1, r0
 800a49c:	6818      	ldr	r0, [r3, #0]
 800a49e:	f000 b819 	b.w	800a4d4 <_free_r>
 800a4a2:	bf00      	nop
 800a4a4:	2000002c 	.word	0x2000002c

0800a4a8 <memcpy>:
 800a4a8:	440a      	add	r2, r1
 800a4aa:	4291      	cmp	r1, r2
 800a4ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4b0:	d100      	bne.n	800a4b4 <memcpy+0xc>
 800a4b2:	4770      	bx	lr
 800a4b4:	b510      	push	{r4, lr}
 800a4b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4be:	4291      	cmp	r1, r2
 800a4c0:	d1f9      	bne.n	800a4b6 <memcpy+0xe>
 800a4c2:	bd10      	pop	{r4, pc}

0800a4c4 <memset>:
 800a4c4:	4402      	add	r2, r0
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d100      	bne.n	800a4ce <memset+0xa>
 800a4cc:	4770      	bx	lr
 800a4ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a4d2:	e7f9      	b.n	800a4c8 <memset+0x4>

0800a4d4 <_free_r>:
 800a4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4d6:	2900      	cmp	r1, #0
 800a4d8:	d044      	beq.n	800a564 <_free_r+0x90>
 800a4da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4de:	9001      	str	r0, [sp, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f1a1 0404 	sub.w	r4, r1, #4
 800a4e6:	bfb8      	it	lt
 800a4e8:	18e4      	addlt	r4, r4, r3
 800a4ea:	f000 f8e3 	bl	800a6b4 <__malloc_lock>
 800a4ee:	4a1e      	ldr	r2, [pc, #120]	; (800a568 <_free_r+0x94>)
 800a4f0:	9801      	ldr	r0, [sp, #4]
 800a4f2:	6813      	ldr	r3, [r2, #0]
 800a4f4:	b933      	cbnz	r3, 800a504 <_free_r+0x30>
 800a4f6:	6063      	str	r3, [r4, #4]
 800a4f8:	6014      	str	r4, [r2, #0]
 800a4fa:	b003      	add	sp, #12
 800a4fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a500:	f000 b8de 	b.w	800a6c0 <__malloc_unlock>
 800a504:	42a3      	cmp	r3, r4
 800a506:	d908      	bls.n	800a51a <_free_r+0x46>
 800a508:	6825      	ldr	r5, [r4, #0]
 800a50a:	1961      	adds	r1, r4, r5
 800a50c:	428b      	cmp	r3, r1
 800a50e:	bf01      	itttt	eq
 800a510:	6819      	ldreq	r1, [r3, #0]
 800a512:	685b      	ldreq	r3, [r3, #4]
 800a514:	1949      	addeq	r1, r1, r5
 800a516:	6021      	streq	r1, [r4, #0]
 800a518:	e7ed      	b.n	800a4f6 <_free_r+0x22>
 800a51a:	461a      	mov	r2, r3
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	b10b      	cbz	r3, 800a524 <_free_r+0x50>
 800a520:	42a3      	cmp	r3, r4
 800a522:	d9fa      	bls.n	800a51a <_free_r+0x46>
 800a524:	6811      	ldr	r1, [r2, #0]
 800a526:	1855      	adds	r5, r2, r1
 800a528:	42a5      	cmp	r5, r4
 800a52a:	d10b      	bne.n	800a544 <_free_r+0x70>
 800a52c:	6824      	ldr	r4, [r4, #0]
 800a52e:	4421      	add	r1, r4
 800a530:	1854      	adds	r4, r2, r1
 800a532:	42a3      	cmp	r3, r4
 800a534:	6011      	str	r1, [r2, #0]
 800a536:	d1e0      	bne.n	800a4fa <_free_r+0x26>
 800a538:	681c      	ldr	r4, [r3, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	6053      	str	r3, [r2, #4]
 800a53e:	4421      	add	r1, r4
 800a540:	6011      	str	r1, [r2, #0]
 800a542:	e7da      	b.n	800a4fa <_free_r+0x26>
 800a544:	d902      	bls.n	800a54c <_free_r+0x78>
 800a546:	230c      	movs	r3, #12
 800a548:	6003      	str	r3, [r0, #0]
 800a54a:	e7d6      	b.n	800a4fa <_free_r+0x26>
 800a54c:	6825      	ldr	r5, [r4, #0]
 800a54e:	1961      	adds	r1, r4, r5
 800a550:	428b      	cmp	r3, r1
 800a552:	bf04      	itt	eq
 800a554:	6819      	ldreq	r1, [r3, #0]
 800a556:	685b      	ldreq	r3, [r3, #4]
 800a558:	6063      	str	r3, [r4, #4]
 800a55a:	bf04      	itt	eq
 800a55c:	1949      	addeq	r1, r1, r5
 800a55e:	6021      	streq	r1, [r4, #0]
 800a560:	6054      	str	r4, [r2, #4]
 800a562:	e7ca      	b.n	800a4fa <_free_r+0x26>
 800a564:	b003      	add	sp, #12
 800a566:	bd30      	pop	{r4, r5, pc}
 800a568:	20000af0 	.word	0x20000af0

0800a56c <sbrk_aligned>:
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	4e0e      	ldr	r6, [pc, #56]	; (800a5a8 <sbrk_aligned+0x3c>)
 800a570:	460c      	mov	r4, r1
 800a572:	6831      	ldr	r1, [r6, #0]
 800a574:	4605      	mov	r5, r0
 800a576:	b911      	cbnz	r1, 800a57e <sbrk_aligned+0x12>
 800a578:	f000 f88c 	bl	800a694 <_sbrk_r>
 800a57c:	6030      	str	r0, [r6, #0]
 800a57e:	4621      	mov	r1, r4
 800a580:	4628      	mov	r0, r5
 800a582:	f000 f887 	bl	800a694 <_sbrk_r>
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	d00a      	beq.n	800a5a0 <sbrk_aligned+0x34>
 800a58a:	1cc4      	adds	r4, r0, #3
 800a58c:	f024 0403 	bic.w	r4, r4, #3
 800a590:	42a0      	cmp	r0, r4
 800a592:	d007      	beq.n	800a5a4 <sbrk_aligned+0x38>
 800a594:	1a21      	subs	r1, r4, r0
 800a596:	4628      	mov	r0, r5
 800a598:	f000 f87c 	bl	800a694 <_sbrk_r>
 800a59c:	3001      	adds	r0, #1
 800a59e:	d101      	bne.n	800a5a4 <sbrk_aligned+0x38>
 800a5a0:	f04f 34ff 	mov.w	r4, #4294967295
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}
 800a5a8:	20000af4 	.word	0x20000af4

0800a5ac <_malloc_r>:
 800a5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b0:	1ccd      	adds	r5, r1, #3
 800a5b2:	f025 0503 	bic.w	r5, r5, #3
 800a5b6:	3508      	adds	r5, #8
 800a5b8:	2d0c      	cmp	r5, #12
 800a5ba:	bf38      	it	cc
 800a5bc:	250c      	movcc	r5, #12
 800a5be:	2d00      	cmp	r5, #0
 800a5c0:	4607      	mov	r7, r0
 800a5c2:	db01      	blt.n	800a5c8 <_malloc_r+0x1c>
 800a5c4:	42a9      	cmp	r1, r5
 800a5c6:	d905      	bls.n	800a5d4 <_malloc_r+0x28>
 800a5c8:	230c      	movs	r3, #12
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	2600      	movs	r6, #0
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d4:	4e2e      	ldr	r6, [pc, #184]	; (800a690 <_malloc_r+0xe4>)
 800a5d6:	f000 f86d 	bl	800a6b4 <__malloc_lock>
 800a5da:	6833      	ldr	r3, [r6, #0]
 800a5dc:	461c      	mov	r4, r3
 800a5de:	bb34      	cbnz	r4, 800a62e <_malloc_r+0x82>
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	f7ff ffc2 	bl	800a56c <sbrk_aligned>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	d14d      	bne.n	800a68a <_malloc_r+0xde>
 800a5ee:	6834      	ldr	r4, [r6, #0]
 800a5f0:	4626      	mov	r6, r4
 800a5f2:	2e00      	cmp	r6, #0
 800a5f4:	d140      	bne.n	800a678 <_malloc_r+0xcc>
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	eb04 0803 	add.w	r8, r4, r3
 800a600:	f000 f848 	bl	800a694 <_sbrk_r>
 800a604:	4580      	cmp	r8, r0
 800a606:	d13a      	bne.n	800a67e <_malloc_r+0xd2>
 800a608:	6821      	ldr	r1, [r4, #0]
 800a60a:	3503      	adds	r5, #3
 800a60c:	1a6d      	subs	r5, r5, r1
 800a60e:	f025 0503 	bic.w	r5, r5, #3
 800a612:	3508      	adds	r5, #8
 800a614:	2d0c      	cmp	r5, #12
 800a616:	bf38      	it	cc
 800a618:	250c      	movcc	r5, #12
 800a61a:	4629      	mov	r1, r5
 800a61c:	4638      	mov	r0, r7
 800a61e:	f7ff ffa5 	bl	800a56c <sbrk_aligned>
 800a622:	3001      	adds	r0, #1
 800a624:	d02b      	beq.n	800a67e <_malloc_r+0xd2>
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	442b      	add	r3, r5
 800a62a:	6023      	str	r3, [r4, #0]
 800a62c:	e00e      	b.n	800a64c <_malloc_r+0xa0>
 800a62e:	6822      	ldr	r2, [r4, #0]
 800a630:	1b52      	subs	r2, r2, r5
 800a632:	d41e      	bmi.n	800a672 <_malloc_r+0xc6>
 800a634:	2a0b      	cmp	r2, #11
 800a636:	d916      	bls.n	800a666 <_malloc_r+0xba>
 800a638:	1961      	adds	r1, r4, r5
 800a63a:	42a3      	cmp	r3, r4
 800a63c:	6025      	str	r5, [r4, #0]
 800a63e:	bf18      	it	ne
 800a640:	6059      	strne	r1, [r3, #4]
 800a642:	6863      	ldr	r3, [r4, #4]
 800a644:	bf08      	it	eq
 800a646:	6031      	streq	r1, [r6, #0]
 800a648:	5162      	str	r2, [r4, r5]
 800a64a:	604b      	str	r3, [r1, #4]
 800a64c:	4638      	mov	r0, r7
 800a64e:	f104 060b 	add.w	r6, r4, #11
 800a652:	f000 f835 	bl	800a6c0 <__malloc_unlock>
 800a656:	f026 0607 	bic.w	r6, r6, #7
 800a65a:	1d23      	adds	r3, r4, #4
 800a65c:	1af2      	subs	r2, r6, r3
 800a65e:	d0b6      	beq.n	800a5ce <_malloc_r+0x22>
 800a660:	1b9b      	subs	r3, r3, r6
 800a662:	50a3      	str	r3, [r4, r2]
 800a664:	e7b3      	b.n	800a5ce <_malloc_r+0x22>
 800a666:	6862      	ldr	r2, [r4, #4]
 800a668:	42a3      	cmp	r3, r4
 800a66a:	bf0c      	ite	eq
 800a66c:	6032      	streq	r2, [r6, #0]
 800a66e:	605a      	strne	r2, [r3, #4]
 800a670:	e7ec      	b.n	800a64c <_malloc_r+0xa0>
 800a672:	4623      	mov	r3, r4
 800a674:	6864      	ldr	r4, [r4, #4]
 800a676:	e7b2      	b.n	800a5de <_malloc_r+0x32>
 800a678:	4634      	mov	r4, r6
 800a67a:	6876      	ldr	r6, [r6, #4]
 800a67c:	e7b9      	b.n	800a5f2 <_malloc_r+0x46>
 800a67e:	230c      	movs	r3, #12
 800a680:	603b      	str	r3, [r7, #0]
 800a682:	4638      	mov	r0, r7
 800a684:	f000 f81c 	bl	800a6c0 <__malloc_unlock>
 800a688:	e7a1      	b.n	800a5ce <_malloc_r+0x22>
 800a68a:	6025      	str	r5, [r4, #0]
 800a68c:	e7de      	b.n	800a64c <_malloc_r+0xa0>
 800a68e:	bf00      	nop
 800a690:	20000af0 	.word	0x20000af0

0800a694 <_sbrk_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4d06      	ldr	r5, [pc, #24]	; (800a6b0 <_sbrk_r+0x1c>)
 800a698:	2300      	movs	r3, #0
 800a69a:	4604      	mov	r4, r0
 800a69c:	4608      	mov	r0, r1
 800a69e:	602b      	str	r3, [r5, #0]
 800a6a0:	f7f6 fd82 	bl	80011a8 <_sbrk>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_sbrk_r+0x1a>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_sbrk_r+0x1a>
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	20000af8 	.word	0x20000af8

0800a6b4 <__malloc_lock>:
 800a6b4:	4801      	ldr	r0, [pc, #4]	; (800a6bc <__malloc_lock+0x8>)
 800a6b6:	f000 b809 	b.w	800a6cc <__retarget_lock_acquire_recursive>
 800a6ba:	bf00      	nop
 800a6bc:	20000afc 	.word	0x20000afc

0800a6c0 <__malloc_unlock>:
 800a6c0:	4801      	ldr	r0, [pc, #4]	; (800a6c8 <__malloc_unlock+0x8>)
 800a6c2:	f000 b804 	b.w	800a6ce <__retarget_lock_release_recursive>
 800a6c6:	bf00      	nop
 800a6c8:	20000afc 	.word	0x20000afc

0800a6cc <__retarget_lock_acquire_recursive>:
 800a6cc:	4770      	bx	lr

0800a6ce <__retarget_lock_release_recursive>:
 800a6ce:	4770      	bx	lr

0800a6d0 <_init>:
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	bf00      	nop
 800a6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d6:	bc08      	pop	{r3}
 800a6d8:	469e      	mov	lr, r3
 800a6da:	4770      	bx	lr

0800a6dc <_fini>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	bf00      	nop
 800a6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e2:	bc08      	pop	{r3}
 800a6e4:	469e      	mov	lr, r3
 800a6e6:	4770      	bx	lr
