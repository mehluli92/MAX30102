
tired.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800b22c  0800b22c  0001b22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b300  0800b300  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b300  0800b300  0001b300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b308  0800b308  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b308  0800b308  0001b308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b30c  0800b30c  0001b30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000fc0  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001054  20001054  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018055  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d1f  00000000  00000000  00038119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  0003be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001110  00000000  00000000  0003d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248da  00000000  00000000  0003e1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019eba  00000000  00000000  00062ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc085  00000000  00000000  0007c98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00148a11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f40  00000000  00000000  00148a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b214 	.word	0x0800b214

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	0800b214 	.word	0x0800b214

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b0b0      	sub	sp, #192	; 0xc0
 80004d0:	af04      	add	r7, sp, #16
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	603b      	str	r3, [r7, #0]
  int32_t n_peak_interval_sum;

  int32_t n_y_ac, n_x_ac;
  int32_t n_spo2_calc;
  int32_t n_y_dc_max, n_x_dc_max;
  int32_t n_y_dc_max_idx = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int32_t n_x_dc_max_idx = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int32_t an_ratio[5], n_ratio_average;
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80004ec:	2300      	movs	r3, #0
 80004ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80004f2:	e00f      	b.n	8000514 <maxim_heart_rate_and_oxygen_saturation+0x48>
 80004f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	68fa      	ldr	r2, [r7, #12]
 80004fc:	4413      	add	r3, r2
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000504:	4413      	add	r3, r2
 8000506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800050a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800050e:	3301      	adds	r3, #1
 8000510:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000514:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	429a      	cmp	r2, r3
 800051c:	dbea      	blt.n	80004f4 <maxim_heart_rate_and_oxygen_saturation+0x28>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000524:	fbb2 f3f3 	udiv	r3, r2, r3
 8000528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 800052c:	2300      	movs	r3, #0
 800052e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000532:	e013      	b.n	800055c <maxim_heart_rate_and_oxygen_saturation+0x90>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ;
 8000534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	4413      	add	r3, r2
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	4619      	mov	r1, r3
 8000548:	4ab4      	ldr	r2, [pc, #720]	; (800081c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 800054a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800054e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 8000552:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000556:	3301      	adds	r3, #1
 8000558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800055c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	429a      	cmp	r2, r3
 8000564:	dbe6      	blt.n	8000534 <maxim_heart_rate_and_oxygen_saturation+0x68>

  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8000566:	2300      	movs	r3, #0
 8000568:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800056c:	e028      	b.n	80005c0 <maxim_heart_rate_and_oxygen_saturation+0xf4>
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;
 800056e:	4aab      	ldr	r2, [pc, #684]	; (800081c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8000570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000574:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800057c:	3301      	adds	r3, #1
 800057e:	49a7      	ldr	r1, [pc, #668]	; (800081c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8000580:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000584:	441a      	add	r2, r3
 8000586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800058a:	3302      	adds	r3, #2
 800058c:	49a3      	ldr	r1, [pc, #652]	; (800081c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 800058e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000592:	441a      	add	r2, r3
 8000594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000598:	3303      	adds	r3, #3
 800059a:	49a0      	ldr	r1, [pc, #640]	; (800081c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 800059c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005a0:	4413      	add	r3, r2
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	da00      	bge.n	80005a8 <maxim_heart_rate_and_oxygen_saturation+0xdc>
 80005a6:	3303      	adds	r3, #3
 80005a8:	109b      	asrs	r3, r3, #2
 80005aa:	4619      	mov	r1, r3
 80005ac:	4a9b      	ldr	r2, [pc, #620]	; (800081c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80005ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80005b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005ba:	3301      	adds	r3, #1
 80005bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80005c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005c4:	2b5f      	cmp	r3, #95	; 0x5f
 80005c6:	ddd2      	ble.n	800056e <maxim_heart_rate_and_oxygen_saturation+0xa2>
  }
  // calculate threshold
  n_th1=0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80005ce:	2300      	movs	r3, #0
 80005d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80005d4:	e00e      	b.n	80005f4 <maxim_heart_rate_and_oxygen_saturation+0x128>
    n_th1 +=  an_x[k];
 80005d6:	4a91      	ldr	r2, [pc, #580]	; (800081c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80005d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80005e4:	4413      	add	r3, r2
 80005e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80005ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005ee:	3301      	adds	r3, #1
 80005f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80005f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005f8:	2b63      	cmp	r3, #99	; 0x63
 80005fa:	ddec      	ble.n	80005d6 <maxim_heart_rate_and_oxygen_saturation+0x10a>
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
 80005fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000600:	4a87      	ldr	r2, [pc, #540]	; (8000820 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8000602:	fb82 1203 	smull	r1, r2, r2, r3
 8000606:	1152      	asrs	r2, r2, #5
 8000608:	17db      	asrs	r3, r3, #31
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if( n_th1<30) n_th1=30; // min allowed
 8000610:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000614:	2b1d      	cmp	r3, #29
 8000616:	dc02      	bgt.n	800061e <maxim_heart_rate_and_oxygen_saturation+0x152>
 8000618:	231e      	movs	r3, #30
 800061a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if( n_th1>60) n_th1=60; // max allowed
 800061e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000622:	2b3c      	cmp	r3, #60	; 0x3c
 8000624:	dd02      	ble.n	800062c <maxim_heart_rate_and_oxygen_saturation+0x160>
 8000626:	233c      	movs	r3, #60	; 0x3c
 8000628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000632:	e00c      	b.n	800064e <maxim_heart_rate_and_oxygen_saturation+0x182>
 8000634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	33b0      	adds	r3, #176	; 0xb0
 800063c:	443b      	add	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	f843 2c88 	str.w	r2, [r3, #-136]
 8000644:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000648:	3301      	adds	r3, #1
 800064a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800064e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000652:	2b0e      	cmp	r3, #14
 8000654:	ddee      	ble.n	8000634 <maxim_heart_rate_and_oxygen_saturation+0x168>
  // since we flipped signal, we use peak detector as valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks
 8000656:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800065a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800065e:	230f      	movs	r3, #15
 8000660:	9302      	str	r3, [sp, #8]
 8000662:	2304      	movs	r3, #4
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	4a6b      	ldr	r2, [pc, #428]	; (800081c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8000670:	f000 fa36 	bl	8000ae0 <maxim_find_peaks>
  n_peak_interval_sum =0;
 8000674:	2300      	movs	r3, #0
 8000676:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (n_npks>=2){
 800067a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800067c:	2b01      	cmp	r3, #1
 800067e:	dd38      	ble.n	80006f2 <maxim_heart_rate_and_oxygen_saturation+0x226>
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 8000680:	2301      	movs	r3, #1
 8000682:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000686:	e019      	b.n	80006bc <maxim_heart_rate_and_oxygen_saturation+0x1f0>
 8000688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	33b0      	adds	r3, #176	; 0xb0
 8000690:	443b      	add	r3, r7
 8000692:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8000696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800069a:	3b01      	subs	r3, #1
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	33b0      	adds	r3, #176	; 0xb0
 80006a0:	443b      	add	r3, r7
 80006a2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80006ac:	4413      	add	r3, r2
 80006ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80006b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006b6:	3301      	adds	r3, #1
 80006b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80006bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80006c2:	429a      	cmp	r2, r3
 80006c4:	dbe0      	blt.n	8000688 <maxim_heart_rate_and_oxygen_saturation+0x1bc>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 80006c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006c8:	3b01      	subs	r3, #1
 80006ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80006ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80006d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 80006d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006de:	fb92 f2f3 	sdiv	r2, r2, r3
 80006e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006e6:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 80006e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e007      	b.n	8000702 <maxim_heart_rate_and_oxygen_saturation+0x236>
  }
  else  {
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 80006f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006f6:	4a4b      	ldr	r2, [pc, #300]	; (8000824 <maxim_heart_rate_and_oxygen_saturation+0x358>)
 80006f8:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 80006fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8000702:	2300      	movs	r3, #0
 8000704:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000708:	e01c      	b.n	8000744 <maxim_heart_rate_and_oxygen_saturation+0x278>
      an_x[k] =  pun_ir_buffer[k] ;
 800070a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	4413      	add	r3, r2
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	4a40      	ldr	r2, [pc, #256]	; (800081c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 800071a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800071e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      an_y[k] =  pun_red_buffer[k] ;
 8000722:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4619      	mov	r1, r3
 8000730:	4a3d      	ldr	r2, [pc, #244]	; (8000828 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 8000732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000736:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 800073a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800073e:	3301      	adds	r3, #1
 8000740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000744:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	429a      	cmp	r2, r3
 800074c:	dbdd      	blt.n	800070a <maxim_heart_rate_and_oxygen_saturation+0x23e>
  }

  // find precise min near an_ir_valley_locs
  n_exact_ir_valley_locs_count =n_npks;
 800074e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
  //finding AC/DC maximum of raw

  n_ratio_average =0;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  n_i_ratio_count = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for(k=0; k< 5; k++) an_ratio[k]=0;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000766:	e00c      	b.n	8000782 <maxim_heart_rate_and_oxygen_saturation+0x2b6>
 8000768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	33b0      	adds	r3, #176	; 0xb0
 8000770:	443b      	add	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	f843 2c9c 	str.w	r2, [r3, #-156]
 8000778:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800077c:	3301      	adds	r3, #1
 800077e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000782:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000786:	2b04      	cmp	r3, #4
 8000788:	ddee      	ble.n	8000768 <maxim_heart_rate_and_oxygen_saturation+0x29c>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 800078a:	2300      	movs	r3, #0
 800078c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000790:	e015      	b.n	80007be <maxim_heart_rate_and_oxygen_saturation+0x2f2>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 8000792:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	33b0      	adds	r3, #176	; 0xb0
 800079a:	443b      	add	r3, r7
 800079c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80007a0:	2b64      	cmp	r3, #100	; 0x64
 80007a2:	dd07      	ble.n	80007b4 <maxim_heart_rate_and_oxygen_saturation+0x2e8>
      *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	4a1f      	ldr	r2, [pc, #124]	; (8000824 <maxim_heart_rate_and_oxygen_saturation+0x358>)
 80007a8:	601a      	str	r2, [r3, #0]
      *pch_spo2_valid  = 0;
 80007aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e18a      	b.n	8000aca <maxim_heart_rate_and_oxygen_saturation+0x5fe>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80007b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007b8:	3301      	adds	r3, #1
 80007ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80007be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80007c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dbe3      	blt.n	8000792 <maxim_heart_rate_and_oxygen_saturation+0x2c6>
      return;
    }
  }
  // find max between two valley locations
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80007d0:	e129      	b.n	8000a26 <maxim_heart_rate_and_oxygen_saturation+0x55a>
    n_y_dc_max= -16777216 ;
 80007d2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80007d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    n_x_dc_max= -16777216;
 80007da:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80007de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 80007e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007e6:	3301      	adds	r3, #1
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	33b0      	adds	r3, #176	; 0xb0
 80007ec:	443b      	add	r3, r7
 80007ee:	f853 2c88 	ldr.w	r2, [r3, #-136]
 80007f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	33b0      	adds	r3, #176	; 0xb0
 80007fa:	443b      	add	r3, r7
 80007fc:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	2b03      	cmp	r3, #3
 8000804:	f340 810a 	ble.w	8000a1c <maxim_heart_rate_and_oxygen_saturation+0x550>
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8000808:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	33b0      	adds	r3, #176	; 0xb0
 8000810:	443b      	add	r3, r7
 8000812:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800081a:	e034      	b.n	8000886 <maxim_heart_rate_and_oxygen_saturation+0x3ba>
 800081c:	200000b0 	.word	0x200000b0
 8000820:	51eb851f 	.word	0x51eb851f
 8000824:	fffffc19 	.word	0xfffffc19
 8000828:	20000240 	.word	0x20000240
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 800082c:	4aa8      	ldr	r2, [pc, #672]	; (8000ad0 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 800082e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000836:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800083a:	429a      	cmp	r2, r3
 800083c:	da0a      	bge.n	8000854 <maxim_heart_rate_and_oxygen_saturation+0x388>
 800083e:	4aa4      	ldr	r2, [pc, #656]	; (8000ad0 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8000840:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000848:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800084c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 8000854:	4a9f      	ldr	r2, [pc, #636]	; (8000ad4 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8000856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800085a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800085e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000862:	429a      	cmp	r2, r3
 8000864:	da0a      	bge.n	800087c <maxim_heart_rate_and_oxygen_saturation+0x3b0>
 8000866:	4a9b      	ldr	r2, [pc, #620]	; (8000ad4 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8000868:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800086c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000870:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000874:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000878:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 800087c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000880:	3301      	adds	r3, #1
 8000882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800088a:	3301      	adds	r3, #1
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	33b0      	adds	r3, #176	; 0xb0
 8000890:	443b      	add	r3, r7
 8000892:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000896:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800089a:	429a      	cmp	r2, r3
 800089c:	dbc6      	blt.n	800082c <maxim_heart_rate_and_oxygen_saturation+0x360>
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 800089e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008a2:	3301      	adds	r3, #1
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	33b0      	adds	r3, #176	; 0xb0
 80008a8:	443b      	add	r3, r7
 80008aa:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80008ae:	4a89      	ldr	r2, [pc, #548]	; (8000ad4 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 80008b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	33b0      	adds	r3, #176	; 0xb0
 80008bc:	443b      	add	r3, r7
 80008be:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80008c2:	4984      	ldr	r1, [pc, #528]	; (8000ad4 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 80008c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008c8:	1ad2      	subs	r2, r2, r3
 80008ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	33b0      	adds	r3, #176	; 0xb0
 80008d2:	443b      	add	r3, r7
 80008d4:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80008d8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80008dc:	1acb      	subs	r3, r1, r3
 80008de:	fb02 f303 	mul.w	r3, r2, r3
 80008e2:	677b      	str	r3, [r7, #116]	; 0x74
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ;
 80008e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	33b0      	adds	r3, #176	; 0xb0
 80008ec:	443b      	add	r3, r7
 80008ee:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80008f2:	4a78      	ldr	r2, [pc, #480]	; (8000ad4 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 80008f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008fc:	3301      	adds	r3, #1
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	33b0      	adds	r3, #176	; 0xb0
 8000902:	443b      	add	r3, r7
 8000904:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8000908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	33b0      	adds	r3, #176	; 0xb0
 8000910:	443b      	add	r3, r7
 8000912:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000916:	1acb      	subs	r3, r1, r3
 8000918:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800091a:	fb91 f3f3 	sdiv	r3, r1, r3
 800091e:	4413      	add	r3, r2
 8000920:	677b      	str	r3, [r7, #116]	; 0x74
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 8000922:	4a6c      	ldr	r2, [pc, #432]	; (8000ad4 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8000924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000928:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800092c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	677b      	str	r3, [r7, #116]	; 0x74
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 8000932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000936:	3301      	adds	r3, #1
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	33b0      	adds	r3, #176	; 0xb0
 800093c:	443b      	add	r3, r7
 800093e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000942:	4a63      	ldr	r2, [pc, #396]	; (8000ad0 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8000944:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	33b0      	adds	r3, #176	; 0xb0
 8000950:	443b      	add	r3, r7
 8000952:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000956:	495e      	ldr	r1, [pc, #376]	; (8000ad0 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8000958:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800095c:	1ad2      	subs	r2, r2, r3
 800095e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	33b0      	adds	r3, #176	; 0xb0
 8000966:	443b      	add	r3, r7
 8000968:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800096c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000970:	1acb      	subs	r3, r1, r3
 8000972:	fb02 f303 	mul.w	r3, r2, r3
 8000976:	673b      	str	r3, [r7, #112]	; 0x70
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]);
 8000978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	33b0      	adds	r3, #176	; 0xb0
 8000980:	443b      	add	r3, r7
 8000982:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000986:	4a52      	ldr	r2, [pc, #328]	; (8000ad0 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8000988:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800098c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000990:	3301      	adds	r3, #1
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	33b0      	adds	r3, #176	; 0xb0
 8000996:	443b      	add	r3, r7
 8000998:	f853 1c88 	ldr.w	r1, [r3, #-136]
 800099c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	33b0      	adds	r3, #176	; 0xb0
 80009a4:	443b      	add	r3, r7
 80009a6:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80009aa:	1acb      	subs	r3, r1, r3
 80009ac:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80009ae:	fb91 f3f3 	sdiv	r3, r1, r3
 80009b2:	4413      	add	r3, r2
 80009b4:	673b      	str	r3, [r7, #112]	; 0x70
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 80009b6:	4a46      	ldr	r2, [pc, #280]	; (8000ad0 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 80009b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	673b      	str	r3, [r7, #112]	; 0x70
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80009c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80009cc:	fb02 f303 	mul.w	r3, r2, r3
 80009d0:	11db      	asrs	r3, r3, #7
 80009d2:	66fb      	str	r3, [r7, #108]	; 0x6c
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80009d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	11db      	asrs	r3, r3, #7
 80009e0:	66bb      	str	r3, [r7, #104]	; 0x68
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80009e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	dd19      	ble.n	8000a1c <maxim_heart_rate_and_oxygen_saturation+0x550>
 80009e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	dc15      	bgt.n	8000a1c <maxim_heart_rate_and_oxygen_saturation+0x550>
 80009f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d012      	beq.n	8000a1c <maxim_heart_rate_and_oxygen_saturation+0x550>
      {
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80009f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009f8:	2264      	movs	r2, #100	; 0x64
 80009fa:	fb03 f202 	mul.w	r2, r3, r2
 80009fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a00:	fb92 f2f3 	sdiv	r2, r2, r3
 8000a04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	33b0      	adds	r3, #176	; 0xb0
 8000a0c:	443b      	add	r3, r7
 8000a0e:	f843 2c9c 	str.w	r2, [r3, #-156]
        n_i_ratio_count++;
 8000a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a16:	3301      	adds	r3, #1
 8000a18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8000a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a20:	3301      	adds	r3, #1
 8000a22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000a26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000a30:	429a      	cmp	r2, r3
 8000a32:	f6ff aece 	blt.w	80007d2 <maxim_heart_rate_and_oxygen_saturation+0x306>
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f943 	bl	8000cca <maxim_sort_ascend>
  n_middle_idx= n_i_ratio_count/2;
 8000a44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a48:	0fda      	lsrs	r2, r3, #31
 8000a4a:	4413      	add	r3, r2
 8000a4c:	105b      	asrs	r3, r3, #1
 8000a4e:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (n_middle_idx >1)
 8000a50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	dd13      	ble.n	8000a7e <maxim_heart_rate_and_oxygen_saturation+0x5b2>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8000a56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	33b0      	adds	r3, #176	; 0xb0
 8000a5e:	443b      	add	r3, r7
 8000a60:	f853 2c9c 	ldr.w	r2, [r3, #-156]
 8000a64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	33b0      	adds	r3, #176	; 0xb0
 8000a6a:	443b      	add	r3, r7
 8000a6c:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8000a70:	4413      	add	r3, r2
 8000a72:	0fda      	lsrs	r2, r3, #31
 8000a74:	4413      	add	r3, r2
 8000a76:	105b      	asrs	r3, r3, #1
 8000a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000a7c:	e007      	b.n	8000a8e <maxim_heart_rate_and_oxygen_saturation+0x5c2>
  else
    n_ratio_average = an_ratio[n_middle_idx ];
 8000a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	33b0      	adds	r3, #176	; 0xb0
 8000a84:	443b      	add	r3, r7
 8000a86:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8000a8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  if( n_ratio_average>2 && n_ratio_average <184){
 8000a8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	dd12      	ble.n	8000abc <maxim_heart_rate_and_oxygen_saturation+0x5f0>
 8000a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a9a:	2bb7      	cmp	r3, #183	; 0xb7
 8000a9c:	dc0e      	bgt.n	8000abc <maxim_heart_rate_and_oxygen_saturation+0x5f0>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8000aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000aa4:	4413      	add	r3, r2
 8000aa6:	f993 3000 	ldrsb.w	r3, [r3]
 8000aaa:	67bb      	str	r3, [r7, #120]	; 0x78
    *pn_spo2 = n_spo2_calc ;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000ab0:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 8000ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
 8000aba:	e006      	b.n	8000aca <maxim_heart_rate_and_oxygen_saturation+0x5fe>
  }
  else{
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	4a07      	ldr	r2, [pc, #28]	; (8000adc <maxim_heart_rate_and_oxygen_saturation+0x610>)
 8000ac0:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8000ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
  }
}
 8000aca:	37b0      	adds	r7, #176	; 0xb0
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200000b0 	.word	0x200000b0
 8000ad4:	20000240 	.word	0x20000240
 8000ad8:	0800b230 	.word	0x0800b230
 8000adc:	fffffc19 	.word	0xfffffc19

08000ae0 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	603b      	str	r3, [r7, #0]
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	68b9      	ldr	r1, [r7, #8]
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f000 f812 	bl	8000b22 <maxim_peaks_above_min_height>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f000 f880 	bl	8000c0a <maxim_remove_close_peaks>
  *n_npks = min( *n_npks, n_max_num );
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	6a3b      	ldr	r3, [r7, #32]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	bfa8      	it	ge
 8000b14:	461a      	movge	r2, r3
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	601a      	str	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8000b22:	b480      	push	{r7}
 8000b24:	b087      	sub	sp, #28
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	603b      	str	r3, [r7, #0]
  int32_t i = 1, n_width;
 8000b30:	2301      	movs	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
  *n_npks = 0;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]

  while (i < n_size-1){
 8000b3a:	e05a      	b.n	8000bf2 <maxim_peaks_above_min_height+0xd0>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6a3a      	ldr	r2, [r7, #32]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	da4f      	bge.n	8000bec <maxim_peaks_above_min_height+0xca>
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	6879      	ldr	r1, [r7, #4]
 8000b62:	440b      	add	r3, r1
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	dd40      	ble.n	8000bec <maxim_peaks_above_min_height+0xca>
      n_width = 1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8000b6e:	e002      	b.n	8000b76 <maxim_peaks_above_min_height+0x54>
        n_width++;
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	3301      	adds	r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	dd0d      	ble.n	8000b9e <maxim_peaks_above_min_height+0x7c>
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	6979      	ldr	r1, [r7, #20]
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	440b      	add	r3, r1
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	440b      	add	r3, r1
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d0e8      	beq.n	8000b70 <maxim_peaks_above_min_height+0x4e>
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	6979      	ldr	r1, [r7, #20]
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	440b      	add	r3, r1
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	440b      	add	r3, r1
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	dd13      	ble.n	8000be2 <maxim_peaks_above_min_height+0xc0>
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b0e      	cmp	r3, #14
 8000bc0:	dc0f      	bgt.n	8000be2 <maxim_peaks_above_min_height+0xc0>
        pn_locs[(*n_npks)++] = i;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	1c59      	adds	r1, r3, #1
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	6011      	str	r1, [r2, #0]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	601a      	str	r2, [r3, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	4413      	add	r3, r2
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	e003      	b.n	8000bea <maxim_peaks_above_min_height+0xc8>
      }
      else
        i += n_width;
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4413      	add	r3, r2
 8000be8:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8000bea:	e002      	b.n	8000bf2 <maxim_peaks_above_min_height+0xd0>
    }
    else
      i++;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
  while (i < n_size-1){
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	db9f      	blt.n	8000b3c <maxim_peaks_above_min_height+0x1a>
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	371c      	adds	r7, #28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b088      	sub	sp, #32
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	603b      	str	r3, [r7, #0]

  int32_t i, j, n_old_npks, n_dist;

  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	68f9      	ldr	r1, [r7, #12]
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 f895 	bl	8000d50 <maxim_sort_indices_descend>

  for ( i = -1; i < *pn_npks; i++ ){
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	e03e      	b.n	8000cac <maxim_remove_close_peaks+0xa2>
    n_old_npks = *pn_npks;
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	617b      	str	r3, [r7, #20]
    *pn_npks = i+1;
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	e02c      	b.n	8000c9e <maxim_remove_close_peaks+0x94>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c54:	d005      	beq.n	8000c62 <maxim_remove_close_peaks+0x58>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	68f9      	ldr	r1, [r7, #12]
 8000c5c:	440b      	add	r3, r1
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	e001      	b.n	8000c66 <maxim_remove_close_peaks+0x5c>
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	613b      	str	r3, [r7, #16]
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	dc04      	bgt.n	8000c7c <maxim_remove_close_peaks+0x72>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	425b      	negs	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	da0d      	bge.n	8000c98 <maxim_remove_close_peaks+0x8e>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	441a      	add	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1c58      	adds	r0, r3, #1
 8000c8a:	68b9      	ldr	r1, [r7, #8]
 8000c8c:	6008      	str	r0, [r1, #0]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	68f9      	ldr	r1, [r7, #12]
 8000c92:	440b      	add	r3, r1
 8000c94:	6812      	ldr	r2, [r2, #0]
 8000c96:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dbce      	blt.n	8000c44 <maxim_remove_close_peaks+0x3a>
  for ( i = -1; i < *pn_npks; i++ ){
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	61fb      	str	r3, [r7, #28]
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	69fa      	ldr	r2, [r7, #28]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	dbbb      	blt.n	8000c2e <maxim_remove_close_peaks+0x24>
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f000 f804 	bl	8000cca <maxim_sort_ascend>
}
 8000cc2:	bf00      	nop
 8000cc4:	3720      	adds	r7, #32
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b087      	sub	sp, #28
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e02f      	b.n	8000d3a <maxim_sort_ascend+0x70>
    n_temp = pn_x[i];
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	e00f      	b.n	8000d0c <maxim_sort_ascend+0x42>
        pn_x[j] = pn_x[j-1];
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	441a      	add	r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	440b      	add	r3, r1
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	dd0a      	ble.n	8000d28 <maxim_sort_ascend+0x5e>
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4413      	add	r3, r2
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dbe1      	blt.n	8000cec <maxim_sort_ascend+0x22>
    pn_x[j] = n_temp;
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	4413      	add	r3, r2
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3301      	adds	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	dbcb      	blt.n	8000cda <maxim_sort_ascend+0x10>
  }
}
 8000d42:	bf00      	nop
 8000d44:	bf00      	nop
 8000d46:	371c      	adds	r7, #28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	e037      	b.n	8000dd2 <maxim_sort_indices_descend+0x82>
    n_temp = pn_indx[i];
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	4413      	add	r3, r2
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	617b      	str	r3, [r7, #20]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	e00f      	b.n	8000d94 <maxim_sort_indices_descend+0x44>
      pn_indx[j] = pn_indx[j-1];
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	441a      	add	r2, r3
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	440b      	add	r3, r1
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	dd12      	ble.n	8000dc0 <maxim_sort_indices_descend+0x70>
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4413      	add	r3, r2
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000daa:	3b01      	subs	r3, #1
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	440b      	add	r3, r1
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	68f9      	ldr	r1, [r7, #12]
 8000db8:	440b      	add	r3, r1
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dcd9      	bgt.n	8000d74 <maxim_sort_indices_descend+0x24>
    pn_indx[j] = n_temp;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	dbc3      	blt.n	8000d62 <maxim_sort_indices_descend+0x12>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	3724      	adds	r7, #36	; 0x24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dee:	f000 ffef 	bl	8001dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df2:	f000 f955 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df6:	f000 fa7f 	bl	80012f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dfa:	f000 f9bb 	bl	8001174 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dfe:	f000 fa15 	bl	800122c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e02:	f000 fa43 	bl	800128c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000e06:	f009 fdaf 	bl	800a968 <MX_USB_HOST_Init>
  MX_I2C3_Init();
 8000e0a:	f000 f9e1 	bl	80011d0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  config_max30102_sensor();
 8000e0e:	f000 fb71 	bl	80014f4 <config_max30102_sensor>
  initiate_max30102_temp_measurement();
 8000e12:	f000 fb93 	bl	800153c <initiate_max30102_temp_measurement>



 	//calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
 	maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 8000e16:	4b97      	ldr	r3, [pc, #604]	; (8001074 <main+0x28c>)
 8000e18:	6819      	ldr	r1, [r3, #0]
 8000e1a:	4b97      	ldr	r3, [pc, #604]	; (8001078 <main+0x290>)
 8000e1c:	9302      	str	r3, [sp, #8]
 8000e1e:	4b97      	ldr	r3, [pc, #604]	; (800107c <main+0x294>)
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	4b97      	ldr	r3, [pc, #604]	; (8001080 <main+0x298>)
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	4b97      	ldr	r3, [pc, #604]	; (8001084 <main+0x29c>)
 8000e28:	4a97      	ldr	r2, [pc, #604]	; (8001088 <main+0x2a0>)
 8000e2a:	4898      	ldr	r0, [pc, #608]	; (800108c <main+0x2a4>)
 8000e2c:	f7ff fb4e 	bl	80004cc <maxim_heart_rate_and_oxygen_saturation>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e30:	f009 fdc0 	bl	800a9b4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */


    if(initialReading == 0)
 8000e34:	4b96      	ldr	r3, [pc, #600]	; (8001090 <main+0x2a8>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f040 80b4 	bne.w	8000fa6 <main+0x1be>
    {
    	  for(uint8_t j = 0; j<3; j++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	e0a9      	b.n	8000f98 <main+0x1b0>
    	  {
    		  HAL_Delay(30);
 8000e44:	201e      	movs	r0, #30
 8000e46:	f001 f835 	bl	8001eb4 <HAL_Delay>

    		  //first sample
    		  if(j == 0)
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d123      	bne.n	8000e98 <main+0xb0>
    		  {
    			  max30102_interrupt_handler(&max);
 8000e50:	4890      	ldr	r0, [pc, #576]	; (8001094 <main+0x2ac>)
 8000e52:	f000 fcad 	bl	80017b0 <max30102_interrupt_handler>
    			  if(max._ir_samples[25] == 0) j=0;
 8000e56:	4b8f      	ldr	r3, [pc, #572]	; (8001094 <main+0x2ac>)
 8000e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <main+0x7a>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]
    			 //store first 25 samples and store in buffer
    			  for(uint8_t x = 0; x<=24; x++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	71bb      	strb	r3, [r7, #6]
 8000e66:	e014      	b.n	8000e92 <main+0xaa>
    			  {
    				  irBuffer[x] = max._ir_samples[x];
 8000e68:	79ba      	ldrb	r2, [r7, #6]
 8000e6a:	79bb      	ldrb	r3, [r7, #6]
 8000e6c:	4989      	ldr	r1, [pc, #548]	; (8001094 <main+0x2ac>)
 8000e6e:	3202      	adds	r2, #2
 8000e70:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e74:	4985      	ldr	r1, [pc, #532]	; (800108c <main+0x2a4>)
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    				  redBuffer[x] = max._red_samples[x];
 8000e7a:	79ba      	ldrb	r2, [r7, #6]
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	4985      	ldr	r1, [pc, #532]	; (8001094 <main+0x2ac>)
 8000e80:	3222      	adds	r2, #34	; 0x22
 8000e82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e86:	4980      	ldr	r1, [pc, #512]	; (8001088 <main+0x2a0>)
 8000e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    			  for(uint8_t x = 0; x<=24; x++)
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	71bb      	strb	r3, [r7, #6]
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	2b18      	cmp	r3, #24
 8000e96:	d9e7      	bls.n	8000e68 <main+0x80>
    			  }
    		  }
    		  //second sample
    		  if(j == 1)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d129      	bne.n	8000ef2 <main+0x10a>
    		  {
    			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea2:	487d      	ldr	r0, [pc, #500]	; (8001098 <main+0x2b0>)
 8000ea4:	f001 fb21 	bl	80024ea <HAL_GPIO_TogglePin>
    			  if(max._ir_samples[25] == 0) j=1;
 8000ea8:	4b7a      	ldr	r3, [pc, #488]	; (8001094 <main+0x2ac>)
 8000eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <main+0xcc>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	71fb      	strb	r3, [r7, #7]
    			  //store second 25 samples in buffer position 25-49
    			  for(uint8_t x = 25; x<=49; x++)
 8000eb4:	2319      	movs	r3, #25
 8000eb6:	717b      	strb	r3, [r7, #5]
 8000eb8:	e018      	b.n	8000eec <main+0x104>
    			  {
    				  irBuffer[x] = max._ir_samples[x-25];
 8000eba:	797b      	ldrb	r3, [r7, #5]
 8000ebc:	f1a3 0219 	sub.w	r2, r3, #25
 8000ec0:	797b      	ldrb	r3, [r7, #5]
 8000ec2:	4974      	ldr	r1, [pc, #464]	; (8001094 <main+0x2ac>)
 8000ec4:	3202      	adds	r2, #2
 8000ec6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000eca:	4970      	ldr	r1, [pc, #448]	; (800108c <main+0x2a4>)
 8000ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    				  redBuffer[x] = max._red_samples[x-25];
 8000ed0:	797b      	ldrb	r3, [r7, #5]
 8000ed2:	f1a3 0219 	sub.w	r2, r3, #25
 8000ed6:	797b      	ldrb	r3, [r7, #5]
 8000ed8:	496e      	ldr	r1, [pc, #440]	; (8001094 <main+0x2ac>)
 8000eda:	3222      	adds	r2, #34	; 0x22
 8000edc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ee0:	4969      	ldr	r1, [pc, #420]	; (8001088 <main+0x2a0>)
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    			  for(uint8_t x = 25; x<=49; x++)
 8000ee6:	797b      	ldrb	r3, [r7, #5]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	717b      	strb	r3, [r7, #5]
 8000eec:	797b      	ldrb	r3, [r7, #5]
 8000eee:	2b31      	cmp	r3, #49	; 0x31
 8000ef0:	d9e3      	bls.n	8000eba <main+0xd2>
    			  }
    		  }
    		  //third sample
    		  if(j==2)
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d124      	bne.n	8000f42 <main+0x15a>
    		  {
    			  if(max._ir_samples[25] == 0) j=2;
 8000ef8:	4b66      	ldr	r3, [pc, #408]	; (8001094 <main+0x2ac>)
 8000efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <main+0x11c>
 8000f00:	2302      	movs	r3, #2
 8000f02:	71fb      	strb	r3, [r7, #7]
    			  //store samples in buffer position 50-74
    			  for(uint8_t x = 50; x<=74; x++)
 8000f04:	2332      	movs	r3, #50	; 0x32
 8000f06:	713b      	strb	r3, [r7, #4]
 8000f08:	e018      	b.n	8000f3c <main+0x154>
    			  {
    				  irBuffer[x] = max._ir_samples[x-50];
 8000f0a:	793b      	ldrb	r3, [r7, #4]
 8000f0c:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8000f10:	793b      	ldrb	r3, [r7, #4]
 8000f12:	4960      	ldr	r1, [pc, #384]	; (8001094 <main+0x2ac>)
 8000f14:	3202      	adds	r2, #2
 8000f16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f1a:	495c      	ldr	r1, [pc, #368]	; (800108c <main+0x2a4>)
 8000f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    				  redBuffer[x] = max._red_samples[x-50];
 8000f20:	793b      	ldrb	r3, [r7, #4]
 8000f22:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8000f26:	793b      	ldrb	r3, [r7, #4]
 8000f28:	495a      	ldr	r1, [pc, #360]	; (8001094 <main+0x2ac>)
 8000f2a:	3222      	adds	r2, #34	; 0x22
 8000f2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f30:	4955      	ldr	r1, [pc, #340]	; (8001088 <main+0x2a0>)
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    			  for(uint8_t x = 50; x<=74; x++)
 8000f36:	793b      	ldrb	r3, [r7, #4]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	713b      	strb	r3, [r7, #4]
 8000f3c:	793b      	ldrb	r3, [r7, #4]
 8000f3e:	2b4a      	cmp	r3, #74	; 0x4a
 8000f40:	d9e3      	bls.n	8000f0a <main+0x122>
    			  }
    		  }
    		  //forth sample
    		  if(j==3)
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d124      	bne.n	8000f92 <main+0x1aa>
    		  {
    			  if(max._ir_samples[25] == 0) j=3;
 8000f48:	4b52      	ldr	r3, [pc, #328]	; (8001094 <main+0x2ac>)
 8000f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <main+0x16c>
 8000f50:	2303      	movs	r3, #3
 8000f52:	71fb      	strb	r3, [r7, #7]
    			  //store samples in buffer position 74-99
    			  for(uint8_t x=74; x<=99; x++)
 8000f54:	234a      	movs	r3, #74	; 0x4a
 8000f56:	70fb      	strb	r3, [r7, #3]
 8000f58:	e018      	b.n	8000f8c <main+0x1a4>
    			  {
    				  irBuffer[x] = max._ir_samples[x-74];
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	f1a3 024a 	sub.w	r2, r3, #74	; 0x4a
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	494c      	ldr	r1, [pc, #304]	; (8001094 <main+0x2ac>)
 8000f64:	3202      	adds	r2, #2
 8000f66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f6a:	4948      	ldr	r1, [pc, #288]	; (800108c <main+0x2a4>)
 8000f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    				  redBuffer[x] = max._red_samples[x-74];
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	f1a3 024a 	sub.w	r2, r3, #74	; 0x4a
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	4946      	ldr	r1, [pc, #280]	; (8001094 <main+0x2ac>)
 8000f7a:	3222      	adds	r2, #34	; 0x22
 8000f7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f80:	4941      	ldr	r1, [pc, #260]	; (8001088 <main+0x2a0>)
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    			  for(uint8_t x=74; x<=99; x++)
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	70fb      	strb	r3, [r7, #3]
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b63      	cmp	r3, #99	; 0x63
 8000f90:	d9e3      	bls.n	8000f5a <main+0x172>
    	  for(uint8_t j = 0; j<3; j++)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	3301      	adds	r3, #1
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	f67f af52 	bls.w	8000e44 <main+0x5c>
    			  }
    		  }

    	  }
    	  initialReading = 1;
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <main+0x2a8>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
    }

  //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
      for (uint8_t i = 25; i < 100; i++)
 8000fa6:	2319      	movs	r3, #25
 8000fa8:	70bb      	strb	r3, [r7, #2]
 8000faa:	e014      	b.n	8000fd6 <main+0x1ee>
      {
        redBuffer[i - 25] = redBuffer[i];
 8000fac:	78ba      	ldrb	r2, [r7, #2]
 8000fae:	78bb      	ldrb	r3, [r7, #2]
 8000fb0:	3b19      	subs	r3, #25
 8000fb2:	4935      	ldr	r1, [pc, #212]	; (8001088 <main+0x2a0>)
 8000fb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fb8:	4933      	ldr	r1, [pc, #204]	; (8001088 <main+0x2a0>)
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        irBuffer[i - 25] = irBuffer[i];
 8000fbe:	78ba      	ldrb	r2, [r7, #2]
 8000fc0:	78bb      	ldrb	r3, [r7, #2]
 8000fc2:	3b19      	subs	r3, #25
 8000fc4:	4931      	ldr	r1, [pc, #196]	; (800108c <main+0x2a4>)
 8000fc6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fca:	4930      	ldr	r1, [pc, #192]	; (800108c <main+0x2a4>)
 8000fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for (uint8_t i = 25; i < 100; i++)
 8000fd0:	78bb      	ldrb	r3, [r7, #2]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	70bb      	strb	r3, [r7, #2]
 8000fd6:	78bb      	ldrb	r3, [r7, #2]
 8000fd8:	2b63      	cmp	r3, #99	; 0x63
 8000fda:	d9e7      	bls.n	8000fac <main+0x1c4>
      }

  //take 25 sets of samples before calculating the heart rate.
      for(int8_t k = 0; k<=3; k++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	707b      	strb	r3, [r7, #1]
 8000fe0:	e032      	b.n	8001048 <main+0x260>
      {
    	  max30102_interrupt_handler(&max);
 8000fe2:	482c      	ldr	r0, [pc, #176]	; (8001094 <main+0x2ac>)
 8000fe4:	f000 fbe4 	bl	80017b0 <max30102_interrupt_handler>
    	  for(int8_t i = 75; i<100; i++)
 8000fe8:	234b      	movs	r3, #75	; 0x4b
 8000fea:	703b      	strb	r3, [r7, #0]
 8000fec:	e01f      	b.n	800102e <main+0x246>
    	  {
    		  irBuffer[i] = max._ir_samples[i - 75];
 8000fee:	f997 3000 	ldrsb.w	r3, [r7]
 8000ff2:	f1a3 024b 	sub.w	r2, r3, #75	; 0x4b
 8000ff6:	f997 3000 	ldrsb.w	r3, [r7]
 8000ffa:	4926      	ldr	r1, [pc, #152]	; (8001094 <main+0x2ac>)
 8000ffc:	3202      	adds	r2, #2
 8000ffe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001002:	4922      	ldr	r1, [pc, #136]	; (800108c <main+0x2a4>)
 8001004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    		  redBuffer[i] = max._red_samples[i - 75];
 8001008:	f997 3000 	ldrsb.w	r3, [r7]
 800100c:	f1a3 024b 	sub.w	r2, r3, #75	; 0x4b
 8001010:	f997 3000 	ldrsb.w	r3, [r7]
 8001014:	491f      	ldr	r1, [pc, #124]	; (8001094 <main+0x2ac>)
 8001016:	3222      	adds	r2, #34	; 0x22
 8001018:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800101c:	491a      	ldr	r1, [pc, #104]	; (8001088 <main+0x2a0>)
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	  for(int8_t i = 75; i<100; i++)
 8001022:	f997 3000 	ldrsb.w	r3, [r7]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	3301      	adds	r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	703b      	strb	r3, [r7, #0]
 800102e:	f997 3000 	ldrsb.w	r3, [r7]
 8001032:	2b63      	cmp	r3, #99	; 0x63
 8001034:	dddb      	ble.n	8000fee <main+0x206>
    	  }
    	  HAL_Delay(35);
 8001036:	2023      	movs	r0, #35	; 0x23
 8001038:	f000 ff3c 	bl	8001eb4 <HAL_Delay>
      for(int8_t k = 0; k<=3; k++)
 800103c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	3301      	adds	r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	707b      	strb	r3, [r7, #1]
 8001048:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800104c:	2b03      	cmp	r3, #3
 800104e:	ddc8      	ble.n	8000fe2 <main+0x1fa>
      }

      //After gathering 25 new samples recalculate HR and SP02
      maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <main+0x28c>)
 8001052:	6819      	ldr	r1, [r3, #0]
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <main+0x290>)
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <main+0x294>)
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <main+0x298>)
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <main+0x29c>)
 8001062:	4a09      	ldr	r2, [pc, #36]	; (8001088 <main+0x2a0>)
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <main+0x2a4>)
 8001066:	f7ff fa31 	bl	80004cc <maxim_heart_rate_and_oxygen_saturation>

      t = max.temperature;
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <main+0x2ac>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <main+0x2b4>)
 8001070:	6013      	str	r3, [r2, #0]
    MX_USB_HOST_Process();
 8001072:	e6dd      	b.n	8000e30 <main+0x48>
 8001074:	20000000 	.word	0x20000000
 8001078:	20000958 	.word	0x20000958
 800107c:	20000954 	.word	0x20000954
 8001080:	20000950 	.word	0x20000950
 8001084:	2000094c 	.word	0x2000094c
 8001088:	200007bc 	.word	0x200007bc
 800108c:	2000062c 	.word	0x2000062c
 8001090:	20000959 	.word	0x20000959
 8001094:	20000518 	.word	0x20000518
 8001098:	40020c00 	.word	0x40020c00
 800109c:	20000628 	.word	0x20000628

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b094      	sub	sp, #80	; 0x50
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	2230      	movs	r2, #48	; 0x30
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f009 ffaa 	bl	800b008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <SystemClock_Config+0xcc>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a27      	ldr	r2, [pc, #156]	; (800116c <SystemClock_Config+0xcc>)
 80010ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b25      	ldr	r3, [pc, #148]	; (800116c <SystemClock_Config+0xcc>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <SystemClock_Config+0xd0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <SystemClock_Config+0xd0>)
 80010ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <SystemClock_Config+0xd0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010fc:	2301      	movs	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001100:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001106:	2302      	movs	r3, #2
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800110e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001110:	2308      	movs	r3, #8
 8001112:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001114:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001118:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111a:	2302      	movs	r3, #2
 800111c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800111e:	2307      	movs	r3, #7
 8001120:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	4618      	mov	r0, r3
 8001128:	f005 fdfe 	bl	8006d28 <HAL_RCC_OscConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001132:	f000 fa0f 	bl	8001554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001136:	230f      	movs	r3, #15
 8001138:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113a:	2302      	movs	r3, #2
 800113c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001142:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001146:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2105      	movs	r1, #5
 8001154:	4618      	mov	r0, r3
 8001156:	f006 f85f 	bl	8007218 <HAL_RCC_ClockConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001160:	f000 f9f8 	bl	8001554 <Error_Handler>
  }
}
 8001164:	bf00      	nop
 8001166:	3750      	adds	r7, #80	; 0x50
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	40007000 	.word	0x40007000

08001174 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_I2C1_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <MX_I2C1_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_I2C1_Init+0x50>)
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <MX_I2C1_Init+0x58>)
 8001182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_I2C1_Init+0x50>)
 8001192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001196:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011b2:	f002 fdbf 	bl	8003d34 <HAL_I2C_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011bc:	f000 f9ca 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200003d0 	.word	0x200003d0
 80011c8:	40005400 	.word	0x40005400
 80011cc:	000186a0 	.word	0x000186a0

080011d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_I2C3_Init+0x50>)
 80011d6:	4a13      	ldr	r2, [pc, #76]	; (8001224 <MX_I2C3_Init+0x54>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_I2C3_Init+0x50>)
 80011dc:	4a12      	ldr	r2, [pc, #72]	; (8001228 <MX_I2C3_Init+0x58>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_I2C3_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_I2C3_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_I2C3_Init+0x50>)
 80011ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <MX_I2C3_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_I2C3_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <MX_I2C3_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_I2C3_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_I2C3_Init+0x50>)
 800120e:	f002 fd91 	bl	8003d34 <HAL_I2C_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001218:	f000 f99c 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000424 	.word	0x20000424
 8001224:	40005c00 	.word	0x40005c00
 8001228:	00061a80 	.word	0x00061a80

0800122c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_I2S3_Init+0x54>)
 8001232:	4a14      	ldr	r2, [pc, #80]	; (8001284 <MX_I2S3_Init+0x58>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_I2S3_Init+0x54>)
 8001238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_I2S3_Init+0x54>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_I2S3_Init+0x54>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_I2S3_Init+0x54>)
 800124c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001250:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_I2S3_Init+0x54>)
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <MX_I2S3_Init+0x5c>)
 8001256:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_I2S3_Init+0x54>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_I2S3_Init+0x54>)
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_I2S3_Init+0x54>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_I2S3_Init+0x54>)
 800126c:	f005 f8bc 	bl	80063e8 <HAL_I2S_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001276:	f000 f96d 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000478 	.word	0x20000478
 8001284:	40003c00 	.word	0x40003c00
 8001288:	00017700 	.word	0x00017700

0800128c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_SPI1_Init+0x64>)
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <MX_SPI1_Init+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_SPI1_Init+0x64>)
 8001298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800129c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012d8:	220a      	movs	r2, #10
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012de:	f006 fae7 	bl	80078b0 <HAL_SPI_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012e8:	f000 f934 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200004c0 	.word	0x200004c0
 80012f4:	40013000 	.word	0x40013000

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	4b72      	ldr	r3, [pc, #456]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a71      	ldr	r2, [pc, #452]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b6f      	ldr	r3, [pc, #444]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	4b6b      	ldr	r3, [pc, #428]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a6a      	ldr	r2, [pc, #424]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b68      	ldr	r3, [pc, #416]	; (80014dc <MX_GPIO_Init+0x1e4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b64      	ldr	r3, [pc, #400]	; (80014dc <MX_GPIO_Init+0x1e4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a63      	ldr	r2, [pc, #396]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b61      	ldr	r3, [pc, #388]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a5c      	ldr	r2, [pc, #368]	; (80014dc <MX_GPIO_Init+0x1e4>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b56      	ldr	r3, [pc, #344]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a55      	ldr	r2, [pc, #340]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b53      	ldr	r3, [pc, #332]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <MX_GPIO_Init+0x1e4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <MX_GPIO_Init+0x1e4>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <MX_GPIO_Init+0x1e4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2108      	movs	r1, #8
 80013ba:	4849      	ldr	r0, [pc, #292]	; (80014e0 <MX_GPIO_Init+0x1e8>)
 80013bc:	f001 f87c 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2101      	movs	r1, #1
 80013c4:	4847      	ldr	r0, [pc, #284]	; (80014e4 <MX_GPIO_Init+0x1ec>)
 80013c6:	f001 f877 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013ca:	2200      	movs	r2, #0
 80013cc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80013d0:	4845      	ldr	r0, [pc, #276]	; (80014e8 <MX_GPIO_Init+0x1f0>)
 80013d2:	f001 f871 	bl	80024b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80013d6:	2308      	movs	r3, #8
 80013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4619      	mov	r1, r3
 80013ec:	483c      	ldr	r0, [pc, #240]	; (80014e0 <MX_GPIO_Init+0x1e8>)
 80013ee:	f000 fec7 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4836      	ldr	r0, [pc, #216]	; (80014e4 <MX_GPIO_Init+0x1ec>)
 800140a:	f000 feb9 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800140e:	2308      	movs	r3, #8
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800141e:	2305      	movs	r3, #5
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	482e      	ldr	r0, [pc, #184]	; (80014e4 <MX_GPIO_Init+0x1ec>)
 800142a:	f000 fea9 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001432:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001436:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	482a      	ldr	r0, [pc, #168]	; (80014ec <MX_GPIO_Init+0x1f4>)
 8001444:	f000 fe9c 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001448:	2304      	movs	r3, #4
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4825      	ldr	r0, [pc, #148]	; (80014f0 <MX_GPIO_Init+0x1f8>)
 800145c:	f000 fe90 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001472:	2305      	movs	r3, #5
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	481c      	ldr	r0, [pc, #112]	; (80014f0 <MX_GPIO_Init+0x1f8>)
 800147e:	f000 fe7f 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001482:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001486:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4813      	ldr	r0, [pc, #76]	; (80014e8 <MX_GPIO_Init+0x1f0>)
 800149c:	f000 fe70 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014a0:	2320      	movs	r3, #32
 80014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_GPIO_Init+0x1f0>)
 80014b4:	f000 fe64 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014bc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <MX_GPIO_Init+0x1e8>)
 80014ce:	f000 fe57 	bl	8002180 <HAL_GPIO_Init>

}
 80014d2:	bf00      	nop
 80014d4:	3730      	adds	r7, #48	; 0x30
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400

080014f4 <config_max30102_sensor>:

/* USER CODE BEGIN 4 */

void config_max30102_sensor(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	  //Initiate the MAX30102 code
	   max30102_init(&max, &hi2c3);
 80014f8:	490e      	ldr	r1, [pc, #56]	; (8001534 <config_max30102_sensor+0x40>)
 80014fa:	480f      	ldr	r0, [pc, #60]	; (8001538 <config_max30102_sensor+0x44>)
 80014fc:	f000 f82f 	bl	800155e <max30102_init>
	   max30102_reset(&max);
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <config_max30102_sensor+0x44>)
 8001502:	f000 f89c 	bl	800163e <max30102_reset>
	   max30102_clear_fifo(&max);
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <config_max30102_sensor+0x44>)
 8001508:	f000 f8aa 	bl	8001660 <max30102_clear_fifo>

	   //set mode for sensor
	     max30102_set_mode(&max);
 800150c:	480a      	ldr	r0, [pc, #40]	; (8001538 <config_max30102_sensor+0x44>)
 800150e:	f000 f8c6 	bl	800169e <max30102_set_mode>
	     //enable interrupts
	     max30102_interrupt_config(&max);
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <config_max30102_sensor+0x44>)
 8001514:	f000 f8d4 	bl	80016c0 <max30102_interrupt_config>

	     //spo2 config
	     max30102_spo2_config(&max);
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <config_max30102_sensor+0x44>)
 800151a:	f000 f8e2 	bl	80016e2 <max30102_spo2_config>

	     //fifo config
	     max30102_fifo_config(&max);
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <config_max30102_sensor+0x44>)
 8001520:	f000 f8f0 	bl	8001704 <max30102_fifo_config>

	     //led1 current setting
	      max30102_led1_settings(&max);
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <config_max30102_sensor+0x44>)
 8001526:	f000 f8fe 	bl	8001726 <max30102_led1_settings>

	     //led2 current setting
	     max30102_led2_settings(&max);
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <config_max30102_sensor+0x44>)
 800152c:	f000 f90c 	bl	8001748 <max30102_led2_settings>
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000424 	.word	0x20000424
 8001538:	20000518 	.word	0x20000518

0800153c <initiate_max30102_temp_measurement>:

void initiate_max30102_temp_measurement(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
    //initiate 1 temperature measurement
    max30102_set_die_temp_en(&max);
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <initiate_max30102_temp_measurement+0x14>)
 8001542:	f000 f912 	bl	800176a <max30102_set_die_temp_en>
    max30102_set_die_temp_rdy(&max);
 8001546:	4802      	ldr	r0, [pc, #8]	; (8001550 <initiate_max30102_temp_measurement+0x14>)
 8001548:	f000 f920 	bl	800178c <max30102_set_die_temp_rdy>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000518 	.word	0x20000518

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x8>

0800155e <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102 *obj, I2C_HandleTypeDef *hi2c)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	601a      	str	r2, [r3, #0]
//    obj->_interrupt_flag = 0;
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3308      	adds	r3, #8
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f009 fd46 	bl	800b008 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3388      	adds	r3, #136	; 0x88
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f009 fd3f 	bl	800b008 <memset>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <max30102_write>:
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */

void max30102_write(max30102 *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b088      	sub	sp, #32
 8001596:	af02      	add	r7, sp, #8
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	461a      	mov	r2, r3
 800159e:	460b      	mov	r3, r1
 80015a0:	72fb      	strb	r3, [r7, #11]
 80015a2:	4613      	mov	r3, r2
 80015a4:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 80015a6:	893b      	ldrh	r3, [r7, #8]
 80015a8:	3301      	adds	r3, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f009 fd0e 	bl	800afcc <malloc>
 80015b0:	4603      	mov	r3, r0
 80015b2:	617b      	str	r3, [r7, #20]
    *payload = reg;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	7afa      	ldrb	r2, [r7, #11]
 80015b8:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d009      	beq.n	80015d4 <max30102_write+0x42>
 80015c0:	893b      	ldrh	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	893a      	ldrh	r2, [r7, #8]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f009 fd0c 	bl	800afec <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, I2C_DELAY);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	893b      	ldrh	r3, [r7, #8]
 80015da:	3301      	adds	r3, #1
 80015dc:	b29b      	uxth	r3, r3
 80015de:	2205      	movs	r2, #5
 80015e0:	9200      	str	r2, [sp, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	21ae      	movs	r1, #174	; 0xae
 80015e6:	f002 fce9 	bl	8003fbc <HAL_I2C_Master_Transmit>
    free(payload);
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f009 fcf6 	bl	800afdc <free>
}
 80015f0:	bf00      	nop
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102 *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	461a      	mov	r2, r3
 8001604:	460b      	mov	r3, r1
 8001606:	72fb      	strb	r3, [r7, #11]
 8001608:	4613      	mov	r3, r2
 800160a:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 800160c:	7afb      	ldrb	r3, [r7, #11]
 800160e:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_WRITE_ADDRESS, &reg_addr, 1, I2C_DELAY);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	f107 0217 	add.w	r2, r7, #23
 8001618:	2305      	movs	r3, #5
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2301      	movs	r3, #1
 800161e:	21ae      	movs	r1, #174	; 0xae
 8001620:	f002 fccc 	bl	8003fbc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_READ_ADDRESS, buf, buflen, I2C_DELAY);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	893b      	ldrh	r3, [r7, #8]
 800162a:	2205      	movs	r2, #5
 800162c:	9200      	str	r2, [sp, #0]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	21af      	movs	r1, #175	; 0xaf
 8001632:	f002 fdc1 	bl	80041b8 <HAL_I2C_Master_Receive>
 }
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102 *obj)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8001646:	2340      	movs	r3, #64	; 0x40
 8001648:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MODE_CONFIGURATION, &val, 1);
 800164a:	f107 020f 	add.w	r2, r7, #15
 800164e:	2301      	movs	r3, #1
 8001650:	2109      	movs	r1, #9
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ff9d 	bl	8001592 <max30102_write>
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102 *obj)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, FIFO_WRITE_POINTER, &val, 3);
 800166c:	f107 020f 	add.w	r2, r7, #15
 8001670:	2303      	movs	r3, #3
 8001672:	2104      	movs	r1, #4
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff8c 	bl	8001592 <max30102_write>
    max30102_write(obj, FIFO_READ_POINTER, &val, 3);
 800167a:	f107 020f 	add.w	r2, r7, #15
 800167e:	2303      	movs	r3, #3
 8001680:	2106      	movs	r1, #6
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff85 	bl	8001592 <max30102_write>
    max30102_write(obj, OVERFLOW_COUNTER, &val, 3);
 8001688:	f107 020f 	add.w	r2, r7, #15
 800168c:	2303      	movs	r3, #3
 800168e:	2105      	movs	r1, #5
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff7e 	bl	8001592 <max30102_write>
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <max30102_set_mode>:



//set mode for max30102
void max30102_set_mode(max30102 *obj)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	uint8_t value = spo2Mode;
 80016a6:	2303      	movs	r3, #3
 80016a8:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, MODE_CONFIGURATION, &value, 1);
 80016aa:	f107 020f 	add.w	r2, r7, #15
 80016ae:	2301      	movs	r3, #1
 80016b0:	2109      	movs	r1, #9
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ff6d 	bl	8001592 <max30102_write>
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <max30102_interrupt_config>:

//enable interrupts
void max30102_interrupt_config(max30102 *obj)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	uint8_t value = allInterruptsEnable;
 80016c8:	23e0      	movs	r3, #224	; 0xe0
 80016ca:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, INTERRUPT_ENABLE_1, &value, 1);
 80016cc:	f107 020f 	add.w	r2, r7, #15
 80016d0:	2301      	movs	r3, #1
 80016d2:	2102      	movs	r1, #2
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff5c 	bl	8001592 <max30102_write>
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <max30102_spo2_config>:

//spo2 config
void max30102_spo2_config(max30102 *obj)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	uint8_t value = spo2ModeConfiguration;
 80016ea:	2327      	movs	r3, #39	; 0x27
 80016ec:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, SPO2_CONFIGURATION, &value, 1);
 80016ee:	f107 020f 	add.w	r2, r7, #15
 80016f2:	2301      	movs	r3, #1
 80016f4:	210a      	movs	r1, #10
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ff4b 	bl	8001592 <max30102_write>
}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <max30102_fifo_config>:

//fifo config
void max30102_fifo_config(max30102 *obj)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	uint8_t value = fifoConfigurationData;
 800170c:	2351      	movs	r3, #81	; 0x51
 800170e:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, FIFO_CONFIGURATION, &value, 1);
 8001710:	f107 020f 	add.w	r2, r7, #15
 8001714:	2301      	movs	r3, #1
 8001716:	2108      	movs	r1, #8
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff3a 	bl	8001592 <max30102_write>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <max30102_led1_settings>:

void max30102_led1_settings(max30102 *obj)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
	uint8_t v = defaultLedPulse;
 800172e:	231f      	movs	r3, #31
 8001730:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, LED1_PA, &v, 1);
 8001732:	f107 020f 	add.w	r2, r7, #15
 8001736:	2301      	movs	r3, #1
 8001738:	210c      	movs	r1, #12
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ff29 	bl	8001592 <max30102_write>

}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <max30102_led2_settings>:

void max30102_led2_settings(max30102 *obj)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	uint8_t a = defaultLedPulse;
 8001750:	231f      	movs	r3, #31
 8001752:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, LED2_PA, &a, 1);
 8001754:	f107 020f 	add.w	r2, r7, #15
 8001758:	2301      	movs	r3, #1
 800175a:	210d      	movs	r1, #13
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff18 	bl	8001592 <max30102_write>

}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <max30102_set_die_temp_en>:

void max30102_set_die_temp_en(max30102 *obj)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
	uint8_t value = enableTempMeasurement;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, DIE_TEMPERATURE_CONFIG, &value, 1);
 8001776:	f107 020f 	add.w	r2, r7, #15
 800177a:	2301      	movs	r3, #1
 800177c:	2121      	movs	r1, #33	; 0x21
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ff07 	bl	8001592 <max30102_write>
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <max30102_set_die_temp_rdy>:

void max30102_set_die_temp_rdy(max30102 *obj)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	uint8_t value = dieTempRdyEn;
 8001794:	2302      	movs	r3, #2
 8001796:	73fb      	strb	r3, [r7, #15]
	max30102_write(obj, INTERRUPT_ENABLE_2, &value, 1);
 8001798:	f107 020f 	add.w	r2, r7, #15
 800179c:	2301      	movs	r3, #1
 800179e:	2103      	movs	r1, #3
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fef6 	bl	8001592 <max30102_write>
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <max30102_interrupt_handler>:

void max30102_interrupt_handler(max30102 *obj)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	//read register 0x00 and 0X01 interrupt status register
    uint8_t reg[2] = {0x00};
 80017b8:	2300      	movs	r3, #0
 80017ba:	823b      	strh	r3, [r7, #16]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, INTERRUPT_STATUS_1, reg, 2);
 80017bc:	f107 0210 	add.w	r2, r7, #16
 80017c0:	2302      	movs	r3, #2
 80017c2:	2100      	movs	r1, #0
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff17 	bl	80015f8 <max30102_read>
    if(reg[0] != 0)
 80017ca:	7c3b      	ldrb	r3, [r7, #16]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <max30102_interrupt_handler+0x2c>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d6:	481d      	ldr	r0, [pc, #116]	; (800184c <max30102_interrupt_handler+0x9c>)
 80017d8:	f000 fe6e 	bl	80024b8 <HAL_GPIO_WritePin>
    }

    uint8_t b = reg[0];
 80017dc:	7c3b      	ldrb	r3, [r7, #16]
 80017de:	75fb      	strb	r3, [r7, #23]
    	{
    	//PWR_RDY shows that sensor has been set off. Configure sensor again.

    	}

    	uint8_t a = reg[0];
 80017e0:	7c3b      	ldrb	r3, [r7, #16]
 80017e2:	75bb      	strb	r3, [r7, #22]
    	if(((a>>7) & 0X01) == 1 )
 80017e4:	7dbb      	ldrb	r3, [r7, #22]
 80017e6:	09db      	lsrs	r3, r3, #7
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <max30102_interrupt_handler+0x48>
    	{
    	//Interrupt becoming full now read sensor FIFO data
//   	 	 HAL_GPIO_TogglePin(GPIOD, ); //To show that readings are happening
    		max30102_read_fifo(obj);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f82e 	bl	8001854 <max30102_read_fifo>

    	}

    	uint8_t c = reg[0];
 80017f8:	7c3b      	ldrb	r3, [r7, #16]
 80017fa:	757b      	strb	r3, [r7, #21]
    	if(((c>>6) & 0X01) == 1 )
    	{
    	//PPG_RDY
    	}

    	if((reg[1]>>1) & 0X01)
 80017fc:	7c7b      	ldrb	r3, [r7, #17]
 80017fe:	085b      	lsrs	r3, r3, #1
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d01b      	beq.n	8001842 <max30102_interrupt_handler+0x92>
    	{
    	// Temperature data ready
    		  int8_t temp_int;
    		  uint8_t temp_frac;
    		  max30102_read_temp(obj, &temp_int, &temp_frac);
 800180a:	f107 020e 	add.w	r2, r7, #14
 800180e:	f107 030f 	add.w	r3, r7, #15
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f87d 	bl	8001914 <max30102_read_temp>

    		  obj->temperature = temp_int + 0.0625f * temp_frac;
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001830:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001850 <max30102_interrupt_handler+0xa0>
 8001834:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	edc3 7a01 	vstr	s15, [r3, #4]
    	}
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020c00 	.word	0x40020c00
 8001850:	3d800000 	.word	0x3d800000

08001854 <max30102_read_fifo>:

void max30102_read_fifo(max30102 *obj)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr;
    uint8_t rd_ptr;
    max30102_read(obj, FIFO_WRITE_POINTER, &wr_ptr, 1);
 800185c:	f107 0213 	add.w	r2, r7, #19
 8001860:	2301      	movs	r3, #1
 8001862:	2104      	movs	r1, #4
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fec7 	bl	80015f8 <max30102_read>
    max30102_read(obj, FIFO_READ_POINTER, &rd_ptr, 1);
 800186a:	f107 0212 	add.w	r2, r7, #18
 800186e:	2301      	movs	r3, #1
 8001870:	2106      	movs	r1, #6
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fec0 	bl	80015f8 <max30102_read>

    uint8_t num_samples = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	77bb      	strb	r3, [r7, #30]

    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800187c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001880:	4823      	ldr	r0, [pc, #140]	; (8001910 <max30102_read_fifo+0xbc>)
 8001882:	f000 fe32 	bl	80024ea <HAL_GPIO_TogglePin>

    num_samples  = ((uint8_t)wr_ptr - (uint8_t)rd_ptr + 32)%32;
 8001886:	7cfb      	ldrb	r3, [r7, #19]
 8001888:	461a      	mov	r2, r3
 800188a:	7cbb      	ldrb	r3, [r7, #18]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	3320      	adds	r3, #32
 8001890:	425a      	negs	r2, r3
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	f002 021f 	and.w	r2, r2, #31
 800189a:	bf58      	it	pl
 800189c:	4253      	negpl	r3, r2
 800189e:	77bb      	strb	r3, [r7, #30]

    for(uint8_t i = 0; i< num_samples; i++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	77fb      	strb	r3, [r7, #31]
 80018a4:	e02b      	b.n	80018fe <max30102_read_fifo+0xaa>
    {
    	uint8_t sample[6];
    	max30102_read(obj, FIFO_DATA_REGISTER, sample, 6);
 80018a6:	f107 020c 	add.w	r2, r7, #12
 80018aa:	2306      	movs	r3, #6
 80018ac:	2107      	movs	r1, #7
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fea2 	bl	80015f8 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 80018b4:	7b3b      	ldrb	r3, [r7, #12]
 80018b6:	041b      	lsls	r3, r3, #16
 80018b8:	461a      	mov	r2, r3
 80018ba:	7b7b      	ldrb	r3, [r7, #13]
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	4313      	orrs	r3, r2
 80018c0:	7bba      	ldrb	r2, [r7, #14]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80018c8:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	461a      	mov	r2, r3
 80018d0:	7c3b      	ldrb	r3, [r7, #16]
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	4313      	orrs	r3, r2
 80018d6:	7c7a      	ldrb	r2, [r7, #17]
 80018d8:	4313      	orrs	r3, r2
 80018da:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80018de:	617b      	str	r3, [r7, #20]

        obj->_ir_samples[i] = ir_sample;
 80018e0:	7ffa      	ldrb	r2, [r7, #31]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3202      	adds	r2, #2
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        obj->_red_samples[i] = red_sample;
 80018ec:	7ffa      	ldrb	r2, [r7, #31]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3222      	adds	r2, #34	; 0x22
 80018f2:	6979      	ldr	r1, [r7, #20]
 80018f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(uint8_t i = 0; i< num_samples; i++)
 80018f8:	7ffb      	ldrb	r3, [r7, #31]
 80018fa:	3301      	adds	r3, #1
 80018fc:	77fb      	strb	r3, [r7, #31]
 80018fe:	7ffa      	ldrb	r2, [r7, #31]
 8001900:	7fbb      	ldrb	r3, [r7, #30]
 8001902:	429a      	cmp	r2, r3
 8001904:	d3cf      	bcc.n	80018a6 <max30102_read_fifo+0x52>
    }


}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40020c00 	.word	0x40020c00

08001914 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102 *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
    max30102_read(obj, DIE_TEMPERATURE_INTEGER, (uint8_t *)temp_int, 1);
 8001920:	2301      	movs	r3, #1
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	211f      	movs	r1, #31
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f7ff fe66 	bl	80015f8 <max30102_read>
    max30102_read(obj, DIE_TEMPERATURE_FRACTION, temp_frac, 1);
 800192c:	2301      	movs	r3, #1
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	2120      	movs	r1, #32
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff fe60 	bl	80015f8 <max30102_read>
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_MspInit+0x4c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_MspInit+0x4c>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_MspInit+0x4c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_MspInit+0x4c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_MspInit+0x4c>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_MspInit+0x4c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800197e:	2007      	movs	r0, #7
 8001980:	f000 fb8c 	bl	800209c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a46      	ldr	r2, [pc, #280]	; (8001ac8 <HAL_I2C_MspInit+0x138>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d12d      	bne.n	8001a0e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	4b45      	ldr	r3, [pc, #276]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a44      	ldr	r2, [pc, #272]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b42      	ldr	r3, [pc, #264]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80019ce:	f44f 7310 	mov.w	r3, #576	; 0x240
 80019d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d4:	2312      	movs	r3, #18
 80019d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d8:	2301      	movs	r3, #1
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e0:	2304      	movs	r3, #4
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4839      	ldr	r0, [pc, #228]	; (8001ad0 <HAL_I2C_MspInit+0x140>)
 80019ec:	f000 fbc8 	bl	8002180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a34      	ldr	r2, [pc, #208]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 80019fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001a00:	4b32      	ldr	r3, [pc, #200]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a0c:	e058      	b.n	8001ac0 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C3)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_I2C_MspInit+0x144>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d153      	bne.n	8001ac0 <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4a2a      	ldr	r2, [pc, #168]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	6313      	str	r3, [r2, #48]	; 0x30
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	4a23      	ldr	r2, [pc, #140]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6313      	str	r3, [r2, #48]	; 0x30
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a56:	2312      	movs	r3, #18
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a62:	2304      	movs	r3, #4
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	481a      	ldr	r0, [pc, #104]	; (8001ad8 <HAL_I2C_MspInit+0x148>)
 8001a6e:	f000 fb87 	bl	8002180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a78:	2312      	movs	r3, #18
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a84:	2304      	movs	r3, #4
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4813      	ldr	r0, [pc, #76]	; (8001adc <HAL_I2C_MspInit+0x14c>)
 8001a90:	f000 fb76 	bl	8002180 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 8001a9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_I2C_MspInit+0x13c>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2048      	movs	r0, #72	; 0x48
 8001ab6:	f000 fafc 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001aba:	2048      	movs	r0, #72	; 0x48
 8001abc:	f000 fb15 	bl	80020ea <HAL_NVIC_EnableIRQ>
}
 8001ac0:	bf00      	nop
 8001ac2:	3730      	adds	r7, #48	; 0x30
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40005c00 	.word	0x40005c00
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020000 	.word	0x40020000

08001ae0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08e      	sub	sp, #56	; 0x38
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a31      	ldr	r2, [pc, #196]	; (8001bd0 <HAL_I2S_MspInit+0xf0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d15a      	bne.n	8001bc6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b10:	2301      	movs	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001b14:	23c0      	movs	r3, #192	; 0xc0
 8001b16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4618      	mov	r0, r3
 8001b22:	f005 fd85 	bl	8007630 <HAL_RCCEx_PeriphCLKConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001b2c:	f7ff fd12 	bl	8001554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <HAL_I2S_MspInit+0xf4>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	4a26      	ldr	r2, [pc, #152]	; (8001bd4 <HAL_I2S_MspInit+0xf4>)
 8001b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <HAL_I2S_MspInit+0xf4>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_I2S_MspInit+0xf4>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <HAL_I2S_MspInit+0xf4>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_I2S_MspInit+0xf4>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_I2S_MspInit+0xf4>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <HAL_I2S_MspInit+0xf4>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	6313      	str	r3, [r2, #48]	; 0x30
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_I2S_MspInit+0xf4>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b84:	2310      	movs	r3, #16
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b94:	2306      	movs	r3, #6
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480e      	ldr	r0, [pc, #56]	; (8001bd8 <HAL_I2S_MspInit+0xf8>)
 8001ba0:	f000 faee 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001ba4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4806      	ldr	r0, [pc, #24]	; (8001bdc <HAL_I2S_MspInit+0xfc>)
 8001bc2:	f000 fadd 	bl	8002180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3738      	adds	r7, #56	; 0x38
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40003c00 	.word	0x40003c00
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40020800 	.word	0x40020800

08001be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_SPI_MspInit+0x84>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d12b      	bne.n	8001c5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_SPI_MspInit+0x88>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_SPI_MspInit+0x88>)
 8001c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_SPI_MspInit+0x88>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_SPI_MspInit+0x88>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_SPI_MspInit+0x88>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_SPI_MspInit+0x88>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001c3a:	23e0      	movs	r3, #224	; 0xe0
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <HAL_SPI_MspInit+0x8c>)
 8001c56:	f000 fa93 	bl	8002180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40013000 	.word	0x40013000
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020000 	.word	0x40020000

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 f8da 	bl	8001e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <OTG_FS_IRQHandler+0x10>)
 8001cca:	f000 fe93 	bl	80029f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000d40 	.word	0x20000d40

08001cd8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <I2C3_EV_IRQHandler+0x10>)
 8001cde:	f002 fc91 	bl	8004604 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000424 	.word	0x20000424

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f009 f92c 	bl	800af78 <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20020000 	.word	0x20020000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	2000095c 	.word	0x2000095c
 8001d54:	20001058 	.word	0x20001058

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <SystemInit+0x20>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <SystemInit+0x20>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d82:	490e      	ldr	r1, [pc, #56]	; (8001dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d84:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d98:	4c0b      	ldr	r4, [pc, #44]	; (8001dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001da6:	f7ff ffd7 	bl	8001d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001daa:	f009 f8eb 	bl	800af84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dae:	f7ff f81b 	bl	8000de8 <main>
  bx  lr    
 8001db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001dc0:	0800b310 	.word	0x0800b310
  ldr r2, =_sbss
 8001dc4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001dc8:	20001054 	.word	0x20001054

08001dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_Init+0x40>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_Init+0x40>)
 8001de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_Init+0x40>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f000 f94f 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f000 f808 	bl	8001e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e04:	f7ff fd9c 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x54>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_InitTick+0x58>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f967 	bl	8002106 <HAL_SYSTICK_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00e      	b.n	8001e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d80a      	bhi.n	8001e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f000 f92f 	bl	80020b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e54:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <HAL_InitTick+0x5c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e000      	b.n	8001e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000004 	.word	0x20000004
 8001e6c:	2000000c 	.word	0x2000000c
 8001e70:	20000008 	.word	0x20000008

08001e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x20>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x24>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <HAL_IncTick+0x24>)
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	2000000c 	.word	0x2000000c
 8001e98:	20000960 	.word	0x20000960

08001e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_GetTick+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000960 	.word	0x20000960

08001eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7ff ffee 	bl	8001e9c <HAL_GetTick>
 8001ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d005      	beq.n	8001eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_Delay+0x44>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eda:	bf00      	nop
 8001edc:	f7ff ffde 	bl	8001e9c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d8f7      	bhi.n	8001edc <HAL_Delay+0x28>
  {
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000000c 	.word	0x2000000c

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db0b      	blt.n	8001f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4907      	ldr	r1, [pc, #28]	; (8001f98 <__NVIC_EnableIRQ+0x38>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	; (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002068:	d301      	bcc.n	800206e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <SysTick_Config+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002076:	210f      	movs	r1, #15
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f7ff ff8e 	bl	8001f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <SysTick_Config+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <SysTick_Config+0x40>)
 8002088:	2207      	movs	r2, #7
 800208a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff29 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c4:	f7ff ff3e 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 80020c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff ff8e 	bl	8001ff0 <NVIC_EncodePriority>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff5d 	bl	8001f9c <__NVIC_SetPriority>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff31 	bl	8001f60 <__NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffa2 	bl	8002058 <SysTick_Config>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d004      	beq.n	800213c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e00c      	b.n	8002156 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2205      	movs	r2, #5
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002170:	b2db      	uxtb	r3, r3
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	e16b      	b.n	8002474 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800219c:	2201      	movs	r2, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	f040 815a 	bne.w	800246e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d005      	beq.n	80021d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d130      	bne.n	8002234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 0201 	and.w	r2, r3, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b03      	cmp	r3, #3
 800223e:	d017      	beq.n	8002270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d123      	bne.n	80022c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	220f      	movs	r2, #15
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	69b9      	ldr	r1, [r7, #24]
 80022c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0203 	and.w	r2, r3, #3
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80b4 	beq.w	800246e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4b60      	ldr	r3, [pc, #384]	; (800248c <HAL_GPIO_Init+0x30c>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	4a5f      	ldr	r2, [pc, #380]	; (800248c <HAL_GPIO_Init+0x30c>)
 8002310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002314:	6453      	str	r3, [r2, #68]	; 0x44
 8002316:	4b5d      	ldr	r3, [pc, #372]	; (800248c <HAL_GPIO_Init+0x30c>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002322:	4a5b      	ldr	r2, [pc, #364]	; (8002490 <HAL_GPIO_Init+0x310>)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	220f      	movs	r2, #15
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a52      	ldr	r2, [pc, #328]	; (8002494 <HAL_GPIO_Init+0x314>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d02b      	beq.n	80023a6 <HAL_GPIO_Init+0x226>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a51      	ldr	r2, [pc, #324]	; (8002498 <HAL_GPIO_Init+0x318>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d025      	beq.n	80023a2 <HAL_GPIO_Init+0x222>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a50      	ldr	r2, [pc, #320]	; (800249c <HAL_GPIO_Init+0x31c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01f      	beq.n	800239e <HAL_GPIO_Init+0x21e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4f      	ldr	r2, [pc, #316]	; (80024a0 <HAL_GPIO_Init+0x320>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d019      	beq.n	800239a <HAL_GPIO_Init+0x21a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4e      	ldr	r2, [pc, #312]	; (80024a4 <HAL_GPIO_Init+0x324>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0x216>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4d      	ldr	r2, [pc, #308]	; (80024a8 <HAL_GPIO_Init+0x328>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00d      	beq.n	8002392 <HAL_GPIO_Init+0x212>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4c      	ldr	r2, [pc, #304]	; (80024ac <HAL_GPIO_Init+0x32c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <HAL_GPIO_Init+0x20e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4b      	ldr	r2, [pc, #300]	; (80024b0 <HAL_GPIO_Init+0x330>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_GPIO_Init+0x20a>
 8002386:	2307      	movs	r3, #7
 8002388:	e00e      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 800238a:	2308      	movs	r3, #8
 800238c:	e00c      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 800238e:	2306      	movs	r3, #6
 8002390:	e00a      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 8002392:	2305      	movs	r3, #5
 8002394:	e008      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 8002396:	2304      	movs	r3, #4
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 800239a:	2303      	movs	r3, #3
 800239c:	e004      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 800239e:	2302      	movs	r3, #2
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 80023a6:	2300      	movs	r3, #0
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4093      	lsls	r3, r2
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b8:	4935      	ldr	r1, [pc, #212]	; (8002490 <HAL_GPIO_Init+0x310>)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c6:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_GPIO_Init+0x334>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ea:	4a32      	ldr	r2, [pc, #200]	; (80024b4 <HAL_GPIO_Init+0x334>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f0:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <HAL_GPIO_Init+0x334>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002414:	4a27      	ldr	r2, [pc, #156]	; (80024b4 <HAL_GPIO_Init+0x334>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_GPIO_Init+0x334>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800243e:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <HAL_GPIO_Init+0x334>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_GPIO_Init+0x334>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002468:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <HAL_GPIO_Init+0x334>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3301      	adds	r3, #1
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b0f      	cmp	r3, #15
 8002478:	f67f ae90 	bls.w	800219c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	40013800 	.word	0x40013800
 8002494:	40020000 	.word	0x40020000
 8002498:	40020400 	.word	0x40020400
 800249c:	40020800 	.word	0x40020800
 80024a0:	40020c00 	.word	0x40020c00
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40021400 	.word	0x40021400
 80024ac:	40021800 	.word	0x40021800
 80024b0:	40021c00 	.word	0x40021c00
 80024b4:	40013c00 	.word	0x40013c00

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d4:	e003      	b.n	80024de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	041a      	lsls	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	619a      	str	r2, [r3, #24]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024fc:	887a      	ldrh	r2, [r7, #2]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	041a      	lsls	r2, r3, #16
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43d9      	mvns	r1, r3
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	400b      	ands	r3, r1
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	619a      	str	r2, [r3, #24]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800251e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002520:	b08f      	sub	sp, #60	; 0x3c
 8002522:	af0a      	add	r7, sp, #40	; 0x28
 8002524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e054      	b.n	80025da <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f008 fa6a 	bl	800aa24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2203      	movs	r2, #3
 8002554:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f005 fa99 	bl	8007aa6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	603b      	str	r3, [r7, #0]
 800257a:	687e      	ldr	r6, [r7, #4]
 800257c:	466d      	mov	r5, sp
 800257e:	f106 0410 	add.w	r4, r6, #16
 8002582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800258e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002592:	1d33      	adds	r3, r6, #4
 8002594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002596:	6838      	ldr	r0, [r7, #0]
 8002598:	f005 fa13 	bl	80079c2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2101      	movs	r1, #1
 80025a2:	4618      	mov	r0, r3
 80025a4:	f005 fa90 	bl	8007ac8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	687e      	ldr	r6, [r7, #4]
 80025b0:	466d      	mov	r5, sp
 80025b2:	f106 0410 	add.w	r4, r6, #16
 80025b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025c6:	1d33      	adds	r3, r6, #4
 80025c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f005 fc18 	bl	8007e00 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025e2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80025e2:	b590      	push	{r4, r7, lr}
 80025e4:	b089      	sub	sp, #36	; 0x24
 80025e6:	af04      	add	r7, sp, #16
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	4608      	mov	r0, r1
 80025ec:	4611      	mov	r1, r2
 80025ee:	461a      	mov	r2, r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	70fb      	strb	r3, [r7, #3]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70bb      	strb	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_HCD_HC_Init+0x28>
 8002606:	2302      	movs	r3, #2
 8002608:	e076      	b.n	80026f8 <HAL_HCD_HC_Init+0x116>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	333d      	adds	r3, #61	; 0x3d
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	3338      	adds	r3, #56	; 0x38
 8002632:	787a      	ldrb	r2, [r7, #1]
 8002634:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	3340      	adds	r3, #64	; 0x40
 8002644:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002646:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	3339      	adds	r3, #57	; 0x39
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	333f      	adds	r3, #63	; 0x3f
 8002668:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800266c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	78ba      	ldrb	r2, [r7, #2]
 8002672:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002676:	b2d0      	uxtb	r0, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	333a      	adds	r3, #58	; 0x3a
 8002684:	4602      	mov	r2, r0
 8002686:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002688:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800268c:	2b00      	cmp	r3, #0
 800268e:	da09      	bge.n	80026a4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	333b      	adds	r3, #59	; 0x3b
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
 80026a2:	e008      	b.n	80026b6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	333b      	adds	r3, #59	; 0x3b
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	333c      	adds	r3, #60	; 0x3c
 80026c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026c8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	787c      	ldrb	r4, [r7, #1]
 80026d0:	78ba      	ldrb	r2, [r7, #2]
 80026d2:	78f9      	ldrb	r1, [r7, #3]
 80026d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026d6:	9302      	str	r3, [sp, #8]
 80026d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	4623      	mov	r3, r4
 80026e6:	f005 fd11 	bl	800810c <USB_HC_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd90      	pop	{r4, r7, pc}

08002700 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_HCD_HC_Halt+0x1e>
 800271a:	2302      	movs	r3, #2
 800271c:	e00f      	b.n	800273e <HAL_HCD_HC_Halt+0x3e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f005 ff61 	bl	80085f6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	4608      	mov	r0, r1
 8002752:	4611      	mov	r1, r2
 8002754:	461a      	mov	r2, r3
 8002756:	4603      	mov	r3, r0
 8002758:	70fb      	strb	r3, [r7, #3]
 800275a:	460b      	mov	r3, r1
 800275c:	70bb      	strb	r3, [r7, #2]
 800275e:	4613      	mov	r3, r2
 8002760:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	333b      	adds	r3, #59	; 0x3b
 8002770:	78ba      	ldrb	r2, [r7, #2]
 8002772:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	333f      	adds	r3, #63	; 0x3f
 8002782:	787a      	ldrb	r2, [r7, #1]
 8002784:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002786:	7c3b      	ldrb	r3, [r7, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d112      	bne.n	80027b2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	3342      	adds	r3, #66	; 0x42
 800279a:	2203      	movs	r2, #3
 800279c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	333d      	adds	r3, #61	; 0x3d
 80027ac:	7f3a      	ldrb	r2, [r7, #28]
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e008      	b.n	80027c4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3342      	adds	r3, #66	; 0x42
 80027c0:	2202      	movs	r2, #2
 80027c2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80027c4:	787b      	ldrb	r3, [r7, #1]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	f200 80c6 	bhi.w	8002958 <HAL_HCD_HC_SubmitRequest+0x210>
 80027cc:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	080027e5 	.word	0x080027e5
 80027d8:	08002945 	.word	0x08002945
 80027dc:	08002849 	.word	0x08002849
 80027e0:	080028c7 	.word	0x080028c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80027e4:	7c3b      	ldrb	r3, [r7, #16]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	f040 80b8 	bne.w	800295c <HAL_HCD_HC_SubmitRequest+0x214>
 80027ec:	78bb      	ldrb	r3, [r7, #2]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 80b4 	bne.w	800295c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80027f4:	8b3b      	ldrh	r3, [r7, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d108      	bne.n	800280c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	3355      	adds	r3, #85	; 0x55
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	3355      	adds	r3, #85	; 0x55
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3342      	adds	r3, #66	; 0x42
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002832:	e093      	b.n	800295c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3342      	adds	r3, #66	; 0x42
 8002842:	2202      	movs	r2, #2
 8002844:	701a      	strb	r2, [r3, #0]
      break;
 8002846:	e089      	b.n	800295c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002848:	78bb      	ldrb	r3, [r7, #2]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d11d      	bne.n	800288a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3355      	adds	r3, #85	; 0x55
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3342      	adds	r3, #66	; 0x42
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002874:	e073      	b.n	800295e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3342      	adds	r3, #66	; 0x42
 8002884:	2202      	movs	r2, #2
 8002886:	701a      	strb	r2, [r3, #0]
      break;
 8002888:	e069      	b.n	800295e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3354      	adds	r3, #84	; 0x54
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3342      	adds	r3, #66	; 0x42
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
      break;
 80028b0:	e055      	b.n	800295e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	3342      	adds	r3, #66	; 0x42
 80028c0:	2202      	movs	r2, #2
 80028c2:	701a      	strb	r2, [r3, #0]
      break;
 80028c4:	e04b      	b.n	800295e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80028c6:	78bb      	ldrb	r3, [r7, #2]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d11d      	bne.n	8002908 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	3355      	adds	r3, #85	; 0x55
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	212c      	movs	r1, #44	; 0x2c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3342      	adds	r3, #66	; 0x42
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028f2:	e034      	b.n	800295e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3342      	adds	r3, #66	; 0x42
 8002902:	2202      	movs	r2, #2
 8002904:	701a      	strb	r2, [r3, #0]
      break;
 8002906:	e02a      	b.n	800295e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3354      	adds	r3, #84	; 0x54
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d109      	bne.n	8002930 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	3342      	adds	r3, #66	; 0x42
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
      break;
 800292e:	e016      	b.n	800295e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3342      	adds	r3, #66	; 0x42
 800293e:	2202      	movs	r2, #2
 8002940:	701a      	strb	r2, [r3, #0]
      break;
 8002942:	e00c      	b.n	800295e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	3342      	adds	r3, #66	; 0x42
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
      break;
 8002956:	e002      	b.n	800295e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002958:	bf00      	nop
 800295a:	e000      	b.n	800295e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800295c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3344      	adds	r3, #68	; 0x44
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	8b3a      	ldrh	r2, [r7, #24]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	202c      	movs	r0, #44	; 0x2c
 8002978:	fb00 f303 	mul.w	r3, r0, r3
 800297c:	440b      	add	r3, r1
 800297e:	334c      	adds	r3, #76	; 0x4c
 8002980:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3360      	adds	r3, #96	; 0x60
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3350      	adds	r3, #80	; 0x50
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3339      	adds	r3, #57	; 0x39
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	222c      	movs	r2, #44	; 0x2c
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	3338      	adds	r3, #56	; 0x38
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	18d1      	adds	r1, r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	f005 fcb4 	bl	8008350 <USB_HC_StartXfer>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop

080029f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f005 f9b5 	bl	8007d7a <USB_GetMode>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	f040 80f6 	bne.w	8002c04 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f005 f999 	bl	8007d54 <USB_ReadInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80ec 	beq.w	8002c02 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f005 f990 	bl	8007d54 <USB_ReadInterrupts>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a3e:	d104      	bne.n	8002a4a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f005 f980 	bl	8007d54 <USB_ReadInterrupts>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a5e:	d104      	bne.n	8002a6a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f005 f970 	bl	8007d54 <USB_ReadInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a7e:	d104      	bne.n	8002a8a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f005 f960 	bl	8007d54 <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d103      	bne.n	8002aa6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f005 f952 	bl	8007d54 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aba:	d11c      	bne.n	8002af6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ac4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ad6:	2110      	movs	r1, #16
 8002ad8:	6938      	ldr	r0, [r7, #16]
 8002ada:	f005 f841 	bl	8007b60 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ade:	6938      	ldr	r0, [r7, #16]
 8002ae0:	f005 f872 	bl	8007bc8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f005 fa48 	bl	8007f80 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f008 f815 	bl	800ab20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f005 f92a 	bl	8007d54 <USB_ReadInterrupts>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b0a:	d102      	bne.n	8002b12 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f001 f89e 	bl	8003c4e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f005 f91c 	bl	8007d54 <USB_ReadInterrupts>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d106      	bne.n	8002b34 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f007 ffde 	bl	800aae8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2208      	movs	r2, #8
 8002b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f005 f90b 	bl	8007d54 <USB_ReadInterrupts>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d101      	bne.n	8002b4c <HAL_HCD_IRQHandler+0x158>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_HCD_IRQHandler+0x15a>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d012      	beq.n	8002b78 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0210 	bic.w	r2, r2, #16
 8002b60:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 ffa1 	bl	8003aaa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0210 	orr.w	r2, r2, #16
 8002b76:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f005 f8e9 	bl	8007d54 <USB_ReadInterrupts>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b8c:	d13a      	bne.n	8002c04 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f005 fd1e 	bl	80085d4 <USB_HC_ReadInterrupt>
 8002b98:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	e025      	b.n	8002bec <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d018      	beq.n	8002be6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bca:	d106      	bne.n	8002bda <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f8ab 	bl	8002d2e <HCD_HC_IN_IRQHandler>
 8002bd8:	e005      	b.n	8002be6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fbf9 	bl	80033d8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3301      	adds	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d3d4      	bcc.n	8002ba0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bfe:	615a      	str	r2, [r3, #20]
 8002c00:	e000      	b.n	8002c04 <HAL_HCD_IRQHandler+0x210>
      return;
 8002c02:	bf00      	nop
    }
  }
}
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_HCD_Start+0x16>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e013      	b.n	8002c48 <HAL_HCD_Start+0x3e>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f005 fa0a 	bl	8008048 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f004 ff23 	bl	8007a84 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_HCD_Stop+0x16>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e00d      	b.n	8002c82 <HAL_HCD_Stop+0x32>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f005 fdf8 	bl	8008868 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f005 f9ac 	bl	8007ff4 <USB_ResetPort>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3360      	adds	r3, #96	; 0x60
 8002cc0:	781b      	ldrb	r3, [r3, #0]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3350      	adds	r3, #80	; 0x50
 8002ce8:	681b      	ldr	r3, [r3, #0]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f005 f9f0 	bl	80080e8 <USB_GetCurrentFrame>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f005 f9cb 	bl	80080ba <USB_GetHostSpeed>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d11a      	bne.n	8002d94 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3361      	adds	r3, #97	; 0x61
 8002d7e:	2206      	movs	r2, #6
 8002d80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f005 fc32 	bl	80085f6 <USB_HC_Halt>
 8002d92:	e0af      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002daa:	d11b      	bne.n	8002de4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	461a      	mov	r2, r3
 8002dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	3361      	adds	r3, #97	; 0x61
 8002dce:	2207      	movs	r2, #7
 8002dd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f005 fc0a 	bl	80085f6 <USB_HC_Halt>
 8002de2:	e087      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d109      	bne.n	8002e0e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e06:	461a      	mov	r2, r3
 8002e08:	2320      	movs	r3, #32
 8002e0a:	6093      	str	r3, [r2, #8]
 8002e0c:	e072      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d11a      	bne.n	8002e5a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	461a      	mov	r2, r3
 8002e32:	2308      	movs	r3, #8
 8002e34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	3361      	adds	r3, #97	; 0x61
 8002e44:	2205      	movs	r2, #5
 8002e46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f005 fbcf 	bl	80085f6 <USB_HC_Halt>
 8002e58:	e04c      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e70:	d11b      	bne.n	8002eaa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3361      	adds	r3, #97	; 0x61
 8002e94:	2208      	movs	r2, #8
 8002e96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f005 fba7 	bl	80085f6 <USB_HC_Halt>
 8002ea8:	e024      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebc:	2b80      	cmp	r3, #128	; 0x80
 8002ebe:	d119      	bne.n	8002ef4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	3361      	adds	r3, #97	; 0x61
 8002ee0:	2206      	movs	r2, #6
 8002ee2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f005 fb81 	bl	80085f6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f0a:	d112      	bne.n	8002f32 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f005 fb6d 	bl	80085f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f2e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f30:	e24e      	b.n	80033d0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	f040 80df 	bne.w	8003108 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d019      	beq.n	8002f86 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3348      	adds	r3, #72	; 0x48
 8002f60:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	0159      	lsls	r1, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	440b      	add	r3, r1
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f74:	1ad2      	subs	r2, r2, r3
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	202c      	movs	r0, #44	; 0x2c
 8002f7c:	fb00 f303 	mul.w	r3, r0, r3
 8002f80:	440b      	add	r3, r1
 8002f82:	3350      	adds	r3, #80	; 0x50
 8002f84:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3361      	adds	r3, #97	; 0x61
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	212c      	movs	r1, #44	; 0x2c
 8002f9e:	fb01 f303 	mul.w	r3, r1, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	335c      	adds	r3, #92	; 0x5c
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2301      	movs	r3, #1
 8002fba:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	333f      	adds	r3, #63	; 0x3f
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d009      	beq.n	8002fe4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	333f      	adds	r3, #63	; 0x3f
 8002fde:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d111      	bne.n	8003008 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f005 fb01 	bl	80085f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	461a      	mov	r2, r3
 8003002:	2310      	movs	r3, #16
 8003004:	6093      	str	r3, [r2, #8]
 8003006:	e03a      	b.n	800307e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	333f      	adds	r3, #63	; 0x3f
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d009      	beq.n	8003030 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	333f      	adds	r3, #63	; 0x3f
 800302a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800302c:	2b01      	cmp	r3, #1
 800302e:	d126      	bne.n	800307e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	0151      	lsls	r1, r2, #5
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	440a      	add	r2, r1
 8003046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800304a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800304e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	212c      	movs	r1, #44	; 0x2c
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	4413      	add	r3, r2
 800305c:	3360      	adds	r3, #96	; 0x60
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	b2d9      	uxtb	r1, r3
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	202c      	movs	r0, #44	; 0x2c
 800306c:	fb00 f303 	mul.w	r3, r0, r3
 8003070:	4413      	add	r3, r2
 8003072:	3360      	adds	r3, #96	; 0x60
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f007 fd5f 	bl	800ab3c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d12b      	bne.n	80030de <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3348      	adds	r3, #72	; 0x48
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	202c      	movs	r0, #44	; 0x2c
 800309c:	fb00 f202 	mul.w	r2, r0, r2
 80030a0:	440a      	add	r2, r1
 80030a2:	3240      	adds	r2, #64	; 0x40
 80030a4:	8812      	ldrh	r2, [r2, #0]
 80030a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 818e 	beq.w	80033d0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3354      	adds	r3, #84	; 0x54
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2d8      	uxtb	r0, r3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	3354      	adds	r3, #84	; 0x54
 80030d8:	4602      	mov	r2, r0
 80030da:	701a      	strb	r2, [r3, #0]
}
 80030dc:	e178      	b.n	80033d0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	3354      	adds	r3, #84	; 0x54
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	f083 0301 	eor.w	r3, r3, #1
 80030f2:	b2d8      	uxtb	r0, r3
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3354      	adds	r3, #84	; 0x54
 8003102:	4602      	mov	r2, r0
 8003104:	701a      	strb	r2, [r3, #0]
}
 8003106:	e163      	b.n	80033d0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b02      	cmp	r3, #2
 800311c:	f040 80f6 	bne.w	800330c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3361      	adds	r3, #97	; 0x61
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d109      	bne.n	8003148 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	212c      	movs	r1, #44	; 0x2c
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	4413      	add	r3, r2
 8003140:	3360      	adds	r3, #96	; 0x60
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e0c9      	b.n	80032dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	3361      	adds	r3, #97	; 0x61
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b05      	cmp	r3, #5
 800315a:	d109      	bne.n	8003170 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	212c      	movs	r1, #44	; 0x2c
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	4413      	add	r3, r2
 8003168:	3360      	adds	r3, #96	; 0x60
 800316a:	2205      	movs	r2, #5
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	e0b5      	b.n	80032dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	3361      	adds	r3, #97	; 0x61
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b06      	cmp	r3, #6
 8003182:	d009      	beq.n	8003198 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	3361      	adds	r3, #97	; 0x61
 8003192:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003194:	2b08      	cmp	r3, #8
 8003196:	d150      	bne.n	800323a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	335c      	adds	r3, #92	; 0x5c
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	202c      	movs	r0, #44	; 0x2c
 80031b0:	fb00 f303 	mul.w	r3, r0, r3
 80031b4:	440b      	add	r3, r1
 80031b6:	335c      	adds	r3, #92	; 0x5c
 80031b8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	335c      	adds	r3, #92	; 0x5c
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d912      	bls.n	80031f4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	335c      	adds	r3, #92	; 0x5c
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	3360      	adds	r3, #96	; 0x60
 80031ee:	2204      	movs	r2, #4
 80031f0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031f2:	e073      	b.n	80032dc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	212c      	movs	r1, #44	; 0x2c
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	3360      	adds	r3, #96	; 0x60
 8003202:	2202      	movs	r2, #2
 8003204:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800321c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003224:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	461a      	mov	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003238:	e050      	b.n	80032dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	3361      	adds	r3, #97	; 0x61
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d122      	bne.n	8003294 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	3360      	adds	r3, #96	; 0x60
 800325c:	2202      	movs	r2, #2
 800325e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003276:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800327e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328c:	461a      	mov	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e023      	b.n	80032dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	3361      	adds	r3, #97	; 0x61
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b07      	cmp	r3, #7
 80032a6:	d119      	bne.n	80032dc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	335c      	adds	r3, #92	; 0x5c
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	202c      	movs	r0, #44	; 0x2c
 80032c0:	fb00 f303 	mul.w	r3, r0, r3
 80032c4:	440b      	add	r3, r1
 80032c6:	335c      	adds	r3, #92	; 0x5c
 80032c8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	3360      	adds	r3, #96	; 0x60
 80032d8:	2204      	movs	r2, #4
 80032da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e8:	461a      	mov	r2, r3
 80032ea:	2302      	movs	r3, #2
 80032ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	b2d9      	uxtb	r1, r3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	202c      	movs	r0, #44	; 0x2c
 80032f8:	fb00 f303 	mul.w	r3, r0, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	3360      	adds	r3, #96	; 0x60
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f007 fc19 	bl	800ab3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800330a:	e061      	b.n	80033d0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b10      	cmp	r3, #16
 8003320:	d156      	bne.n	80033d0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	212c      	movs	r1, #44	; 0x2c
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	4413      	add	r3, r2
 800332e:	333f      	adds	r3, #63	; 0x3f
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d111      	bne.n	800335a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	335c      	adds	r3, #92	; 0x5c
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f005 f94f 	bl	80085f6 <USB_HC_Halt>
 8003358:	e031      	b.n	80033be <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	333f      	adds	r3, #63	; 0x3f
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	333f      	adds	r3, #63	; 0x3f
 800337c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800337e:	2b02      	cmp	r3, #2
 8003380:	d11d      	bne.n	80033be <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	335c      	adds	r3, #92	; 0x5c
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d110      	bne.n	80033be <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3361      	adds	r3, #97	; 0x61
 80033aa:	2203      	movs	r2, #3
 80033ac:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f005 f91c 	bl	80085f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ca:	461a      	mov	r2, r3
 80033cc:	2310      	movs	r3, #16
 80033ce:	6093      	str	r3, [r2, #8]
}
 80033d0:	bf00      	nop
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b04      	cmp	r3, #4
 8003406:	d11a      	bne.n	800343e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	461a      	mov	r2, r3
 8003416:	2304      	movs	r3, #4
 8003418:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	212c      	movs	r1, #44	; 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	3361      	adds	r3, #97	; 0x61
 8003428:	2206      	movs	r2, #6
 800342a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f005 f8dd 	bl	80085f6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800343c:	e331      	b.n	8003aa2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b20      	cmp	r3, #32
 8003452:	d12e      	bne.n	80034b2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	4413      	add	r3, r2
 800345c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003460:	461a      	mov	r2, r3
 8003462:	2320      	movs	r3, #32
 8003464:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	212c      	movs	r1, #44	; 0x2c
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	333d      	adds	r3, #61	; 0x3d
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	f040 8313 	bne.w	8003aa2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	333d      	adds	r3, #61	; 0x3d
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	212c      	movs	r1, #44	; 0x2c
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	3360      	adds	r3, #96	; 0x60
 800349c:	2202      	movs	r2, #2
 800349e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f005 f8a3 	bl	80085f6 <USB_HC_Halt>
}
 80034b0:	e2f7      	b.n	8003aa2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c8:	d112      	bne.n	80034f0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d6:	461a      	mov	r2, r3
 80034d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f005 f884 	bl	80085f6 <USB_HC_Halt>
}
 80034ee:	e2d8      	b.n	8003aa2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b01      	cmp	r3, #1
 8003504:	d140      	bne.n	8003588 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	335c      	adds	r3, #92	; 0x5c
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4413      	add	r3, r2
 8003520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d111      	bne.n	8003552 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	333d      	adds	r3, #61	; 0x3d
 800353c:	2201      	movs	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	461a      	mov	r2, r3
 800354e:	2340      	movs	r3, #64	; 0x40
 8003550:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	461a      	mov	r2, r3
 8003560:	2301      	movs	r3, #1
 8003562:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	3361      	adds	r3, #97	; 0x61
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f005 f838 	bl	80085f6 <USB_HC_Halt>
}
 8003586:	e28c      	b.n	8003aa2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d12c      	bne.n	80035f8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	3361      	adds	r3, #97	; 0x61
 80035ac:	2204      	movs	r2, #4
 80035ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	212c      	movs	r1, #44	; 0x2c
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	333d      	adds	r3, #61	; 0x3d
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	212c      	movs	r1, #44	; 0x2c
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	335c      	adds	r3, #92	; 0x5c
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f005 f809 	bl	80085f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	461a      	mov	r2, r3
 80035f2:	2340      	movs	r3, #64	; 0x40
 80035f4:	6093      	str	r3, [r2, #8]
}
 80035f6:	e254      	b.n	8003aa2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b08      	cmp	r3, #8
 800360c:	d11a      	bne.n	8003644 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	461a      	mov	r2, r3
 800361c:	2308      	movs	r3, #8
 800361e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	3361      	adds	r3, #97	; 0x61
 800362e:	2205      	movs	r2, #5
 8003630:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f004 ffda 	bl	80085f6 <USB_HC_Halt>
}
 8003642:	e22e      	b.n	8003aa2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	4413      	add	r3, r2
 800364c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b10      	cmp	r3, #16
 8003658:	d140      	bne.n	80036dc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	335c      	adds	r3, #92	; 0x5c
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3361      	adds	r3, #97	; 0x61
 800367a:	2203      	movs	r2, #3
 800367c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	333d      	adds	r3, #61	; 0x3d
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d112      	bne.n	80036b8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	333c      	adds	r3, #60	; 0x3c
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d108      	bne.n	80036b8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	333d      	adds	r3, #61	; 0x3d
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 ff97 	bl	80085f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d4:	461a      	mov	r2, r3
 80036d6:	2310      	movs	r3, #16
 80036d8:	6093      	str	r3, [r2, #8]
}
 80036da:	e1e2      	b.n	8003aa2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b80      	cmp	r3, #128	; 0x80
 80036f0:	d164      	bne.n	80037bc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d111      	bne.n	800371e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3361      	adds	r3, #97	; 0x61
 8003708:	2206      	movs	r2, #6
 800370a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f004 ff6d 	bl	80085f6 <USB_HC_Halt>
 800371c:	e044      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	335c      	adds	r3, #92	; 0x5c
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	202c      	movs	r0, #44	; 0x2c
 8003736:	fb00 f303 	mul.w	r3, r0, r3
 800373a:	440b      	add	r3, r1
 800373c:	335c      	adds	r3, #92	; 0x5c
 800373e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	335c      	adds	r3, #92	; 0x5c
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d920      	bls.n	8003796 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	212c      	movs	r1, #44	; 0x2c
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	335c      	adds	r3, #92	; 0x5c
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3360      	adds	r3, #96	; 0x60
 8003774:	2204      	movs	r2, #4
 8003776:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	b2d9      	uxtb	r1, r3
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	202c      	movs	r0, #44	; 0x2c
 8003782:	fb00 f303 	mul.w	r3, r0, r3
 8003786:	4413      	add	r3, r2
 8003788:	3360      	adds	r3, #96	; 0x60
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f007 f9d4 	bl	800ab3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003794:	e008      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	212c      	movs	r1, #44	; 0x2c
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	3360      	adds	r3, #96	; 0x60
 80037a4:	2202      	movs	r2, #2
 80037a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b4:	461a      	mov	r2, r3
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	6093      	str	r3, [r2, #8]
}
 80037ba:	e172      	b.n	8003aa2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d2:	d11b      	bne.n	800380c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	212c      	movs	r1, #44	; 0x2c
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	3361      	adds	r3, #97	; 0x61
 80037e2:	2208      	movs	r2, #8
 80037e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	4611      	mov	r1, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f004 ff00 	bl	80085f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003802:	461a      	mov	r2, r3
 8003804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003808:	6093      	str	r3, [r2, #8]
}
 800380a:	e14a      	b.n	8003aa2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	4413      	add	r3, r2
 8003814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	f040 813f 	bne.w	8003aa2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	3361      	adds	r3, #97	; 0x61
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d17d      	bne.n	8003934 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	212c      	movs	r1, #44	; 0x2c
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	3360      	adds	r3, #96	; 0x60
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	333f      	adds	r3, #63	; 0x3f
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d00a      	beq.n	8003874 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	212c      	movs	r1, #44	; 0x2c
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	4413      	add	r3, r2
 800386a:	333f      	adds	r3, #63	; 0x3f
 800386c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800386e:	2b03      	cmp	r3, #3
 8003870:	f040 8100 	bne.w	8003a74 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d113      	bne.n	80038a4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3355      	adds	r3, #85	; 0x55
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	f083 0301 	eor.w	r3, r3, #1
 8003890:	b2d8      	uxtb	r0, r3
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3355      	adds	r3, #85	; 0x55
 80038a0:	4602      	mov	r2, r0
 80038a2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	f040 80e3 	bne.w	8003a74 <HCD_HC_OUT_IRQHandler+0x69c>
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	212c      	movs	r1, #44	; 0x2c
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	4413      	add	r3, r2
 80038ba:	334c      	adds	r3, #76	; 0x4c
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80d8 	beq.w	8003a74 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	212c      	movs	r1, #44	; 0x2c
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	334c      	adds	r3, #76	; 0x4c
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	202c      	movs	r0, #44	; 0x2c
 80038da:	fb00 f202 	mul.w	r2, r0, r2
 80038de:	440a      	add	r2, r1
 80038e0:	3240      	adds	r2, #64	; 0x40
 80038e2:	8812      	ldrh	r2, [r2, #0]
 80038e4:	4413      	add	r3, r2
 80038e6:	3b01      	subs	r3, #1
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	202c      	movs	r0, #44	; 0x2c
 80038ee:	fb00 f202 	mul.w	r2, r0, r2
 80038f2:	440a      	add	r2, r1
 80038f4:	3240      	adds	r2, #64	; 0x40
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80b5 	beq.w	8003a74 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	3355      	adds	r3, #85	; 0x55
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	f083 0301 	eor.w	r3, r3, #1
 800391e:	b2d8      	uxtb	r0, r3
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	212c      	movs	r1, #44	; 0x2c
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	3355      	adds	r3, #85	; 0x55
 800392e:	4602      	mov	r2, r0
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e09f      	b.n	8003a74 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	212c      	movs	r1, #44	; 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	3361      	adds	r3, #97	; 0x61
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d109      	bne.n	800395c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	212c      	movs	r1, #44	; 0x2c
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	3360      	adds	r3, #96	; 0x60
 8003956:	2202      	movs	r2, #2
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e08b      	b.n	8003a74 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3361      	adds	r3, #97	; 0x61
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d109      	bne.n	8003984 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3360      	adds	r3, #96	; 0x60
 800397e:	2202      	movs	r2, #2
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e077      	b.n	8003a74 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	3361      	adds	r3, #97	; 0x61
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b05      	cmp	r3, #5
 8003996:	d109      	bne.n	80039ac <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	212c      	movs	r1, #44	; 0x2c
 800399e:	fb01 f303 	mul.w	r3, r1, r3
 80039a2:	4413      	add	r3, r2
 80039a4:	3360      	adds	r3, #96	; 0x60
 80039a6:	2205      	movs	r2, #5
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	e063      	b.n	8003a74 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	212c      	movs	r1, #44	; 0x2c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	3361      	adds	r3, #97	; 0x61
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b06      	cmp	r3, #6
 80039be:	d009      	beq.n	80039d4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	212c      	movs	r1, #44	; 0x2c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	3361      	adds	r3, #97	; 0x61
 80039ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d14f      	bne.n	8003a74 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	212c      	movs	r1, #44	; 0x2c
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	4413      	add	r3, r2
 80039e0:	335c      	adds	r3, #92	; 0x5c
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	202c      	movs	r0, #44	; 0x2c
 80039ec:	fb00 f303 	mul.w	r3, r0, r3
 80039f0:	440b      	add	r3, r1
 80039f2:	335c      	adds	r3, #92	; 0x5c
 80039f4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	212c      	movs	r1, #44	; 0x2c
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	4413      	add	r3, r2
 8003a02:	335c      	adds	r3, #92	; 0x5c
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d912      	bls.n	8003a30 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	212c      	movs	r1, #44	; 0x2c
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	335c      	adds	r3, #92	; 0x5c
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	212c      	movs	r1, #44	; 0x2c
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	3360      	adds	r3, #96	; 0x60
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e021      	b.n	8003a74 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	212c      	movs	r1, #44	; 0x2c
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3360      	adds	r3, #96	; 0x60
 8003a3e:	2202      	movs	r2, #2
 8003a40:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a58:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a60:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6e:	461a      	mov	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a80:	461a      	mov	r2, r3
 8003a82:	2302      	movs	r3, #2
 8003a84:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	b2d9      	uxtb	r1, r3
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	202c      	movs	r0, #44	; 0x2c
 8003a90:	fb00 f303 	mul.w	r3, r0, r3
 8003a94:	4413      	add	r3, r2
 8003a96:	3360      	adds	r3, #96	; 0x60
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f007 f84d 	bl	800ab3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003aa2:	bf00      	nop
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b08a      	sub	sp, #40	; 0x28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	0c5b      	lsrs	r3, r3, #17
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ade:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d004      	beq.n	8003af0 <HCD_RXQLVL_IRQHandler+0x46>
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	f000 80a9 	beq.w	8003c40 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003aee:	e0aa      	b.n	8003c46 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80a6 	beq.w	8003c44 <HCD_RXQLVL_IRQHandler+0x19a>
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	212c      	movs	r1, #44	; 0x2c
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	3344      	adds	r3, #68	; 0x44
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 809b 	beq.w	8003c44 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	3350      	adds	r3, #80	; 0x50
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	441a      	add	r2, r3
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	202c      	movs	r0, #44	; 0x2c
 8003b28:	fb00 f303 	mul.w	r3, r0, r3
 8003b2c:	440b      	add	r3, r1
 8003b2e:	334c      	adds	r3, #76	; 0x4c
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d87a      	bhi.n	8003c2c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	212c      	movs	r1, #44	; 0x2c
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	3344      	adds	r3, #68	; 0x44
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	b292      	uxth	r2, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f004 f8a8 	bl	8007ca4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3344      	adds	r3, #68	; 0x44
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	441a      	add	r2, r3
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	202c      	movs	r0, #44	; 0x2c
 8003b6e:	fb00 f303 	mul.w	r3, r0, r3
 8003b72:	440b      	add	r3, r1
 8003b74:	3344      	adds	r3, #68	; 0x44
 8003b76:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	212c      	movs	r1, #44	; 0x2c
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	3350      	adds	r3, #80	; 0x50
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	441a      	add	r2, r3
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	202c      	movs	r0, #44	; 0x2c
 8003b92:	fb00 f303 	mul.w	r3, r0, r3
 8003b96:	440b      	add	r3, r1
 8003b98:	3350      	adds	r3, #80	; 0x50
 8003b9a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	0cdb      	lsrs	r3, r3, #19
 8003bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bb0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	212c      	movs	r1, #44	; 0x2c
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3340      	adds	r3, #64	; 0x40
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d13c      	bne.n	8003c44 <HCD_RXQLVL_IRQHandler+0x19a>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d039      	beq.n	8003c44 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003be6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bee:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	212c      	movs	r1, #44	; 0x2c
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3354      	adds	r3, #84	; 0x54
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	f083 0301 	eor.w	r3, r3, #1
 8003c16:	b2d8      	uxtb	r0, r3
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	212c      	movs	r1, #44	; 0x2c
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	3354      	adds	r3, #84	; 0x54
 8003c26:	4602      	mov	r2, r0
 8003c28:	701a      	strb	r2, [r3, #0]
      break;
 8003c2a:	e00b      	b.n	8003c44 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	212c      	movs	r1, #44	; 0x2c
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	3360      	adds	r3, #96	; 0x60
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	701a      	strb	r2, [r3, #0]
      break;
 8003c3e:	e001      	b.n	8003c44 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003c40:	bf00      	nop
 8003c42:	e000      	b.n	8003c46 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003c44:	bf00      	nop
  }
}
 8003c46:	bf00      	nop
 8003c48:	3728      	adds	r7, #40	; 0x28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c7a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d10b      	bne.n	8003c9e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f006 ff37 	bl	800ab04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f043 0302 	orr.w	r3, r3, #2
 8003c9c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d132      	bne.n	8003d0e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f043 0308 	orr.w	r3, r3, #8
 8003cae:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d126      	bne.n	8003d08 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d113      	bne.n	8003cea <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003cc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ccc:	d106      	bne.n	8003cdc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f004 f953 	bl	8007f80 <USB_InitFSLSPClkSel>
 8003cda:	e011      	b.n	8003d00 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f004 f94c 	bl	8007f80 <USB_InitFSLSPClkSel>
 8003ce8:	e00a      	b.n	8003d00 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d106      	bne.n	8003d00 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003cfe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f006 ff29 	bl	800ab58 <HAL_HCD_PortEnabled_Callback>
 8003d06:	e002      	b.n	8003d0e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f006 ff33 	bl	800ab74 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d103      	bne.n	8003d20 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f043 0320 	orr.w	r3, r3, #32
 8003d1e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d26:	461a      	mov	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6013      	str	r3, [r2, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e12b      	b.n	8003f9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fd fe18 	bl	8001990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2224      	movs	r2, #36	; 0x24
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0201 	bic.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d98:	f003 fc36 	bl	8007608 <HAL_RCC_GetPCLK1Freq>
 8003d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4a81      	ldr	r2, [pc, #516]	; (8003fa8 <HAL_I2C_Init+0x274>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d807      	bhi.n	8003db8 <HAL_I2C_Init+0x84>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4a80      	ldr	r2, [pc, #512]	; (8003fac <HAL_I2C_Init+0x278>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	bf94      	ite	ls
 8003db0:	2301      	movls	r3, #1
 8003db2:	2300      	movhi	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e006      	b.n	8003dc6 <HAL_I2C_Init+0x92>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a7d      	ldr	r2, [pc, #500]	; (8003fb0 <HAL_I2C_Init+0x27c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	bf94      	ite	ls
 8003dc0:	2301      	movls	r3, #1
 8003dc2:	2300      	movhi	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0e7      	b.n	8003f9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a78      	ldr	r2, [pc, #480]	; (8003fb4 <HAL_I2C_Init+0x280>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	0c9b      	lsrs	r3, r3, #18
 8003dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4a6a      	ldr	r2, [pc, #424]	; (8003fa8 <HAL_I2C_Init+0x274>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d802      	bhi.n	8003e08 <HAL_I2C_Init+0xd4>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	3301      	adds	r3, #1
 8003e06:	e009      	b.n	8003e1c <HAL_I2C_Init+0xe8>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
 8003e12:	4a69      	ldr	r2, [pc, #420]	; (8003fb8 <HAL_I2C_Init+0x284>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	099b      	lsrs	r3, r3, #6
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	495c      	ldr	r1, [pc, #368]	; (8003fa8 <HAL_I2C_Init+0x274>)
 8003e38:	428b      	cmp	r3, r1
 8003e3a:	d819      	bhi.n	8003e70 <HAL_I2C_Init+0x13c>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1e59      	subs	r1, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e4a:	1c59      	adds	r1, r3, #1
 8003e4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e50:	400b      	ands	r3, r1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_I2C_Init+0x138>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1e59      	subs	r1, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e64:	3301      	adds	r3, #1
 8003e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6a:	e051      	b.n	8003f10 <HAL_I2C_Init+0x1dc>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	e04f      	b.n	8003f10 <HAL_I2C_Init+0x1dc>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d111      	bne.n	8003e9c <HAL_I2C_Init+0x168>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1e58      	subs	r0, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	440b      	add	r3, r1
 8003e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	e012      	b.n	8003ec2 <HAL_I2C_Init+0x18e>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1e58      	subs	r0, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	0099      	lsls	r1, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_I2C_Init+0x196>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e022      	b.n	8003f10 <HAL_I2C_Init+0x1dc>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_I2C_Init+0x1bc>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1e58      	subs	r0, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	460b      	mov	r3, r1
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	440b      	add	r3, r1
 8003ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eee:	e00f      	b.n	8003f10 <HAL_I2C_Init+0x1dc>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1e58      	subs	r0, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6859      	ldr	r1, [r3, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	0099      	lsls	r1, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f06:	3301      	adds	r3, #1
 8003f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	6809      	ldr	r1, [r1, #0]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6911      	ldr	r1, [r2, #16]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68d2      	ldr	r2, [r2, #12]
 8003f4a:	4311      	orrs	r1, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695a      	ldr	r2, [r3, #20]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	000186a0 	.word	0x000186a0
 8003fac:	001e847f 	.word	0x001e847f
 8003fb0:	003d08ff 	.word	0x003d08ff
 8003fb4:	431bde83 	.word	0x431bde83
 8003fb8:	10624dd3 	.word	0x10624dd3

08003fbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	460b      	mov	r3, r1
 8003fca:	817b      	strh	r3, [r7, #10]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fd0:	f7fd ff64 	bl	8001e9c <HAL_GetTick>
 8003fd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	f040 80e0 	bne.w	80041a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	2319      	movs	r3, #25
 8003fea:	2201      	movs	r2, #1
 8003fec:	4970      	ldr	r1, [pc, #448]	; (80041b0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f001 ffd0 	bl	8005f94 <I2C_WaitOnFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e0d3      	b.n	80041a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_I2C_Master_Transmit+0x50>
 8004008:	2302      	movs	r3, #2
 800400a:	e0cc      	b.n	80041a6 <HAL_I2C_Master_Transmit+0x1ea>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b01      	cmp	r3, #1
 8004020:	d007      	beq.n	8004032 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004040:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2221      	movs	r2, #33	; 0x21
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2210      	movs	r2, #16
 800404e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	893a      	ldrh	r2, [r7, #8]
 8004062:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a50      	ldr	r2, [pc, #320]	; (80041b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004074:	8979      	ldrh	r1, [r7, #10]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	6a3a      	ldr	r2, [r7, #32]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f001 fd92 	bl	8005ba4 <I2C_MasterRequestWrite>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e08d      	b.n	80041a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040a0:	e066      	b.n	8004170 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	6a39      	ldr	r1, [r7, #32]
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f002 f84a 	bl	8006140 <I2C_WaitOnTXEFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00d      	beq.n	80040ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d107      	bne.n	80040ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e06b      	b.n	80041a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	781a      	ldrb	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b04      	cmp	r3, #4
 800410a:	d11b      	bne.n	8004144 <HAL_I2C_Master_Transmit+0x188>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004110:	2b00      	cmp	r3, #0
 8004112:	d017      	beq.n	8004144 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	781a      	ldrb	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	6a39      	ldr	r1, [r7, #32]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f002 f83a 	bl	80061c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00d      	beq.n	8004170 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	2b04      	cmp	r3, #4
 800415a:	d107      	bne.n	800416c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e01a      	b.n	80041a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	2b00      	cmp	r3, #0
 8004176:	d194      	bne.n	80040a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	e000      	b.n	80041a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041a4:	2302      	movs	r3, #2
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	00100002 	.word	0x00100002
 80041b4:	ffff0000 	.word	0xffff0000

080041b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08c      	sub	sp, #48	; 0x30
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	461a      	mov	r2, r3
 80041c4:	460b      	mov	r3, r1
 80041c6:	817b      	strh	r3, [r7, #10]
 80041c8:	4613      	mov	r3, r2
 80041ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041cc:	f7fd fe66 	bl	8001e9c <HAL_GetTick>
 80041d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b20      	cmp	r3, #32
 80041dc:	f040 820b 	bne.w	80045f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	2319      	movs	r3, #25
 80041e6:	2201      	movs	r2, #1
 80041e8:	497c      	ldr	r1, [pc, #496]	; (80043dc <HAL_I2C_Master_Receive+0x224>)
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f001 fed2 	bl	8005f94 <I2C_WaitOnFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
 80041f8:	e1fe      	b.n	80045f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_I2C_Master_Receive+0x50>
 8004204:	2302      	movs	r3, #2
 8004206:	e1f7      	b.n	80045f8 <HAL_I2C_Master_Receive+0x440>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d007      	beq.n	800422e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0201 	orr.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800423c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2222      	movs	r2, #34	; 0x22
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2210      	movs	r2, #16
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	893a      	ldrh	r2, [r7, #8]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a5c      	ldr	r2, [pc, #368]	; (80043e0 <HAL_I2C_Master_Receive+0x228>)
 800426e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004270:	8979      	ldrh	r1, [r7, #10]
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f001 fd16 	bl	8005ca8 <I2C_MasterRequestRead>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e1b8      	b.n	80045f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428a:	2b00      	cmp	r3, #0
 800428c:	d113      	bne.n	80042b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428e:	2300      	movs	r3, #0
 8004290:	623b      	str	r3, [r7, #32]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	623b      	str	r3, [r7, #32]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	e18c      	b.n	80045d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d11b      	bne.n	80042f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	e16c      	b.n	80045d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d11b      	bne.n	8004336 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800431c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	e14c      	b.n	80045d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004344:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800435c:	e138      	b.n	80045d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	2b03      	cmp	r3, #3
 8004364:	f200 80f1 	bhi.w	800454a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436c:	2b01      	cmp	r3, #1
 800436e:	d123      	bne.n	80043b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004372:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f001 ff97 	bl	80062a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e139      	b.n	80045f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b6:	e10b      	b.n	80045d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d14e      	bne.n	800445e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	2200      	movs	r2, #0
 80043c8:	4906      	ldr	r1, [pc, #24]	; (80043e4 <HAL_I2C_Master_Receive+0x22c>)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f001 fde2 	bl	8005f94 <I2C_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e10e      	b.n	80045f8 <HAL_I2C_Master_Receive+0x440>
 80043da:	bf00      	nop
 80043dc:	00100002 	.word	0x00100002
 80043e0:	ffff0000 	.word	0xffff0000
 80043e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800445c:	e0b8      	b.n	80045d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	2200      	movs	r2, #0
 8004466:	4966      	ldr	r1, [pc, #408]	; (8004600 <HAL_I2C_Master_Receive+0x448>)
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f001 fd93 	bl	8005f94 <I2C_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0bf      	b.n	80045f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	2200      	movs	r2, #0
 80044c2:	494f      	ldr	r1, [pc, #316]	; (8004600 <HAL_I2C_Master_Receive+0x448>)
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f001 fd65 	bl	8005f94 <I2C_WaitOnFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e091      	b.n	80045f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004548:	e042      	b.n	80045d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f001 feaa 	bl	80062a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e04c      	b.n	80045f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b04      	cmp	r3, #4
 800459c:	d118      	bne.n	80045d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f47f aec2 	bne.w	800435e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	e000      	b.n	80045f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045f6:	2302      	movs	r3, #2
  }
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3728      	adds	r7, #40	; 0x28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	00010004 	.word	0x00010004

08004604 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004624:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2b10      	cmp	r3, #16
 8004632:	d003      	beq.n	800463c <HAL_I2C_EV_IRQHandler+0x38>
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b40      	cmp	r3, #64	; 0x40
 8004638:	f040 80c1 	bne.w	80047be <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10d      	bne.n	8004672 <HAL_I2C_EV_IRQHandler+0x6e>
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800465c:	d003      	beq.n	8004666 <HAL_I2C_EV_IRQHandler+0x62>
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004664:	d101      	bne.n	800466a <HAL_I2C_EV_IRQHandler+0x66>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <HAL_I2C_EV_IRQHandler+0x68>
 800466a:	2300      	movs	r3, #0
 800466c:	2b01      	cmp	r3, #1
 800466e:	f000 8132 	beq.w	80048d6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00c      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x92>
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	0a5b      	lsrs	r3, r3, #9
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d006      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f001 fe92 	bl	80063b2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fcdc 	bl	800504c <I2C_Master_SB>
 8004694:	e092      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	08db      	lsrs	r3, r3, #3
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_I2C_EV_IRQHandler+0xb2>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	0a5b      	lsrs	r3, r3, #9
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fd52 	bl	8005158 <I2C_Master_ADD10>
 80046b4:	e082      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0xd2>
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	0a5b      	lsrs	r3, r3, #9
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fd6c 	bl	80051ac <I2C_Master_ADDR>
 80046d4:	e072      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d03b      	beq.n	800475a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f0:	f000 80f3 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	09db      	lsrs	r3, r3, #7
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00f      	beq.n	8004720 <HAL_I2C_EV_IRQHandler+0x11c>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	0a9b      	lsrs	r3, r3, #10
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <HAL_I2C_EV_IRQHandler+0x11c>
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	089b      	lsrs	r3, r3, #2
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d103      	bne.n	8004720 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f94c 	bl	80049b6 <I2C_MasterTransmit_TXE>
 800471e:	e04d      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	089b      	lsrs	r3, r3, #2
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80d6 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	0a5b      	lsrs	r3, r3, #9
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80cf 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800473c:	7bbb      	ldrb	r3, [r7, #14]
 800473e:	2b21      	cmp	r3, #33	; 0x21
 8004740:	d103      	bne.n	800474a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f9d3 	bl	8004aee <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004748:	e0c7      	b.n	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	f040 80c4 	bne.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fa41 	bl	8004bda <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004758:	e0bf      	b.n	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004768:	f000 80b7 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	099b      	lsrs	r3, r3, #6
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00f      	beq.n	8004798 <HAL_I2C_EV_IRQHandler+0x194>
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	0a9b      	lsrs	r3, r3, #10
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <HAL_I2C_EV_IRQHandler+0x194>
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fab6 	bl	8004d02 <I2C_MasterReceive_RXNE>
 8004796:	e011      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	089b      	lsrs	r3, r3, #2
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 809a 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	0a5b      	lsrs	r3, r3, #9
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8093 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fb5f 	bl	8004e78 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ba:	e08e      	b.n	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
 80047bc:	e08d      	b.n	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e007      	b.n	80047e0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d012      	beq.n	8004812 <HAL_I2C_EV_IRQHandler+0x20e>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	0a5b      	lsrs	r3, r3, #9
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00c      	beq.n	8004812 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004808:	69b9      	ldr	r1, [r7, #24]
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 ff1d 	bl	800564a <I2C_Slave_ADDR>
 8004810:	e066      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <HAL_I2C_EV_IRQHandler+0x22e>
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	0a5b      	lsrs	r3, r3, #9
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 ff58 	bl	80056e0 <I2C_Slave_STOPF>
 8004830:	e056      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004832:	7bbb      	ldrb	r3, [r7, #14]
 8004834:	2b21      	cmp	r3, #33	; 0x21
 8004836:	d002      	beq.n	800483e <HAL_I2C_EV_IRQHandler+0x23a>
 8004838:	7bbb      	ldrb	r3, [r7, #14]
 800483a:	2b29      	cmp	r3, #41	; 0x29
 800483c:	d125      	bne.n	800488a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	09db      	lsrs	r3, r3, #7
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00f      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0x266>
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	0a9b      	lsrs	r3, r3, #10
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0x266>
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fe33 	bl	80054ce <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004868:	e039      	b.n	80048de <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	089b      	lsrs	r3, r3, #2
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d033      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0x2da>
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	0a5b      	lsrs	r3, r3, #9
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d02d      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fe60 	bl	8005548 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004888:	e029      	b.n	80048de <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	099b      	lsrs	r3, r3, #6
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00f      	beq.n	80048b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	0a9b      	lsrs	r3, r3, #10
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fe6b 	bl	800558a <I2C_SlaveReceive_RXNE>
 80048b4:	e014      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00e      	beq.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	0a5b      	lsrs	r3, r3, #9
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fe99 	bl	8005606 <I2C_SlaveReceive_BTF>
 80048d4:	e004      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	460b      	mov	r3, r1
 8004940:	70fb      	strb	r3, [r7, #3]
 8004942:	4613      	mov	r3, r2
 8004944:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049cc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d150      	bne.n	8004a7e <I2C_MasterTransmit_TXE+0xc8>
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	2b21      	cmp	r3, #33	; 0x21
 80049e0:	d14d      	bne.n	8004a7e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d01d      	beq.n	8004a24 <I2C_MasterTransmit_TXE+0x6e>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d01a      	beq.n	8004a24 <I2C_MasterTransmit_TXE+0x6e>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049f4:	d016      	beq.n	8004a24 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a04:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2211      	movs	r2, #17
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff62 	bl	80048e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a22:	e060      	b.n	8004ae6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a32:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a42:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d107      	bne.n	8004a6e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff ff7d 	bl	8004966 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a6c:	e03b      	b.n	8004ae6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff ff35 	bl	80048e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a7c:	e033      	b.n	8004ae6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	2b21      	cmp	r3, #33	; 0x21
 8004a82:	d005      	beq.n	8004a90 <I2C_MasterTransmit_TXE+0xda>
 8004a84:	7bbb      	ldrb	r3, [r7, #14]
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	d12d      	bne.n	8004ae6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	2b22      	cmp	r3, #34	; 0x22
 8004a8e:	d12a      	bne.n	8004ae6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d108      	bne.n	8004aac <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004aaa:	e01c      	b.n	8004ae6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d103      	bne.n	8004ac0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f88e 	bl	8004bda <I2C_MemoryTransmit_TXE_BTF>
}
 8004abe:	e012      	b.n	8004ae6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	781a      	ldrb	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ae4:	e7ff      	b.n	8004ae6 <I2C_MasterTransmit_TXE+0x130>
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b21      	cmp	r3, #33	; 0x21
 8004b06:	d164      	bne.n	8004bd2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d012      	beq.n	8004b38 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	781a      	ldrb	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004b36:	e04c      	b.n	8004bd2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d01d      	beq.n	8004b7a <I2C_MasterTransmit_BTF+0x8c>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d01a      	beq.n	8004b7a <I2C_MasterTransmit_BTF+0x8c>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b4a:	d016      	beq.n	8004b7a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b5a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2211      	movs	r2, #17
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff feb7 	bl	80048e6 <HAL_I2C_MasterTxCpltCallback>
}
 8004b78:	e02b      	b.n	8004bd2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b88:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b98:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b40      	cmp	r3, #64	; 0x40
 8004bb2:	d107      	bne.n	8004bc4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fed2 	bl	8004966 <HAL_I2C_MemTxCpltCallback>
}
 8004bc2:	e006      	b.n	8004bd2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff fe8a 	bl	80048e6 <HAL_I2C_MasterTxCpltCallback>
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d11d      	bne.n	8004c2e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d10b      	bne.n	8004c12 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	1c9a      	adds	r2, r3, #2
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004c10:	e073      	b.n	8004cfa <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	121b      	asrs	r3, r3, #8
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c2c:	e065      	b.n	8004cfa <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d10b      	bne.n	8004c4e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c4c:	e055      	b.n	8004cfa <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d151      	bne.n	8004cfa <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	2b22      	cmp	r3, #34	; 0x22
 8004c5a:	d10d      	bne.n	8004c78 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c6a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c76:	e040      	b.n	8004cfa <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d015      	beq.n	8004cae <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b21      	cmp	r3, #33	; 0x21
 8004c86:	d112      	bne.n	8004cae <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cac:	e025      	b.n	8004cfa <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d120      	bne.n	8004cfa <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	2b21      	cmp	r3, #33	; 0x21
 8004cbc:	d11d      	bne.n	8004cfa <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ccc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cdc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff fe36 	bl	8004966 <HAL_I2C_MemTxCpltCallback>
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b22      	cmp	r3, #34	; 0x22
 8004d14:	f040 80ac 	bne.w	8004e70 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d921      	bls.n	8004d6a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	f040 808c 	bne.w	8004e70 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d66:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004d68:	e082      	b.n	8004e70 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d075      	beq.n	8004e5e <I2C_MasterReceive_RXNE+0x15c>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d002      	beq.n	8004d7e <I2C_MasterReceive_RXNE+0x7c>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d16f      	bne.n	8004e5e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f001 fa60 	bl	8006244 <I2C_WaitOnSTOPRequestThroughIT>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d142      	bne.n	8004e10 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d98:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004da8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b40      	cmp	r3, #64	; 0x40
 8004de2:	d10a      	bne.n	8004dfa <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff fdc1 	bl	800497a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004df8:	e03a      	b.n	8004e70 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2212      	movs	r2, #18
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fd76 	bl	80048fa <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e0e:	e02f      	b.n	8004e70 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e1e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fd99 	bl	800498e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e5c:	e008      	b.n	8004e70 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6c:	605a      	str	r2, [r3, #4]
}
 8004e6e:	e7ff      	b.n	8004e70 <I2C_MasterReceive_RXNE+0x16e>
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d11b      	bne.n	8004ec8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004ec6:	e0bd      	b.n	8005044 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d129      	bne.n	8004f26 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d00a      	beq.n	8004efe <I2C_MasterReceive_BTF+0x86>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d007      	beq.n	8004efe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f24:	e08e      	b.n	8005044 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d176      	bne.n	800501e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d002      	beq.n	8004f3c <I2C_MasterReceive_BTF+0xc4>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d108      	bne.n	8004f4e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	e019      	b.n	8004f82 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d002      	beq.n	8004f5a <I2C_MasterReceive_BTF+0xe2>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d108      	bne.n	8004f6c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	e00a      	b.n	8004f82 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d007      	beq.n	8004f82 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f80:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fdc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d10a      	bne.n	8005008 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff fcba 	bl	800497a <HAL_I2C_MemRxCpltCallback>
}
 8005006:	e01d      	b.n	8005044 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2212      	movs	r2, #18
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff fc6f 	bl	80048fa <HAL_I2C_MasterRxCpltCallback>
}
 800501c:	e012      	b.n	8005044 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d117      	bne.n	8005090 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005064:	2b00      	cmp	r3, #0
 8005066:	d109      	bne.n	800507c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005078:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800507a:	e067      	b.n	800514c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	b2da      	uxtb	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	611a      	str	r2, [r3, #16]
}
 800508e:	e05d      	b.n	800514c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005098:	d133      	bne.n	8005102 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b21      	cmp	r3, #33	; 0x21
 80050a4:	d109      	bne.n	80050ba <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050b6:	611a      	str	r2, [r3, #16]
 80050b8:	e008      	b.n	80050cc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d004      	beq.n	80050de <I2C_Master_SB+0x92>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d108      	bne.n	80050f0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d032      	beq.n	800514c <I2C_Master_SB+0x100>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02d      	beq.n	800514c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050fe:	605a      	str	r2, [r3, #4]
}
 8005100:	e024      	b.n	800514c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10e      	bne.n	8005128 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510e:	b29b      	uxth	r3, r3
 8005110:	11db      	asrs	r3, r3, #7
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f003 0306 	and.w	r3, r3, #6
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f063 030f 	orn	r3, r3, #15
 800511e:	b2da      	uxtb	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	611a      	str	r2, [r3, #16]
}
 8005126:	e011      	b.n	800514c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512c:	2b01      	cmp	r3, #1
 800512e:	d10d      	bne.n	800514c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005134:	b29b      	uxth	r3, r3
 8005136:	11db      	asrs	r3, r3, #7
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f003 0306 	and.w	r3, r3, #6
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f063 030e 	orn	r3, r3, #14
 8005144:	b2da      	uxtb	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	611a      	str	r2, [r3, #16]
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005164:	b2da      	uxtb	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	2b00      	cmp	r3, #0
 8005172:	d004      	beq.n	800517e <I2C_Master_ADD10+0x26>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d108      	bne.n	8005190 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00c      	beq.n	80051a0 <I2C_Master_ADD10+0x48>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800519e:	605a      	str	r2, [r3, #4]
  }
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b091      	sub	sp, #68	; 0x44
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b22      	cmp	r3, #34	; 0x22
 80051d4:	f040 8169 	bne.w	80054aa <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10f      	bne.n	8005200 <I2C_Master_ADDR+0x54>
 80051e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d10b      	bne.n	8005200 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e8:	2300      	movs	r3, #0
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	633b      	str	r3, [r7, #48]	; 0x30
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	633b      	str	r3, [r7, #48]	; 0x30
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	e160      	b.n	80054c2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005204:	2b00      	cmp	r3, #0
 8005206:	d11d      	bne.n	8005244 <I2C_Master_ADDR+0x98>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005210:	d118      	bne.n	8005244 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005212:	2300      	movs	r3, #0
 8005214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005236:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	651a      	str	r2, [r3, #80]	; 0x50
 8005242:	e13e      	b.n	80054c2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d113      	bne.n	8005276 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524e:	2300      	movs	r3, #0
 8005250:	62bb      	str	r3, [r7, #40]	; 0x28
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	62bb      	str	r3, [r7, #40]	; 0x28
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e115      	b.n	80054a2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	f040 808a 	bne.w	8005396 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005288:	d137      	bne.n	80052fa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005298:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a8:	d113      	bne.n	80052d2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ba:	2300      	movs	r3, #0
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	e0e7      	b.n	80054a2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d2:	2300      	movs	r3, #0
 80052d4:	623b      	str	r3, [r7, #32]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	623b      	str	r3, [r7, #32]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	623b      	str	r3, [r7, #32]
 80052e6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e0d3      	b.n	80054a2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d02e      	beq.n	800535e <I2C_Master_ADDR+0x1b2>
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	2b20      	cmp	r3, #32
 8005304:	d02b      	beq.n	800535e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005308:	2b12      	cmp	r3, #18
 800530a:	d102      	bne.n	8005312 <I2C_Master_ADDR+0x166>
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	2b01      	cmp	r3, #1
 8005310:	d125      	bne.n	800535e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	2b04      	cmp	r3, #4
 8005316:	d00e      	beq.n	8005336 <I2C_Master_ADDR+0x18a>
 8005318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531a:	2b02      	cmp	r3, #2
 800531c:	d00b      	beq.n	8005336 <I2C_Master_ADDR+0x18a>
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	2b10      	cmp	r3, #16
 8005322:	d008      	beq.n	8005336 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	e007      	b.n	8005346 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005344:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	e0a1      	b.n	80054a2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800536c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536e:	2300      	movs	r3, #0
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e085      	b.n	80054a2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d14d      	bne.n	800543c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d016      	beq.n	80053d4 <I2C_Master_ADDR+0x228>
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d013      	beq.n	80053d4 <I2C_Master_ADDR+0x228>
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d010      	beq.n	80053d4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e007      	b.n	80053e4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053e2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f2:	d117      	bne.n	8005424 <I2C_Master_ADDR+0x278>
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053fa:	d00b      	beq.n	8005414 <I2C_Master_ADDR+0x268>
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d008      	beq.n	8005414 <I2C_Master_ADDR+0x268>
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	2b08      	cmp	r3, #8
 8005406:	d005      	beq.n	8005414 <I2C_Master_ADDR+0x268>
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	2b10      	cmp	r3, #16
 800540c:	d002      	beq.n	8005414 <I2C_Master_ADDR+0x268>
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	2b20      	cmp	r3, #32
 8005412:	d107      	bne.n	8005424 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005422:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	e032      	b.n	80054a2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800544a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545a:	d117      	bne.n	800548c <I2C_Master_ADDR+0x2e0>
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005462:	d00b      	beq.n	800547c <I2C_Master_ADDR+0x2d0>
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	2b01      	cmp	r3, #1
 8005468:	d008      	beq.n	800547c <I2C_Master_ADDR+0x2d0>
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	2b08      	cmp	r3, #8
 800546e:	d005      	beq.n	800547c <I2C_Master_ADDR+0x2d0>
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	2b10      	cmp	r3, #16
 8005474:	d002      	beq.n	800547c <I2C_Master_ADDR+0x2d0>
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	2b20      	cmp	r3, #32
 800547a:	d107      	bne.n	800548c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800548a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548c:	2300      	movs	r3, #0
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80054a8:	e00b      	b.n	80054c2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
}
 80054c0:	e7ff      	b.n	80054c2 <I2C_Master_ADDR+0x316>
 80054c2:	bf00      	nop
 80054c4:	3744      	adds	r7, #68	; 0x44
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d02b      	beq.n	8005540 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d114      	bne.n	8005540 <I2C_SlaveTransmit_TXE+0x72>
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	2b29      	cmp	r3, #41	; 0x29
 800551a:	d111      	bne.n	8005540 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2221      	movs	r2, #33	; 0x21
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2228      	movs	r2, #40	; 0x28
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff f9e7 	bl	800490e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d011      	beq.n	800557e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	781a      	ldrb	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005598:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559e:	b29b      	uxth	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02c      	beq.n	80055fe <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d114      	bne.n	80055fe <I2C_SlaveReceive_RXNE+0x74>
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	2b2a      	cmp	r3, #42	; 0x2a
 80055d8:	d111      	bne.n	80055fe <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2222      	movs	r2, #34	; 0x22
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2228      	movs	r2, #40	; 0x28
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff f992 	bl	8004922 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d012      	beq.n	800563e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005654:	2300      	movs	r3, #0
 8005656:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005664:	2b28      	cmp	r3, #40	; 0x28
 8005666:	d127      	bne.n	80056b8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005676:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	089b      	lsrs	r3, r3, #2
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005684:	2301      	movs	r3, #1
 8005686:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	09db      	lsrs	r3, r3, #7
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d103      	bne.n	800569c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	81bb      	strh	r3, [r7, #12]
 800569a:	e002      	b.n	80056a2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80056aa:	89ba      	ldrh	r2, [r7, #12]
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff f940 	bl	8004936 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80056b6:	e00e      	b.n	80056d6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b8:	2300      	movs	r3, #0
 80056ba:	60bb      	str	r3, [r7, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	60bb      	str	r3, [r7, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80056d6:	bf00      	nop
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005700:	2300      	movs	r3, #0
 8005702:	60bb      	str	r3, [r7, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800573c:	d172      	bne.n	8005824 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b22      	cmp	r3, #34	; 0x22
 8005742:	d002      	beq.n	800574a <I2C_Slave_STOPF+0x6a>
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	2b2a      	cmp	r3, #42	; 0x2a
 8005748:	d135      	bne.n	80057b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	b29a      	uxth	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f043 0204 	orr.w	r2, r3, #4
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800577c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	4618      	mov	r0, r3
 8005784:	f7fc fced 	bl	8002162 <HAL_DMA_GetState>
 8005788:	4603      	mov	r3, r0
 800578a:	2b01      	cmp	r3, #1
 800578c:	d049      	beq.n	8005822 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	4a69      	ldr	r2, [pc, #420]	; (8005938 <I2C_Slave_STOPF+0x258>)
 8005794:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	4618      	mov	r0, r3
 800579c:	f7fc fcbf 	bl	800211e <HAL_DMA_Abort_IT>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d03d      	beq.n	8005822 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057b0:	4610      	mov	r0, r2
 80057b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057b4:	e035      	b.n	8005822 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b29a      	uxth	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f043 0204 	orr.w	r2, r3, #4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fc fcb7 	bl	8002162 <HAL_DMA_GetState>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d014      	beq.n	8005824 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fe:	4a4e      	ldr	r2, [pc, #312]	; (8005938 <I2C_Slave_STOPF+0x258>)
 8005800:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005806:	4618      	mov	r0, r3
 8005808:	f7fc fc89 	bl	800211e <HAL_DMA_Abort_IT>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d008      	beq.n	8005824 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800581c:	4610      	mov	r0, r2
 800581e:	4798      	blx	r3
 8005820:	e000      	b.n	8005824 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005822:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d03e      	beq.n	80058ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b04      	cmp	r3, #4
 800583a:	d112      	bne.n	8005862 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d112      	bne.n	8005896 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	f043 0204 	orr.w	r2, r3, #4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f843 	bl	8005940 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80058ba:	e039      	b.n	8005930 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b2a      	cmp	r3, #42	; 0x2a
 80058c0:	d109      	bne.n	80058d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2228      	movs	r2, #40	; 0x28
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff f826 	bl	8004922 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b28      	cmp	r3, #40	; 0x28
 80058e0:	d111      	bne.n	8005906 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a15      	ldr	r2, [pc, #84]	; (800593c <I2C_Slave_STOPF+0x25c>)
 80058e6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff f827 	bl	8004952 <HAL_I2C_ListenCpltCallback>
}
 8005904:	e014      	b.n	8005930 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	2b22      	cmp	r3, #34	; 0x22
 800590c:	d002      	beq.n	8005914 <I2C_Slave_STOPF+0x234>
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	2b22      	cmp	r3, #34	; 0x22
 8005912:	d10d      	bne.n	8005930 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2220      	movs	r2, #32
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fe fff9 	bl	8004922 <HAL_I2C_SlaveRxCpltCallback>
}
 8005930:	bf00      	nop
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	08005e45 	.word	0x08005e45
 800593c:	ffff0000 	.word	0xffff0000

08005940 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005956:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005958:	7bbb      	ldrb	r3, [r7, #14]
 800595a:	2b10      	cmp	r3, #16
 800595c:	d002      	beq.n	8005964 <I2C_ITError+0x24>
 800595e:	7bbb      	ldrb	r3, [r7, #14]
 8005960:	2b40      	cmp	r3, #64	; 0x40
 8005962:	d10a      	bne.n	800597a <I2C_ITError+0x3a>
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	2b22      	cmp	r3, #34	; 0x22
 8005968:	d107      	bne.n	800597a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005978:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005980:	2b28      	cmp	r3, #40	; 0x28
 8005982:	d107      	bne.n	8005994 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2228      	movs	r2, #40	; 0x28
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005992:	e015      	b.n	80059c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a2:	d00a      	beq.n	80059ba <I2C_ITError+0x7a>
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b60      	cmp	r3, #96	; 0x60
 80059a8:	d007      	beq.n	80059ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ce:	d162      	bne.n	8005a96 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d020      	beq.n	8005a30 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f2:	4a6a      	ldr	r2, [pc, #424]	; (8005b9c <I2C_ITError+0x25c>)
 80059f4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fc fb8f 	bl	800211e <HAL_DMA_Abort_IT>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 8089 	beq.w	8005b1a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	4798      	blx	r3
 8005a2e:	e074      	b.n	8005b1a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	4a59      	ldr	r2, [pc, #356]	; (8005b9c <I2C_ITError+0x25c>)
 8005a36:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fc fb6e 	bl	800211e <HAL_DMA_Abort_IT>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d068      	beq.n	8005b1a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d10b      	bne.n	8005a6e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a90:	4610      	mov	r0, r2
 8005a92:	4798      	blx	r3
 8005a94:	e041      	b.n	8005b1a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b60      	cmp	r3, #96	; 0x60
 8005aa0:	d125      	bne.n	8005aee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d10b      	bne.n	8005ad6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fe ff5b 	bl	80049a2 <HAL_I2C_AbortCpltCallback>
 8005aec:	e015      	b.n	8005b1a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d10b      	bne.n	8005b14 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fe ff3a 	bl	800498e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10e      	bne.n	8005b48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d109      	bne.n	8005b48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b56:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d113      	bne.n	8005b94 <I2C_ITError+0x254>
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b28      	cmp	r3, #40	; 0x28
 8005b70:	d110      	bne.n	8005b94 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <I2C_ITError+0x260>)
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fe fedf 	bl	8004952 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	08005e45 	.word	0x08005e45
 8005ba0:	ffff0000 	.word	0xffff0000

08005ba4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d006      	beq.n	8005bce <I2C_MasterRequestWrite+0x2a>
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d003      	beq.n	8005bce <I2C_MasterRequestWrite+0x2a>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bcc:	d108      	bne.n	8005be0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e00b      	b.n	8005bf8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be4:	2b12      	cmp	r3, #18
 8005be6:	d107      	bne.n	8005bf8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f9c5 	bl	8005f94 <I2C_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00d      	beq.n	8005c2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1e:	d103      	bne.n	8005c28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e035      	b.n	8005c98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c34:	d108      	bne.n	8005c48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c36:	897b      	ldrh	r3, [r7, #10]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c44:	611a      	str	r2, [r3, #16]
 8005c46:	e01b      	b.n	8005c80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c48:	897b      	ldrh	r3, [r7, #10]
 8005c4a:	11db      	asrs	r3, r3, #7
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	f003 0306 	and.w	r3, r3, #6
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f063 030f 	orn	r3, r3, #15
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	490e      	ldr	r1, [pc, #56]	; (8005ca0 <I2C_MasterRequestWrite+0xfc>)
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f9eb 	bl	8006042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e010      	b.n	8005c98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c76:	897b      	ldrh	r3, [r7, #10]
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	4907      	ldr	r1, [pc, #28]	; (8005ca4 <I2C_MasterRequestWrite+0x100>)
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f9db 	bl	8006042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	00010008 	.word	0x00010008
 8005ca4:	00010002 	.word	0x00010002

08005ca8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	607a      	str	r2, [r7, #4]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ccc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d006      	beq.n	8005ce2 <I2C_MasterRequestRead+0x3a>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d003      	beq.n	8005ce2 <I2C_MasterRequestRead+0x3a>
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ce0:	d108      	bne.n	8005cf4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	e00b      	b.n	8005d0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	2b11      	cmp	r3, #17
 8005cfa:	d107      	bne.n	8005d0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f93b 	bl	8005f94 <I2C_WaitOnFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00d      	beq.n	8005d40 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d32:	d103      	bne.n	8005d3c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e079      	b.n	8005e34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d48:	d108      	bne.n	8005d5c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d4a:	897b      	ldrh	r3, [r7, #10]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	611a      	str	r2, [r3, #16]
 8005d5a:	e05f      	b.n	8005e1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d5c:	897b      	ldrh	r3, [r7, #10]
 8005d5e:	11db      	asrs	r3, r3, #7
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f003 0306 	and.w	r3, r3, #6
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f063 030f 	orn	r3, r3, #15
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	4930      	ldr	r1, [pc, #192]	; (8005e3c <I2C_MasterRequestRead+0x194>)
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f961 	bl	8006042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e054      	b.n	8005e34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d8a:	897b      	ldrh	r3, [r7, #10]
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	4929      	ldr	r1, [pc, #164]	; (8005e40 <I2C_MasterRequestRead+0x198>)
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 f951 	bl	8006042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e044      	b.n	8005e34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005daa:	2300      	movs	r3, #0
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f8d9 	bl	8005f94 <I2C_WaitOnFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00d      	beq.n	8005e04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df6:	d103      	bne.n	8005e00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dfe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e017      	b.n	8005e34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e04:	897b      	ldrh	r3, [r7, #10]
 8005e06:	11db      	asrs	r3, r3, #7
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 0306 	and.w	r3, r3, #6
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f063 030e 	orn	r3, r3, #14
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	4907      	ldr	r1, [pc, #28]	; (8005e40 <I2C_MasterRequestRead+0x198>)
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 f90d 	bl	8006042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e000      	b.n	8005e34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	00010008 	.word	0x00010008
 8005e40:	00010002 	.word	0x00010002

08005e44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e5e:	4b4b      	ldr	r3, [pc, #300]	; (8005f8c <I2C_DMAAbort+0x148>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	08db      	lsrs	r3, r3, #3
 8005e64:	4a4a      	ldr	r2, [pc, #296]	; (8005f90 <I2C_DMAAbort+0x14c>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	0a1a      	lsrs	r2, r3, #8
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	00da      	lsls	r2, r3, #3
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f043 0220 	orr.w	r2, r3, #32
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e8a:	e00a      	b.n	8005ea2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea0:	d0ea      	beq.n	8005e78 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	2200      	movs	r2, #0
 8005eb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b60      	cmp	r3, #96	; 0x60
 8005f12:	d10e      	bne.n	8005f32 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2200      	movs	r2, #0
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f2a:	6978      	ldr	r0, [r7, #20]
 8005f2c:	f7fe fd39 	bl	80049a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f30:	e027      	b.n	8005f82 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f32:	7cfb      	ldrb	r3, [r7, #19]
 8005f34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f38:	2b28      	cmp	r3, #40	; 0x28
 8005f3a:	d117      	bne.n	8005f6c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2228      	movs	r2, #40	; 0x28
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f6a:	e007      	b.n	8005f7c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f7c:	6978      	ldr	r0, [r7, #20]
 8005f7e:	f7fe fd06 	bl	800498e <HAL_I2C_ErrorCallback>
}
 8005f82:	bf00      	nop
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000004 	.word	0x20000004
 8005f90:	14f8b589 	.word	0x14f8b589

08005f94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fa4:	e025      	b.n	8005ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d021      	beq.n	8005ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fae:	f7fb ff75 	bl	8001e9c <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d116      	bne.n	8005ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f043 0220 	orr.w	r2, r3, #32
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e023      	b.n	800603a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d10d      	bne.n	8006018 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	43da      	mvns	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4013      	ands	r3, r2
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	bf0c      	ite	eq
 800600e:	2301      	moveq	r3, #1
 8006010:	2300      	movne	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	e00c      	b.n	8006032 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	43da      	mvns	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4013      	ands	r3, r2
 8006024:	b29b      	uxth	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	bf0c      	ite	eq
 800602a:	2301      	moveq	r3, #1
 800602c:	2300      	movne	r3, #0
 800602e:	b2db      	uxtb	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	429a      	cmp	r2, r3
 8006036:	d0b6      	beq.n	8005fa6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006050:	e051      	b.n	80060f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006060:	d123      	bne.n	80060aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006070:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800607a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f043 0204 	orr.w	r2, r3, #4
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e046      	b.n	8006138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b0:	d021      	beq.n	80060f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b2:	f7fb fef3 	bl	8001e9c <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d302      	bcc.n	80060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d116      	bne.n	80060f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	f043 0220 	orr.w	r2, r3, #32
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e020      	b.n	8006138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	0c1b      	lsrs	r3, r3, #16
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d10c      	bne.n	800611a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	43da      	mvns	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4013      	ands	r3, r2
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	bf14      	ite	ne
 8006112:	2301      	movne	r3, #1
 8006114:	2300      	moveq	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	e00b      	b.n	8006132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	43da      	mvns	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4013      	ands	r3, r2
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf14      	ite	ne
 800612c:	2301      	movne	r3, #1
 800612e:	2300      	moveq	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d18d      	bne.n	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800614c:	e02d      	b.n	80061aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f900 	bl	8006354 <I2C_IsAcknowledgeFailed>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e02d      	b.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d021      	beq.n	80061aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006166:	f7fb fe99 	bl	8001e9c <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	429a      	cmp	r2, r3
 8006174:	d302      	bcc.n	800617c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d116      	bne.n	80061aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	f043 0220 	orr.w	r2, r3, #32
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e007      	b.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	2b80      	cmp	r3, #128	; 0x80
 80061b6:	d1ca      	bne.n	800614e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061ce:	e02d      	b.n	800622c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 f8bf 	bl	8006354 <I2C_IsAcknowledgeFailed>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e02d      	b.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d021      	beq.n	800622c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e8:	f7fb fe58 	bl	8001e9c <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d302      	bcc.n	80061fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d116      	bne.n	800622c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	f043 0220 	orr.w	r2, r3, #32
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e007      	b.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b04      	cmp	r3, #4
 8006238:	d1ca      	bne.n	80061d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006250:	4b13      	ldr	r3, [pc, #76]	; (80062a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	08db      	lsrs	r3, r3, #3
 8006256:	4a13      	ldr	r2, [pc, #76]	; (80062a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006258:	fba2 2303 	umull	r2, r3, r2, r3
 800625c:	0a1a      	lsrs	r2, r3, #8
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b01      	subs	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d107      	bne.n	8006282 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f043 0220 	orr.w	r2, r3, #32
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e008      	b.n	8006294 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800628c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006290:	d0e9      	beq.n	8006266 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	20000004 	.word	0x20000004
 80062a4:	14f8b589 	.word	0x14f8b589

080062a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062b4:	e042      	b.n	800633c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	2b10      	cmp	r3, #16
 80062c2:	d119      	bne.n	80062f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0210 	mvn.w	r2, #16
 80062cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e029      	b.n	800634c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f8:	f7fb fdd0 	bl	8001e9c <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	429a      	cmp	r2, r3
 8006306:	d302      	bcc.n	800630e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d116      	bne.n	800633c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	f043 0220 	orr.w	r2, r3, #32
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e007      	b.n	800634c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d1b5      	bne.n	80062b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636a:	d11b      	bne.n	80063a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006374:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	f043 0204 	orr.w	r2, r3, #4
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80063c2:	d103      	bne.n	80063cc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80063ca:	e007      	b.n	80063dc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063d4:	d102      	bne.n	80063dc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2208      	movs	r2, #8
 80063da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e128      	b.n	800664c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a90      	ldr	r2, [pc, #576]	; (8006654 <HAL_I2S_Init+0x26c>)
 8006412:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7fb fb63 	bl	8001ae0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006430:	f023 030f 	bic.w	r3, r3, #15
 8006434:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2202      	movs	r2, #2
 800643c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d060      	beq.n	8006508 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800644e:	2310      	movs	r3, #16
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	e001      	b.n	8006458 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006454:	2320      	movs	r3, #32
 8006456:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b20      	cmp	r3, #32
 800645e:	d802      	bhi.n	8006466 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006466:	2001      	movs	r0, #1
 8006468:	f001 f9c4 	bl	80077f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800646c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006476:	d125      	bne.n	80064c4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d010      	beq.n	80064a2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	fbb2 f2f3 	udiv	r2, r2, r3
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	461a      	mov	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	fbb2 f3f3 	udiv	r3, r2, r3
 800649c:	3305      	adds	r3, #5
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	e01f      	b.n	80064e2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	461a      	mov	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	3305      	adds	r3, #5
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	e00e      	b.n	80064e2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	461a      	mov	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	fbb2 f3f3 	udiv	r3, r2, r3
 80064de:	3305      	adds	r3, #5
 80064e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	4a5c      	ldr	r2, [pc, #368]	; (8006658 <HAL_I2S_Init+0x270>)
 80064e6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ea:	08db      	lsrs	r3, r3, #3
 80064ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	085b      	lsrs	r3, r3, #1
 80064fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	e003      	b.n	8006510 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006508:	2302      	movs	r3, #2
 800650a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d902      	bls.n	800651c <HAL_I2S_Init+0x134>
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	2bff      	cmp	r3, #255	; 0xff
 800651a:	d907      	bls.n	800652c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006520:	f043 0210 	orr.w	r2, r3, #16
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e08f      	b.n	800664c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	ea42 0103 	orr.w	r1, r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	430a      	orrs	r2, r1
 800653e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800654a:	f023 030f 	bic.w	r3, r3, #15
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6851      	ldr	r1, [r2, #4]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6892      	ldr	r2, [r2, #8]
 8006556:	4311      	orrs	r1, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	68d2      	ldr	r2, [r2, #12]
 800655c:	4311      	orrs	r1, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6992      	ldr	r2, [r2, #24]
 8006562:	430a      	orrs	r2, r1
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800656e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d161      	bne.n	800663c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a38      	ldr	r2, [pc, #224]	; (800665c <HAL_I2S_Init+0x274>)
 800657c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a37      	ldr	r2, [pc, #220]	; (8006660 <HAL_I2S_Init+0x278>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d101      	bne.n	800658c <HAL_I2S_Init+0x1a4>
 8006588:	4b36      	ldr	r3, [pc, #216]	; (8006664 <HAL_I2S_Init+0x27c>)
 800658a:	e001      	b.n	8006590 <HAL_I2S_Init+0x1a8>
 800658c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	4932      	ldr	r1, [pc, #200]	; (8006660 <HAL_I2S_Init+0x278>)
 8006598:	428a      	cmp	r2, r1
 800659a:	d101      	bne.n	80065a0 <HAL_I2S_Init+0x1b8>
 800659c:	4a31      	ldr	r2, [pc, #196]	; (8006664 <HAL_I2S_Init+0x27c>)
 800659e:	e001      	b.n	80065a4 <HAL_I2S_Init+0x1bc>
 80065a0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80065a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80065a8:	f023 030f 	bic.w	r3, r3, #15
 80065ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a2b      	ldr	r2, [pc, #172]	; (8006660 <HAL_I2S_Init+0x278>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d101      	bne.n	80065bc <HAL_I2S_Init+0x1d4>
 80065b8:	4b2a      	ldr	r3, [pc, #168]	; (8006664 <HAL_I2S_Init+0x27c>)
 80065ba:	e001      	b.n	80065c0 <HAL_I2S_Init+0x1d8>
 80065bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065c0:	2202      	movs	r2, #2
 80065c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a25      	ldr	r2, [pc, #148]	; (8006660 <HAL_I2S_Init+0x278>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d101      	bne.n	80065d2 <HAL_I2S_Init+0x1ea>
 80065ce:	4b25      	ldr	r3, [pc, #148]	; (8006664 <HAL_I2S_Init+0x27c>)
 80065d0:	e001      	b.n	80065d6 <HAL_I2S_Init+0x1ee>
 80065d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e2:	d003      	beq.n	80065ec <HAL_I2S_Init+0x204>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d103      	bne.n	80065f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80065ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	e001      	b.n	80065f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80065f4:	2300      	movs	r3, #0
 80065f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006602:	4313      	orrs	r3, r2
 8006604:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800660c:	4313      	orrs	r3, r2
 800660e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006616:	4313      	orrs	r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	897b      	ldrh	r3, [r7, #10]
 800661c:	4313      	orrs	r3, r2
 800661e:	b29b      	uxth	r3, r3
 8006620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006624:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a0d      	ldr	r2, [pc, #52]	; (8006660 <HAL_I2S_Init+0x278>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d101      	bne.n	8006634 <HAL_I2S_Init+0x24c>
 8006630:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <HAL_I2S_Init+0x27c>)
 8006632:	e001      	b.n	8006638 <HAL_I2S_Init+0x250>
 8006634:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006638:	897a      	ldrh	r2, [r7, #10]
 800663a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3720      	adds	r7, #32
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	0800675f 	.word	0x0800675f
 8006658:	cccccccd 	.word	0xcccccccd
 800665c:	08006875 	.word	0x08006875
 8006660:	40003800 	.word	0x40003800
 8006664:	40003400 	.word	0x40003400

08006668 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	881a      	ldrh	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	1c9a      	adds	r2, r3, #2
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10e      	bne.n	80066f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff ffb8 	bl	8006668 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006712:	b292      	uxth	r2, r2
 8006714:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	1c9a      	adds	r2, r3, #2
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006732:	b29b      	uxth	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10e      	bne.n	8006756 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006746:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff ff93 	bl	800667c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b086      	sub	sp, #24
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b04      	cmp	r3, #4
 8006778:	d13a      	bne.n	80067f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b01      	cmp	r3, #1
 8006782:	d109      	bne.n	8006798 <I2S_IRQHandler+0x3a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d102      	bne.n	8006798 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff ffb4 	bl	8006700 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d126      	bne.n	80067f0 <I2S_IRQHandler+0x92>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d11f      	bne.n	80067f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e2:	f043 0202 	orr.w	r2, r3, #2
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff ff50 	bl	8006690 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d136      	bne.n	800686a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b02      	cmp	r3, #2
 8006804:	d109      	bne.n	800681a <I2S_IRQHandler+0xbc>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	2b80      	cmp	r3, #128	; 0x80
 8006812:	d102      	bne.n	800681a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff ff45 	bl	80066a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b08      	cmp	r3, #8
 8006822:	d122      	bne.n	800686a <I2S_IRQHandler+0x10c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b20      	cmp	r3, #32
 8006830:	d11b      	bne.n	800686a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006840:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685c:	f043 0204 	orr.w	r2, r3, #4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff ff13 	bl	8006690 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800686a:	bf00      	nop
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b088      	sub	sp, #32
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a92      	ldr	r2, [pc, #584]	; (8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d101      	bne.n	8006892 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800688e:	4b92      	ldr	r3, [pc, #584]	; (8006ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006890:	e001      	b.n	8006896 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006892:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a8b      	ldr	r2, [pc, #556]	; (8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d101      	bne.n	80068b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80068ac:	4b8a      	ldr	r3, [pc, #552]	; (8006ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068ae:	e001      	b.n	80068b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80068b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c0:	d004      	beq.n	80068cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f040 8099 	bne.w	80069fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d107      	bne.n	80068e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f925 	bl	8006b30 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d107      	bne.n	8006900 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f9c8 	bl	8006c90 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006906:	2b40      	cmp	r3, #64	; 0x40
 8006908:	d13a      	bne.n	8006980 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d035      	beq.n	8006980 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a6e      	ldr	r2, [pc, #440]	; (8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d101      	bne.n	8006922 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800691e:	4b6e      	ldr	r3, [pc, #440]	; (8006ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006920:	e001      	b.n	8006926 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006922:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4969      	ldr	r1, [pc, #420]	; (8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800692e:	428b      	cmp	r3, r1
 8006930:	d101      	bne.n	8006936 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006932:	4b69      	ldr	r3, [pc, #420]	; (8006ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006934:	e001      	b.n	800693a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006936:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800693a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800693e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800694e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006972:	f043 0202 	orr.w	r2, r3, #2
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fe88 	bl	8006690 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b08      	cmp	r3, #8
 8006988:	f040 80c3 	bne.w	8006b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f003 0320 	and.w	r3, r3, #32
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 80bd 	beq.w	8006b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a49      	ldr	r2, [pc, #292]	; (8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d101      	bne.n	80069b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80069b2:	4b49      	ldr	r3, [pc, #292]	; (8006ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069b4:	e001      	b.n	80069ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80069b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4944      	ldr	r1, [pc, #272]	; (8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069c2:	428b      	cmp	r3, r1
 80069c4:	d101      	bne.n	80069ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80069c6:	4b44      	ldr	r3, [pc, #272]	; (8006ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069c8:	e001      	b.n	80069ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80069ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80069d4:	2300      	movs	r3, #0
 80069d6:	60bb      	str	r3, [r7, #8]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	60bb      	str	r3, [r7, #8]
 80069e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ee:	f043 0204 	orr.w	r2, r3, #4
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff fe4a 	bl	8006690 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069fc:	e089      	b.n	8006b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d107      	bne.n	8006a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f8be 	bl	8006b94 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d107      	bne.n	8006a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f8fd 	bl	8006c2c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	d12f      	bne.n	8006a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d02a      	beq.n	8006a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a54:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1e      	ldr	r2, [pc, #120]	; (8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d101      	bne.n	8006a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006a60:	4b1d      	ldr	r3, [pc, #116]	; (8006ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a62:	e001      	b.n	8006a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006a64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4919      	ldr	r1, [pc, #100]	; (8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a70:	428b      	cmp	r3, r1
 8006a72:	d101      	bne.n	8006a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006a74:	4b18      	ldr	r3, [pc, #96]	; (8006ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a76:	e001      	b.n	8006a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006a78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a80:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8e:	f043 0202 	orr.w	r2, r3, #2
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7ff fdfa 	bl	8006690 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d136      	bne.n	8006b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f003 0320 	and.w	r3, r3, #32
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d031      	beq.n	8006b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a07      	ldr	r2, [pc, #28]	; (8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d101      	bne.n	8006abe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006aba:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006abc:	e001      	b.n	8006ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006abe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4902      	ldr	r1, [pc, #8]	; (8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006aca:	428b      	cmp	r3, r1
 8006acc:	d106      	bne.n	8006adc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006ace:	4b02      	ldr	r3, [pc, #8]	; (8006ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ad0:	e006      	b.n	8006ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006ad2:	bf00      	nop
 8006ad4:	40003800 	.word	0x40003800
 8006ad8:	40003400 	.word	0x40003400
 8006adc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ae0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ae4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006af4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b02:	f043 0204 	orr.w	r2, r3, #4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff fdc0 	bl	8006690 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b10:	e000      	b.n	8006b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b12:	bf00      	nop
}
 8006b14:	bf00      	nop
 8006b16:	3720      	adds	r7, #32
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	1c99      	adds	r1, r3, #2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6251      	str	r1, [r2, #36]	; 0x24
 8006b42:	881a      	ldrh	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d113      	bne.n	8006b8a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d106      	bne.n	8006b8a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff ffc9 	bl	8006b1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	1c99      	adds	r1, r3, #2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6251      	str	r1, [r2, #36]	; 0x24
 8006ba6:	8819      	ldrh	r1, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <I2SEx_TxISR_I2SExt+0x90>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d101      	bne.n	8006bb6 <I2SEx_TxISR_I2SExt+0x22>
 8006bb2:	4b1d      	ldr	r3, [pc, #116]	; (8006c28 <I2SEx_TxISR_I2SExt+0x94>)
 8006bb4:	e001      	b.n	8006bba <I2SEx_TxISR_I2SExt+0x26>
 8006bb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bba:	460a      	mov	r2, r1
 8006bbc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d121      	bne.n	8006c1a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <I2SEx_TxISR_I2SExt+0x90>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d101      	bne.n	8006be4 <I2SEx_TxISR_I2SExt+0x50>
 8006be0:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <I2SEx_TxISR_I2SExt+0x94>)
 8006be2:	e001      	b.n	8006be8 <I2SEx_TxISR_I2SExt+0x54>
 8006be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	490d      	ldr	r1, [pc, #52]	; (8006c24 <I2SEx_TxISR_I2SExt+0x90>)
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	d101      	bne.n	8006bf8 <I2SEx_TxISR_I2SExt+0x64>
 8006bf4:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <I2SEx_TxISR_I2SExt+0x94>)
 8006bf6:	e001      	b.n	8006bfc <I2SEx_TxISR_I2SExt+0x68>
 8006bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ff81 	bl	8006b1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	40003800 	.word	0x40003800
 8006c28:	40003400 	.word	0x40003400

08006c2c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68d8      	ldr	r0, [r3, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3e:	1c99      	adds	r1, r3, #2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c44:	b282      	uxth	r2, r0
 8006c46:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d113      	bne.n	8006c88 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c6e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff ff4a 	bl	8006b1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a20      	ldr	r2, [pc, #128]	; (8006d20 <I2SEx_RxISR_I2SExt+0x90>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d101      	bne.n	8006ca6 <I2SEx_RxISR_I2SExt+0x16>
 8006ca2:	4b20      	ldr	r3, [pc, #128]	; (8006d24 <I2SEx_RxISR_I2SExt+0x94>)
 8006ca4:	e001      	b.n	8006caa <I2SEx_RxISR_I2SExt+0x1a>
 8006ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006caa:	68d8      	ldr	r0, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	1c99      	adds	r1, r3, #2
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006cb6:	b282      	uxth	r2, r0
 8006cb8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d121      	bne.n	8006d16 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a12      	ldr	r2, [pc, #72]	; (8006d20 <I2SEx_RxISR_I2SExt+0x90>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d101      	bne.n	8006ce0 <I2SEx_RxISR_I2SExt+0x50>
 8006cdc:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <I2SEx_RxISR_I2SExt+0x94>)
 8006cde:	e001      	b.n	8006ce4 <I2SEx_RxISR_I2SExt+0x54>
 8006ce0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	490d      	ldr	r1, [pc, #52]	; (8006d20 <I2SEx_RxISR_I2SExt+0x90>)
 8006cec:	428b      	cmp	r3, r1
 8006cee:	d101      	bne.n	8006cf4 <I2SEx_RxISR_I2SExt+0x64>
 8006cf0:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <I2SEx_RxISR_I2SExt+0x94>)
 8006cf2:	e001      	b.n	8006cf8 <I2SEx_RxISR_I2SExt+0x68>
 8006cf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cf8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006cfc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d106      	bne.n	8006d16 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff ff03 	bl	8006b1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d16:	bf00      	nop
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40003800 	.word	0x40003800
 8006d24:	40003400 	.word	0x40003400

08006d28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e267      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d075      	beq.n	8006e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d46:	4b88      	ldr	r3, [pc, #544]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d00c      	beq.n	8006d6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d52:	4b85      	ldr	r3, [pc, #532]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d112      	bne.n	8006d84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d5e:	4b82      	ldr	r3, [pc, #520]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d6a:	d10b      	bne.n	8006d84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d6c:	4b7e      	ldr	r3, [pc, #504]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d05b      	beq.n	8006e30 <HAL_RCC_OscConfig+0x108>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d157      	bne.n	8006e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e242      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d8c:	d106      	bne.n	8006d9c <HAL_RCC_OscConfig+0x74>
 8006d8e:	4b76      	ldr	r3, [pc, #472]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a75      	ldr	r2, [pc, #468]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	e01d      	b.n	8006dd8 <HAL_RCC_OscConfig+0xb0>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006da4:	d10c      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x98>
 8006da6:	4b70      	ldr	r3, [pc, #448]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a6f      	ldr	r2, [pc, #444]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	4b6d      	ldr	r3, [pc, #436]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a6c      	ldr	r2, [pc, #432]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	e00b      	b.n	8006dd8 <HAL_RCC_OscConfig+0xb0>
 8006dc0:	4b69      	ldr	r3, [pc, #420]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a68      	ldr	r2, [pc, #416]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	4b66      	ldr	r3, [pc, #408]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a65      	ldr	r2, [pc, #404]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d013      	beq.n	8006e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de0:	f7fb f85c 	bl	8001e9c <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006de8:	f7fb f858 	bl	8001e9c <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b64      	cmp	r3, #100	; 0x64
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e207      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dfa:	4b5b      	ldr	r3, [pc, #364]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0f0      	beq.n	8006de8 <HAL_RCC_OscConfig+0xc0>
 8006e06:	e014      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e08:	f7fb f848 	bl	8001e9c <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e10:	f7fb f844 	bl	8001e9c <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b64      	cmp	r3, #100	; 0x64
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e1f3      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e22:	4b51      	ldr	r3, [pc, #324]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f0      	bne.n	8006e10 <HAL_RCC_OscConfig+0xe8>
 8006e2e:	e000      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d063      	beq.n	8006f06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e3e:	4b4a      	ldr	r3, [pc, #296]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 030c 	and.w	r3, r3, #12
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00b      	beq.n	8006e62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e4a:	4b47      	ldr	r3, [pc, #284]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d11c      	bne.n	8006e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e56:	4b44      	ldr	r3, [pc, #272]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d116      	bne.n	8006e90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e62:	4b41      	ldr	r3, [pc, #260]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <HAL_RCC_OscConfig+0x152>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d001      	beq.n	8006e7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e1c7      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e7a:	4b3b      	ldr	r3, [pc, #236]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	4937      	ldr	r1, [pc, #220]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e8e:	e03a      	b.n	8006f06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d020      	beq.n	8006eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e98:	4b34      	ldr	r3, [pc, #208]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9e:	f7fa fffd 	bl	8001e9c <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ea6:	f7fa fff9 	bl	8001e9c <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e1a8      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eb8:	4b2b      	ldr	r3, [pc, #172]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ec4:	4b28      	ldr	r3, [pc, #160]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	4925      	ldr	r1, [pc, #148]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	600b      	str	r3, [r1, #0]
 8006ed8:	e015      	b.n	8006f06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eda:	4b24      	ldr	r3, [pc, #144]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee0:	f7fa ffdc 	bl	8001e9c <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ee8:	f7fa ffd8 	bl	8001e9c <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e187      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006efa:	4b1b      	ldr	r3, [pc, #108]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f0      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0308 	and.w	r3, r3, #8
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d036      	beq.n	8006f80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d016      	beq.n	8006f48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f1a:	4b15      	ldr	r3, [pc, #84]	; (8006f70 <HAL_RCC_OscConfig+0x248>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f20:	f7fa ffbc 	bl	8001e9c <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f28:	f7fa ffb8 	bl	8001e9c <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e167      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0f0      	beq.n	8006f28 <HAL_RCC_OscConfig+0x200>
 8006f46:	e01b      	b.n	8006f80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f48:	4b09      	ldr	r3, [pc, #36]	; (8006f70 <HAL_RCC_OscConfig+0x248>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f4e:	f7fa ffa5 	bl	8001e9c <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f54:	e00e      	b.n	8006f74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f56:	f7fa ffa1 	bl	8001e9c <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d907      	bls.n	8006f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e150      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	42470000 	.word	0x42470000
 8006f70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f74:	4b88      	ldr	r3, [pc, #544]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8006f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1ea      	bne.n	8006f56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 8097 	beq.w	80070bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f92:	4b81      	ldr	r3, [pc, #516]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10f      	bne.n	8006fbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	4b7d      	ldr	r3, [pc, #500]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	4a7c      	ldr	r2, [pc, #496]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8006fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fac:	6413      	str	r3, [r2, #64]	; 0x40
 8006fae:	4b7a      	ldr	r3, [pc, #488]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb6:	60bb      	str	r3, [r7, #8]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fbe:	4b77      	ldr	r3, [pc, #476]	; (800719c <HAL_RCC_OscConfig+0x474>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d118      	bne.n	8006ffc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fca:	4b74      	ldr	r3, [pc, #464]	; (800719c <HAL_RCC_OscConfig+0x474>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a73      	ldr	r2, [pc, #460]	; (800719c <HAL_RCC_OscConfig+0x474>)
 8006fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fd6:	f7fa ff61 	bl	8001e9c <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fde:	f7fa ff5d 	bl	8001e9c <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e10c      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff0:	4b6a      	ldr	r3, [pc, #424]	; (800719c <HAL_RCC_OscConfig+0x474>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0f0      	beq.n	8006fde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d106      	bne.n	8007012 <HAL_RCC_OscConfig+0x2ea>
 8007004:	4b64      	ldr	r3, [pc, #400]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8007006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007008:	4a63      	ldr	r2, [pc, #396]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 800700a:	f043 0301 	orr.w	r3, r3, #1
 800700e:	6713      	str	r3, [r2, #112]	; 0x70
 8007010:	e01c      	b.n	800704c <HAL_RCC_OscConfig+0x324>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	2b05      	cmp	r3, #5
 8007018:	d10c      	bne.n	8007034 <HAL_RCC_OscConfig+0x30c>
 800701a:	4b5f      	ldr	r3, [pc, #380]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 800701c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701e:	4a5e      	ldr	r2, [pc, #376]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8007020:	f043 0304 	orr.w	r3, r3, #4
 8007024:	6713      	str	r3, [r2, #112]	; 0x70
 8007026:	4b5c      	ldr	r3, [pc, #368]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702a:	4a5b      	ldr	r2, [pc, #364]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 800702c:	f043 0301 	orr.w	r3, r3, #1
 8007030:	6713      	str	r3, [r2, #112]	; 0x70
 8007032:	e00b      	b.n	800704c <HAL_RCC_OscConfig+0x324>
 8007034:	4b58      	ldr	r3, [pc, #352]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8007036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007038:	4a57      	ldr	r2, [pc, #348]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	6713      	str	r3, [r2, #112]	; 0x70
 8007040:	4b55      	ldr	r3, [pc, #340]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8007042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007044:	4a54      	ldr	r2, [pc, #336]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8007046:	f023 0304 	bic.w	r3, r3, #4
 800704a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d015      	beq.n	8007080 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007054:	f7fa ff22 	bl	8001e9c <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800705a:	e00a      	b.n	8007072 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800705c:	f7fa ff1e 	bl	8001e9c <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	f241 3288 	movw	r2, #5000	; 0x1388
 800706a:	4293      	cmp	r3, r2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e0cb      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007072:	4b49      	ldr	r3, [pc, #292]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8007074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0ee      	beq.n	800705c <HAL_RCC_OscConfig+0x334>
 800707e:	e014      	b.n	80070aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007080:	f7fa ff0c 	bl	8001e9c <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007086:	e00a      	b.n	800709e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007088:	f7fa ff08 	bl	8001e9c <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f241 3288 	movw	r2, #5000	; 0x1388
 8007096:	4293      	cmp	r3, r2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e0b5      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800709e:	4b3e      	ldr	r3, [pc, #248]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 80070a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1ee      	bne.n	8007088 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d105      	bne.n	80070bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070b0:	4b39      	ldr	r3, [pc, #228]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 80070b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b4:	4a38      	ldr	r2, [pc, #224]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 80070b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 80a1 	beq.w	8007208 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070c6:	4b34      	ldr	r3, [pc, #208]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 030c 	and.w	r3, r3, #12
 80070ce:	2b08      	cmp	r3, #8
 80070d0:	d05c      	beq.n	800718c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d141      	bne.n	800715e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070da:	4b31      	ldr	r3, [pc, #196]	; (80071a0 <HAL_RCC_OscConfig+0x478>)
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e0:	f7fa fedc 	bl	8001e9c <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070e8:	f7fa fed8 	bl	8001e9c <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e087      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070fa:	4b27      	ldr	r3, [pc, #156]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f0      	bne.n	80070e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69da      	ldr	r2, [r3, #28]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	019b      	lsls	r3, r3, #6
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	085b      	lsrs	r3, r3, #1
 800711e:	3b01      	subs	r3, #1
 8007120:	041b      	lsls	r3, r3, #16
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	061b      	lsls	r3, r3, #24
 800712a:	491b      	ldr	r1, [pc, #108]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 800712c:	4313      	orrs	r3, r2
 800712e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007130:	4b1b      	ldr	r3, [pc, #108]	; (80071a0 <HAL_RCC_OscConfig+0x478>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007136:	f7fa feb1 	bl	8001e9c <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800713e:	f7fa fead 	bl	8001e9c <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e05c      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007150:	4b11      	ldr	r3, [pc, #68]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f0      	beq.n	800713e <HAL_RCC_OscConfig+0x416>
 800715c:	e054      	b.n	8007208 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800715e:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <HAL_RCC_OscConfig+0x478>)
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007164:	f7fa fe9a 	bl	8001e9c <HAL_GetTick>
 8007168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800716a:	e008      	b.n	800717e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800716c:	f7fa fe96 	bl	8001e9c <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b02      	cmp	r3, #2
 8007178:	d901      	bls.n	800717e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e045      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717e:	4b06      	ldr	r3, [pc, #24]	; (8007198 <HAL_RCC_OscConfig+0x470>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f0      	bne.n	800716c <HAL_RCC_OscConfig+0x444>
 800718a:	e03d      	b.n	8007208 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d107      	bne.n	80071a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e038      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
 8007198:	40023800 	.word	0x40023800
 800719c:	40007000 	.word	0x40007000
 80071a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071a4:	4b1b      	ldr	r3, [pc, #108]	; (8007214 <HAL_RCC_OscConfig+0x4ec>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d028      	beq.n	8007204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071bc:	429a      	cmp	r2, r3
 80071be:	d121      	bne.n	8007204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d11a      	bne.n	8007204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071d4:	4013      	ands	r3, r2
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071dc:	4293      	cmp	r3, r2
 80071de:	d111      	bne.n	8007204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ea:	085b      	lsrs	r3, r3, #1
 80071ec:	3b01      	subs	r3, #1
 80071ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d107      	bne.n	8007204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007200:	429a      	cmp	r2, r3
 8007202:	d001      	beq.n	8007208 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40023800 	.word	0x40023800

08007218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0cc      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800722c:	4b68      	ldr	r3, [pc, #416]	; (80073d0 <HAL_RCC_ClockConfig+0x1b8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d90c      	bls.n	8007254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800723a:	4b65      	ldr	r3, [pc, #404]	; (80073d0 <HAL_RCC_ClockConfig+0x1b8>)
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007242:	4b63      	ldr	r3, [pc, #396]	; (80073d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	429a      	cmp	r2, r3
 800724e:	d001      	beq.n	8007254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e0b8      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d020      	beq.n	80072a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800726c:	4b59      	ldr	r3, [pc, #356]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	4a58      	ldr	r2, [pc, #352]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0308 	and.w	r3, r3, #8
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007284:	4b53      	ldr	r3, [pc, #332]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	4a52      	ldr	r2, [pc, #328]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800728a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800728e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007290:	4b50      	ldr	r3, [pc, #320]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	494d      	ldr	r1, [pc, #308]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d044      	beq.n	8007338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d107      	bne.n	80072c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072b6:	4b47      	ldr	r3, [pc, #284]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d119      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e07f      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d003      	beq.n	80072d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d107      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072d6:	4b3f      	ldr	r3, [pc, #252]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d109      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e06f      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e6:	4b3b      	ldr	r3, [pc, #236]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e067      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072f6:	4b37      	ldr	r3, [pc, #220]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f023 0203 	bic.w	r2, r3, #3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4934      	ldr	r1, [pc, #208]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007304:	4313      	orrs	r3, r2
 8007306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007308:	f7fa fdc8 	bl	8001e9c <HAL_GetTick>
 800730c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800730e:	e00a      	b.n	8007326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007310:	f7fa fdc4 	bl	8001e9c <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	f241 3288 	movw	r2, #5000	; 0x1388
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e04f      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007326:	4b2b      	ldr	r3, [pc, #172]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f003 020c 	and.w	r2, r3, #12
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	429a      	cmp	r2, r3
 8007336:	d1eb      	bne.n	8007310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007338:	4b25      	ldr	r3, [pc, #148]	; (80073d0 <HAL_RCC_ClockConfig+0x1b8>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d20c      	bcs.n	8007360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007346:	4b22      	ldr	r3, [pc, #136]	; (80073d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800734e:	4b20      	ldr	r3, [pc, #128]	; (80073d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	429a      	cmp	r2, r3
 800735a:	d001      	beq.n	8007360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e032      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d008      	beq.n	800737e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800736c:	4b19      	ldr	r3, [pc, #100]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	4916      	ldr	r1, [pc, #88]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800737a:	4313      	orrs	r3, r2
 800737c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d009      	beq.n	800739e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800738a:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	490e      	ldr	r1, [pc, #56]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800739a:	4313      	orrs	r3, r2
 800739c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800739e:	f000 f821 	bl	80073e4 <HAL_RCC_GetSysClockFreq>
 80073a2:	4602      	mov	r2, r0
 80073a4:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	091b      	lsrs	r3, r3, #4
 80073aa:	f003 030f 	and.w	r3, r3, #15
 80073ae:	490a      	ldr	r1, [pc, #40]	; (80073d8 <HAL_RCC_ClockConfig+0x1c0>)
 80073b0:	5ccb      	ldrb	r3, [r1, r3]
 80073b2:	fa22 f303 	lsr.w	r3, r2, r3
 80073b6:	4a09      	ldr	r2, [pc, #36]	; (80073dc <HAL_RCC_ClockConfig+0x1c4>)
 80073b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073ba:	4b09      	ldr	r3, [pc, #36]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fa fd28 	bl	8001e14 <HAL_InitTick>

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	40023c00 	.word	0x40023c00
 80073d4:	40023800 	.word	0x40023800
 80073d8:	0800b2e8 	.word	0x0800b2e8
 80073dc:	20000004 	.word	0x20000004
 80073e0:	20000008 	.word	0x20000008

080073e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e8:	b094      	sub	sp, #80	; 0x50
 80073ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	647b      	str	r3, [r7, #68]	; 0x44
 80073f0:	2300      	movs	r3, #0
 80073f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f4:	2300      	movs	r3, #0
 80073f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073fc:	4b79      	ldr	r3, [pc, #484]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f003 030c 	and.w	r3, r3, #12
 8007404:	2b08      	cmp	r3, #8
 8007406:	d00d      	beq.n	8007424 <HAL_RCC_GetSysClockFreq+0x40>
 8007408:	2b08      	cmp	r3, #8
 800740a:	f200 80e1 	bhi.w	80075d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <HAL_RCC_GetSysClockFreq+0x34>
 8007412:	2b04      	cmp	r3, #4
 8007414:	d003      	beq.n	800741e <HAL_RCC_GetSysClockFreq+0x3a>
 8007416:	e0db      	b.n	80075d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007418:	4b73      	ldr	r3, [pc, #460]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800741a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800741c:	e0db      	b.n	80075d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800741e:	4b73      	ldr	r3, [pc, #460]	; (80075ec <HAL_RCC_GetSysClockFreq+0x208>)
 8007420:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007422:	e0d8      	b.n	80075d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007424:	4b6f      	ldr	r3, [pc, #444]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800742c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800742e:	4b6d      	ldr	r3, [pc, #436]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d063      	beq.n	8007502 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800743a:	4b6a      	ldr	r3, [pc, #424]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	099b      	lsrs	r3, r3, #6
 8007440:	2200      	movs	r2, #0
 8007442:	63bb      	str	r3, [r7, #56]	; 0x38
 8007444:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744c:	633b      	str	r3, [r7, #48]	; 0x30
 800744e:	2300      	movs	r3, #0
 8007450:	637b      	str	r3, [r7, #52]	; 0x34
 8007452:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007456:	4622      	mov	r2, r4
 8007458:	462b      	mov	r3, r5
 800745a:	f04f 0000 	mov.w	r0, #0
 800745e:	f04f 0100 	mov.w	r1, #0
 8007462:	0159      	lsls	r1, r3, #5
 8007464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007468:	0150      	lsls	r0, r2, #5
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	4621      	mov	r1, r4
 8007470:	1a51      	subs	r1, r2, r1
 8007472:	6139      	str	r1, [r7, #16]
 8007474:	4629      	mov	r1, r5
 8007476:	eb63 0301 	sbc.w	r3, r3, r1
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007488:	4659      	mov	r1, fp
 800748a:	018b      	lsls	r3, r1, #6
 800748c:	4651      	mov	r1, sl
 800748e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007492:	4651      	mov	r1, sl
 8007494:	018a      	lsls	r2, r1, #6
 8007496:	4651      	mov	r1, sl
 8007498:	ebb2 0801 	subs.w	r8, r2, r1
 800749c:	4659      	mov	r1, fp
 800749e:	eb63 0901 	sbc.w	r9, r3, r1
 80074a2:	f04f 0200 	mov.w	r2, #0
 80074a6:	f04f 0300 	mov.w	r3, #0
 80074aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074b6:	4690      	mov	r8, r2
 80074b8:	4699      	mov	r9, r3
 80074ba:	4623      	mov	r3, r4
 80074bc:	eb18 0303 	adds.w	r3, r8, r3
 80074c0:	60bb      	str	r3, [r7, #8]
 80074c2:	462b      	mov	r3, r5
 80074c4:	eb49 0303 	adc.w	r3, r9, r3
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	f04f 0300 	mov.w	r3, #0
 80074d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074d6:	4629      	mov	r1, r5
 80074d8:	024b      	lsls	r3, r1, #9
 80074da:	4621      	mov	r1, r4
 80074dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074e0:	4621      	mov	r1, r4
 80074e2:	024a      	lsls	r2, r1, #9
 80074e4:	4610      	mov	r0, r2
 80074e6:	4619      	mov	r1, r3
 80074e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ea:	2200      	movs	r2, #0
 80074ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074f4:	f7f8 fe68 	bl	80001c8 <__aeabi_uldivmod>
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4613      	mov	r3, r2
 80074fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007500:	e058      	b.n	80075b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007502:	4b38      	ldr	r3, [pc, #224]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	099b      	lsrs	r3, r3, #6
 8007508:	2200      	movs	r2, #0
 800750a:	4618      	mov	r0, r3
 800750c:	4611      	mov	r1, r2
 800750e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007512:	623b      	str	r3, [r7, #32]
 8007514:	2300      	movs	r3, #0
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
 8007518:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800751c:	4642      	mov	r2, r8
 800751e:	464b      	mov	r3, r9
 8007520:	f04f 0000 	mov.w	r0, #0
 8007524:	f04f 0100 	mov.w	r1, #0
 8007528:	0159      	lsls	r1, r3, #5
 800752a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800752e:	0150      	lsls	r0, r2, #5
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4641      	mov	r1, r8
 8007536:	ebb2 0a01 	subs.w	sl, r2, r1
 800753a:	4649      	mov	r1, r9
 800753c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007540:	f04f 0200 	mov.w	r2, #0
 8007544:	f04f 0300 	mov.w	r3, #0
 8007548:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800754c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007550:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007554:	ebb2 040a 	subs.w	r4, r2, sl
 8007558:	eb63 050b 	sbc.w	r5, r3, fp
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	00eb      	lsls	r3, r5, #3
 8007566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800756a:	00e2      	lsls	r2, r4, #3
 800756c:	4614      	mov	r4, r2
 800756e:	461d      	mov	r5, r3
 8007570:	4643      	mov	r3, r8
 8007572:	18e3      	adds	r3, r4, r3
 8007574:	603b      	str	r3, [r7, #0]
 8007576:	464b      	mov	r3, r9
 8007578:	eb45 0303 	adc.w	r3, r5, r3
 800757c:	607b      	str	r3, [r7, #4]
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	f04f 0300 	mov.w	r3, #0
 8007586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800758a:	4629      	mov	r1, r5
 800758c:	028b      	lsls	r3, r1, #10
 800758e:	4621      	mov	r1, r4
 8007590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007594:	4621      	mov	r1, r4
 8007596:	028a      	lsls	r2, r1, #10
 8007598:	4610      	mov	r0, r2
 800759a:	4619      	mov	r1, r3
 800759c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800759e:	2200      	movs	r2, #0
 80075a0:	61bb      	str	r3, [r7, #24]
 80075a2:	61fa      	str	r2, [r7, #28]
 80075a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075a8:	f7f8 fe0e 	bl	80001c8 <__aeabi_uldivmod>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4613      	mov	r3, r2
 80075b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	0c1b      	lsrs	r3, r3, #16
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	3301      	adds	r3, #1
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80075c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075ce:	e002      	b.n	80075d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075d0:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80075d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3750      	adds	r7, #80	; 0x50
 80075dc:	46bd      	mov	sp, r7
 80075de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075e2:	bf00      	nop
 80075e4:	40023800 	.word	0x40023800
 80075e8:	00f42400 	.word	0x00f42400
 80075ec:	007a1200 	.word	0x007a1200

080075f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075f4:	4b03      	ldr	r3, [pc, #12]	; (8007604 <HAL_RCC_GetHCLKFreq+0x14>)
 80075f6:	681b      	ldr	r3, [r3, #0]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	20000004 	.word	0x20000004

08007608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800760c:	f7ff fff0 	bl	80075f0 <HAL_RCC_GetHCLKFreq>
 8007610:	4602      	mov	r2, r0
 8007612:	4b05      	ldr	r3, [pc, #20]	; (8007628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	0a9b      	lsrs	r3, r3, #10
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	4903      	ldr	r1, [pc, #12]	; (800762c <HAL_RCC_GetPCLK1Freq+0x24>)
 800761e:	5ccb      	ldrb	r3, [r1, r3]
 8007620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007624:	4618      	mov	r0, r3
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40023800 	.word	0x40023800
 800762c:	0800b2f8 	.word	0x0800b2f8

08007630 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	d105      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007654:	2b00      	cmp	r3, #0
 8007656:	d035      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007658:	4b62      	ldr	r3, [pc, #392]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800765e:	f7fa fc1d 	bl	8001e9c <HAL_GetTick>
 8007662:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007664:	e008      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007666:	f7fa fc19 	bl	8001e9c <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d901      	bls.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e0b0      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007678:	4b5b      	ldr	r3, [pc, #364]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1f0      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	019a      	lsls	r2, r3, #6
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	071b      	lsls	r3, r3, #28
 8007690:	4955      	ldr	r1, [pc, #340]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007698:	4b52      	ldr	r3, [pc, #328]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800769a:	2201      	movs	r2, #1
 800769c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800769e:	f7fa fbfd 	bl	8001e9c <HAL_GetTick>
 80076a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076a4:	e008      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076a6:	f7fa fbf9 	bl	8001e9c <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d901      	bls.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e090      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076b8:	4b4b      	ldr	r3, [pc, #300]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d0f0      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8083 	beq.w	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
 80076d6:	4b44      	ldr	r3, [pc, #272]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	4a43      	ldr	r2, [pc, #268]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e0:	6413      	str	r3, [r2, #64]	; 0x40
 80076e2:	4b41      	ldr	r3, [pc, #260]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80076ee:	4b3f      	ldr	r3, [pc, #252]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a3e      	ldr	r2, [pc, #248]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80076f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076fa:	f7fa fbcf 	bl	8001e9c <HAL_GetTick>
 80076fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007700:	e008      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007702:	f7fa fbcb 	bl	8001e9c <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d901      	bls.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e062      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007714:	4b35      	ldr	r3, [pc, #212]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771c:	2b00      	cmp	r3, #0
 800771e:	d0f0      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007720:	4b31      	ldr	r3, [pc, #196]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007728:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d02f      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	429a      	cmp	r2, r3
 800773c:	d028      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800773e:	4b2a      	ldr	r3, [pc, #168]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007746:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007748:	4b29      	ldr	r3, [pc, #164]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800774a:	2201      	movs	r2, #1
 800774c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800774e:	4b28      	ldr	r3, [pc, #160]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007754:	4a24      	ldr	r2, [pc, #144]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800775a:	4b23      	ldr	r3, [pc, #140]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800775c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b01      	cmp	r3, #1
 8007764:	d114      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007766:	f7fa fb99 	bl	8001e9c <HAL_GetTick>
 800776a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800776c:	e00a      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800776e:	f7fa fb95 	bl	8001e9c <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	f241 3288 	movw	r2, #5000	; 0x1388
 800777c:	4293      	cmp	r3, r2
 800777e:	d901      	bls.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e02a      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007784:	4b18      	ldr	r3, [pc, #96]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007788:	f003 0302 	and.w	r3, r3, #2
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0ee      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800779c:	d10d      	bne.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80077ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b2:	490d      	ldr	r1, [pc, #52]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	608b      	str	r3, [r1, #8]
 80077b8:	e005      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80077ba:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	4a0a      	ldr	r2, [pc, #40]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80077c4:	6093      	str	r3, [r2, #8]
 80077c6:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d2:	4905      	ldr	r1, [pc, #20]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	42470068 	.word	0x42470068
 80077e8:	40023800 	.word	0x40023800
 80077ec:	40007000 	.word	0x40007000
 80077f0:	42470e40 	.word	0x42470e40

080077f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d13e      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007812:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d005      	beq.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d12f      	bne.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007828:	4b1e      	ldr	r3, [pc, #120]	; (80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800782a:	617b      	str	r3, [r7, #20]
          break;
 800782c:	e02f      	b.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800782e:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800783a:	d108      	bne.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800783c:	4b18      	ldr	r3, [pc, #96]	; (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007844:	4a18      	ldr	r2, [pc, #96]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007846:	fbb2 f3f3 	udiv	r3, r2, r3
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	e007      	b.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800784e:	4b14      	ldr	r3, [pc, #80]	; (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007856:	4a15      	ldr	r2, [pc, #84]	; (80078ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007858:	fbb2 f3f3 	udiv	r3, r2, r3
 800785c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800785e:	4b10      	ldr	r3, [pc, #64]	; (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007864:	099b      	lsrs	r3, r3, #6
 8007866:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	fb02 f303 	mul.w	r3, r2, r3
 8007870:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007872:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007878:	0f1b      	lsrs	r3, r3, #28
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	fbb2 f3f3 	udiv	r3, r2, r3
 8007884:	617b      	str	r3, [r7, #20]
          break;
 8007886:	e002      	b.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]
          break;
 800788c:	bf00      	nop
        }
      }
      break;
 800788e:	bf00      	nop
    }
  }
  return frequency;
 8007890:	697b      	ldr	r3, [r7, #20]
}
 8007892:	4618      	mov	r0, r3
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	40023800 	.word	0x40023800
 80078a4:	00bb8000 	.word	0x00bb8000
 80078a8:	007a1200 	.word	0x007a1200
 80078ac:	00f42400 	.word	0x00f42400

080078b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e07b      	b.n	80079ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d108      	bne.n	80078dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078d2:	d009      	beq.n	80078e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	61da      	str	r2, [r3, #28]
 80078da:	e005      	b.n	80078e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7fa f96c 	bl	8001be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800791e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007930:	431a      	orrs	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	431a      	orrs	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007958:	431a      	orrs	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007962:	431a      	orrs	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796c:	ea42 0103 	orr.w	r1, r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	0c1b      	lsrs	r3, r3, #16
 8007986:	f003 0104 	and.w	r1, r3, #4
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	f003 0210 	and.w	r2, r3, #16
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	69da      	ldr	r2, [r3, #28]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079c2:	b084      	sub	sp, #16
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	f107 001c 	add.w	r0, r7, #28
 80079d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d122      	bne.n	8007a20 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80079ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d105      	bne.n	8007a14 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f9bf 	bl	8007d98 <USB_CoreReset>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]
 8007a1e:	e01a      	b.n	8007a56 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f9b3 	bl	8007d98 <USB_CoreReset>
 8007a32:	4603      	mov	r3, r0
 8007a34:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d106      	bne.n	8007a4a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	639a      	str	r2, [r3, #56]	; 0x38
 8007a48:	e005      	b.n	8007a56 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d10b      	bne.n	8007a74 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f043 0206 	orr.w	r2, r3, #6
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f043 0220 	orr.w	r2, r3, #32
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a80:	b004      	add	sp, #16
 8007a82:	4770      	bx	lr

08007a84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f043 0201 	orr.w	r2, r3, #1
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f023 0201 	bic.w	r2, r3, #1
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d115      	bne.n	8007b16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007af6:	2001      	movs	r0, #1
 8007af8:	f7fa f9dc 	bl	8001eb4 <HAL_Delay>
      ms++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f939 	bl	8007d7a <USB_GetMode>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d01e      	beq.n	8007b4c <USB_SetCurrentMode+0x84>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b31      	cmp	r3, #49	; 0x31
 8007b12:	d9f0      	bls.n	8007af6 <USB_SetCurrentMode+0x2e>
 8007b14:	e01a      	b.n	8007b4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b16:	78fb      	ldrb	r3, [r7, #3]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d115      	bne.n	8007b48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b28:	2001      	movs	r0, #1
 8007b2a:	f7fa f9c3 	bl	8001eb4 <HAL_Delay>
      ms++;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3301      	adds	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f920 	bl	8007d7a <USB_GetMode>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d005      	beq.n	8007b4c <USB_SetCurrentMode+0x84>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b31      	cmp	r3, #49	; 0x31
 8007b44:	d9f0      	bls.n	8007b28 <USB_SetCurrentMode+0x60>
 8007b46:	e001      	b.n	8007b4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e005      	b.n	8007b58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b32      	cmp	r3, #50	; 0x32
 8007b50:	d101      	bne.n	8007b56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e000      	b.n	8007b58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3301      	adds	r3, #1
 8007b72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4a13      	ldr	r2, [pc, #76]	; (8007bc4 <USB_FlushTxFifo+0x64>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d901      	bls.n	8007b80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e01b      	b.n	8007bb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	daf2      	bge.n	8007b6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	019b      	lsls	r3, r3, #6
 8007b90:	f043 0220 	orr.w	r2, r3, #32
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4a08      	ldr	r2, [pc, #32]	; (8007bc4 <USB_FlushTxFifo+0x64>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d901      	bls.n	8007baa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e006      	b.n	8007bb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0320 	and.w	r3, r3, #32
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	d0f0      	beq.n	8007b98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	00030d40 	.word	0x00030d40

08007bc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4a11      	ldr	r2, [pc, #68]	; (8007c24 <USB_FlushRxFifo+0x5c>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d901      	bls.n	8007be6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e018      	b.n	8007c18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	daf2      	bge.n	8007bd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2210      	movs	r2, #16
 8007bf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4a08      	ldr	r2, [pc, #32]	; (8007c24 <USB_FlushRxFifo+0x5c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d901      	bls.n	8007c0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e006      	b.n	8007c18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f003 0310 	and.w	r3, r3, #16
 8007c12:	2b10      	cmp	r3, #16
 8007c14:	d0f0      	beq.n	8007bf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	00030d40 	.word	0x00030d40

08007c28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b089      	sub	sp, #36	; 0x24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4611      	mov	r1, r2
 8007c34:	461a      	mov	r2, r3
 8007c36:	460b      	mov	r3, r1
 8007c38:	71fb      	strb	r3, [r7, #7]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d123      	bne.n	8007c96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c4e:	88bb      	ldrh	r3, [r7, #4]
 8007c50:	3303      	adds	r3, #3
 8007c52:	089b      	lsrs	r3, r3, #2
 8007c54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c56:	2300      	movs	r3, #0
 8007c58:	61bb      	str	r3, [r7, #24]
 8007c5a:	e018      	b.n	8007c8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
 8007c5e:	031a      	lsls	r2, r3, #12
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c68:	461a      	mov	r2, r3
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	3301      	adds	r3, #1
 8007c74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	3301      	adds	r3, #1
 8007c86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	61bb      	str	r3, [r7, #24]
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d3e2      	bcc.n	8007c5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3724      	adds	r7, #36	; 0x24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b08b      	sub	sp, #44	; 0x2c
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007cba:	88fb      	ldrh	r3, [r7, #6]
 8007cbc:	089b      	lsrs	r3, r3, #2
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007cca:	2300      	movs	r3, #0
 8007ccc:	623b      	str	r3, [r7, #32]
 8007cce:	e014      	b.n	8007cfa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	601a      	str	r2, [r3, #0]
    pDest++;
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	3301      	adds	r3, #1
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	3301      	adds	r3, #1
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	623b      	str	r3, [r7, #32]
 8007cfa:	6a3a      	ldr	r2, [r7, #32]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d3e6      	bcc.n	8007cd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d02:	8bfb      	ldrh	r3, [r7, #30]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01e      	beq.n	8007d46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d12:	461a      	mov	r2, r3
 8007d14:	f107 0310 	add.w	r3, r7, #16
 8007d18:	6812      	ldr	r2, [r2, #0]
 8007d1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	fa22 f303 	lsr.w	r3, r2, r3
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	701a      	strb	r2, [r3, #0]
      i++;
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	3301      	adds	r3, #1
 8007d32:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	3301      	adds	r3, #1
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007d3a:	8bfb      	ldrh	r3, [r7, #30]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d40:	8bfb      	ldrh	r3, [r7, #30]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1ea      	bne.n	8007d1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	372c      	adds	r7, #44	; 0x2c
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	f003 0301 	and.w	r3, r3, #1
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
	...

08007d98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3301      	adds	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4a13      	ldr	r2, [pc, #76]	; (8007dfc <USB_CoreReset+0x64>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d901      	bls.n	8007db6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e01b      	b.n	8007dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	daf2      	bge.n	8007da4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f043 0201 	orr.w	r2, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <USB_CoreReset+0x64>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d901      	bls.n	8007de0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e006      	b.n	8007dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d0f0      	beq.n	8007dce <USB_CoreReset+0x36>

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	00030d40 	.word	0x00030d40

08007e00 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e00:	b084      	sub	sp, #16
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b086      	sub	sp, #24
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e20:	461a      	mov	r2, r3
 8007e22:	2300      	movs	r3, #0
 8007e24:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e36:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d018      	beq.n	8007e88 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d10a      	bne.n	8007e72 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e6a:	f043 0304 	orr.w	r3, r3, #4
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	e014      	b.n	8007e9c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e80:	f023 0304 	bic.w	r3, r3, #4
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	e009      	b.n	8007e9c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e96:	f023 0304 	bic.w	r3, r3, #4
 8007e9a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e9c:	2110      	movs	r1, #16
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7ff fe5e 	bl	8007b60 <USB_FlushTxFifo>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fe8a 	bl	8007bc8 <USB_FlushRxFifo>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	613b      	str	r3, [r7, #16]
 8007ec2:	e015      	b.n	8007ef0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	3301      	adds	r3, #1
 8007eee:	613b      	str	r3, [r7, #16]
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d3e5      	bcc.n	8007ec4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f04f 32ff 	mov.w	r2, #4294967295
 8007f04:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00b      	beq.n	8007f2a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f18:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a13      	ldr	r2, [pc, #76]	; (8007f6c <USB_HostInit+0x16c>)
 8007f1e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a13      	ldr	r2, [pc, #76]	; (8007f70 <USB_HostInit+0x170>)
 8007f24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007f28:	e009      	b.n	8007f3e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2280      	movs	r2, #128	; 0x80
 8007f2e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a10      	ldr	r2, [pc, #64]	; (8007f74 <USB_HostInit+0x174>)
 8007f34:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a0f      	ldr	r2, [pc, #60]	; (8007f78 <USB_HostInit+0x178>)
 8007f3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d105      	bne.n	8007f50 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	f043 0210 	orr.w	r2, r3, #16
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	699a      	ldr	r2, [r3, #24]
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <USB_HostInit+0x17c>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f68:	b004      	add	sp, #16
 8007f6a:	4770      	bx	lr
 8007f6c:	01000200 	.word	0x01000200
 8007f70:	00e00300 	.word	0x00e00300
 8007f74:	00600080 	.word	0x00600080
 8007f78:	004000e0 	.word	0x004000e0
 8007f7c:	a3200008 	.word	0xa3200008

08007f80 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f9e:	f023 0303 	bic.w	r3, r3, #3
 8007fa2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	78fb      	ldrb	r3, [r7, #3]
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	68f9      	ldr	r1, [r7, #12]
 8007fb4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d107      	bne.n	8007fd2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fc8:	461a      	mov	r2, r3
 8007fca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007fce:	6053      	str	r3, [r2, #4]
 8007fd0:	e009      	b.n	8007fe6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007fd2:	78fb      	ldrb	r3, [r7, #3]
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d106      	bne.n	8007fe6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f241 7370 	movw	r3, #6000	; 0x1770
 8007fe4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008014:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800801e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008022:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008024:	2064      	movs	r0, #100	; 0x64
 8008026:	f7f9 ff45 	bl	8001eb4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008036:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008038:	200a      	movs	r0, #10
 800803a:	f7f9 ff3b 	bl	8001eb4 <HAL_Delay>

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800806c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d109      	bne.n	800808c <USB_DriveVbus+0x44>
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d106      	bne.n	800808c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008086:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800808a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008096:	d109      	bne.n	80080ac <USB_DriveVbus+0x64>
 8008098:	78fb      	ldrb	r3, [r7, #3]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d106      	bne.n	80080ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b085      	sub	sp, #20
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	0c5b      	lsrs	r3, r3, #17
 80080d8:	f003 0303 	and.w	r3, r3, #3
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	b29b      	uxth	r3, r3
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	4608      	mov	r0, r1
 8008116:	4611      	mov	r1, r2
 8008118:	461a      	mov	r2, r3
 800811a:	4603      	mov	r3, r0
 800811c:	70fb      	strb	r3, [r7, #3]
 800811e:	460b      	mov	r3, r1
 8008120:	70bb      	strb	r3, [r7, #2]
 8008122:	4613      	mov	r3, r2
 8008124:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800812e:	78fb      	ldrb	r3, [r7, #3]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	4413      	add	r3, r2
 8008136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800813a:	461a      	mov	r2, r3
 800813c:	f04f 33ff 	mov.w	r3, #4294967295
 8008140:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008142:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008146:	2b03      	cmp	r3, #3
 8008148:	d87e      	bhi.n	8008248 <USB_HC_Init+0x13c>
 800814a:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <USB_HC_Init+0x44>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	08008161 	.word	0x08008161
 8008154:	0800820b 	.word	0x0800820b
 8008158:	08008161 	.word	0x08008161
 800815c:	080081cd 	.word	0x080081cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	4413      	add	r3, r2
 8008168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816c:	461a      	mov	r2, r3
 800816e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008172:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008174:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008178:	2b00      	cmp	r3, #0
 800817a:	da10      	bge.n	800819e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	4413      	add	r3, r2
 8008184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	78fa      	ldrb	r2, [r7, #3]
 800818c:	0151      	lsls	r1, r2, #5
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	440a      	add	r2, r1
 8008192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800819a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800819c:	e057      	b.n	800824e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d051      	beq.n	800824e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	0151      	lsls	r1, r2, #5
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	440a      	add	r2, r1
 80081c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80081c8:	60d3      	str	r3, [r2, #12]
      break;
 80081ca:	e040      	b.n	800824e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80081cc:	78fb      	ldrb	r3, [r7, #3]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d8:	461a      	mov	r2, r3
 80081da:	f240 639d 	movw	r3, #1693	; 0x69d
 80081de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80081e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da34      	bge.n	8008252 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	78fa      	ldrb	r2, [r7, #3]
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008206:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008208:	e023      	b.n	8008252 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	4413      	add	r3, r2
 8008212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008216:	461a      	mov	r2, r3
 8008218:	f240 2325 	movw	r3, #549	; 0x225
 800821c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800821e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008222:	2b00      	cmp	r3, #0
 8008224:	da17      	bge.n	8008256 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008226:	78fb      	ldrb	r3, [r7, #3]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	4413      	add	r3, r2
 800822e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	78fa      	ldrb	r2, [r7, #3]
 8008236:	0151      	lsls	r1, r2, #5
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	440a      	add	r2, r1
 800823c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008240:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008244:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008246:	e006      	b.n	8008256 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	77fb      	strb	r3, [r7, #31]
      break;
 800824c:	e004      	b.n	8008258 <USB_HC_Init+0x14c>
      break;
 800824e:	bf00      	nop
 8008250:	e002      	b.n	8008258 <USB_HC_Init+0x14c>
      break;
 8008252:	bf00      	nop
 8008254:	e000      	b.n	8008258 <USB_HC_Init+0x14c>
      break;
 8008256:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	4413      	add	r3, r2
 8008260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	78fa      	ldrb	r2, [r7, #3]
 8008268:	0151      	lsls	r1, r2, #5
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	440a      	add	r2, r1
 800826e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008272:	f043 0302 	orr.w	r3, r3, #2
 8008276:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800827e:	699a      	ldr	r2, [r3, #24]
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	f003 030f 	and.w	r3, r3, #15
 8008286:	2101      	movs	r1, #1
 8008288:	fa01 f303 	lsl.w	r3, r1, r3
 800828c:	6939      	ldr	r1, [r7, #16]
 800828e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008292:	4313      	orrs	r3, r2
 8008294:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80082a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	da03      	bge.n	80082b2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80082aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ae:	61bb      	str	r3, [r7, #24]
 80082b0:	e001      	b.n	80082b6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff feff 	bl	80080ba <USB_GetHostSpeed>
 80082bc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80082be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d106      	bne.n	80082d4 <USB_HC_Init+0x1c8>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d003      	beq.n	80082d4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80082cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80082d0:	617b      	str	r3, [r7, #20]
 80082d2:	e001      	b.n	80082d8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80082d8:	787b      	ldrb	r3, [r7, #1]
 80082da:	059b      	lsls	r3, r3, #22
 80082dc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80082e0:	78bb      	ldrb	r3, [r7, #2]
 80082e2:	02db      	lsls	r3, r3, #11
 80082e4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80082e8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80082ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80082ee:	049b      	lsls	r3, r3, #18
 80082f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80082f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80082f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80082f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80082fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008302:	78fb      	ldrb	r3, [r7, #3]
 8008304:	0159      	lsls	r1, r3, #5
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	440b      	add	r3, r1
 800830a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008314:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008316:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800831a:	2b03      	cmp	r3, #3
 800831c:	d003      	beq.n	8008326 <USB_HC_Init+0x21a>
 800831e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008322:	2b01      	cmp	r3, #1
 8008324:	d10f      	bne.n	8008346 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	4413      	add	r3, r2
 800832e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	78fa      	ldrb	r2, [r7, #3]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	440a      	add	r2, r1
 800833c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008340:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008344:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008346:	7ffb      	ldrb	r3, [r7, #31]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3720      	adds	r7, #32
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08c      	sub	sp, #48	; 0x30
 8008354:	af02      	add	r7, sp, #8
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800836c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008376:	2b00      	cmp	r3, #0
 8008378:	d02d      	beq.n	80083d6 <USB_HC_StartXfer+0x86>
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	791b      	ldrb	r3, [r3, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d129      	bne.n	80083d6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d117      	bne.n	80083b8 <USB_HC_StartXfer+0x68>
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	79db      	ldrb	r3, [r3, #7]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <USB_HC_StartXfer+0x48>
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	79db      	ldrb	r3, [r3, #7]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d10f      	bne.n	80083b8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	69fa      	ldr	r2, [r7, #28]
 80083a8:	0151      	lsls	r1, r2, #5
 80083aa:	6a3a      	ldr	r2, [r7, #32]
 80083ac:	440a      	add	r2, r1
 80083ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10b      	bne.n	80083d6 <USB_HC_StartXfer+0x86>
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	795b      	ldrb	r3, [r3, #5]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d107      	bne.n	80083d6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	785b      	ldrb	r3, [r3, #1]
 80083ca:	4619      	mov	r1, r3
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fa0f 	bl	80087f0 <USB_DoPing>
      return HAL_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	e0f8      	b.n	80085c8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d018      	beq.n	8008410 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	8912      	ldrh	r2, [r2, #8]
 80083e6:	4413      	add	r3, r2
 80083e8:	3b01      	subs	r3, #1
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	8912      	ldrh	r2, [r2, #8]
 80083ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80083f2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80083f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80083f6:	8b7b      	ldrh	r3, [r7, #26]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d90b      	bls.n	8008414 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80083fc:	8b7b      	ldrh	r3, [r7, #26]
 80083fe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008400:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	8912      	ldrh	r2, [r2, #8]
 8008406:	fb03 f202 	mul.w	r2, r3, r2
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	611a      	str	r2, [r3, #16]
 800840e:	e001      	b.n	8008414 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008410:	2301      	movs	r3, #1
 8008412:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	78db      	ldrb	r3, [r3, #3]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800841c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	8912      	ldrh	r2, [r2, #8]
 8008422:	fb03 f202 	mul.w	r2, r3, r2
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	611a      	str	r2, [r3, #16]
 800842a:	e003      	b.n	8008434 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	695a      	ldr	r2, [r3, #20]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800843c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800843e:	04d9      	lsls	r1, r3, #19
 8008440:	4b63      	ldr	r3, [pc, #396]	; (80085d0 <USB_HC_StartXfer+0x280>)
 8008442:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008444:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	7a9b      	ldrb	r3, [r3, #10]
 800844a:	075b      	lsls	r3, r3, #29
 800844c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008450:	69f9      	ldr	r1, [r7, #28]
 8008452:	0148      	lsls	r0, r1, #5
 8008454:	6a39      	ldr	r1, [r7, #32]
 8008456:	4401      	add	r1, r0
 8008458:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800845c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800845e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d009      	beq.n	800847a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	68d9      	ldr	r1, [r3, #12]
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	4413      	add	r3, r2
 8008472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008476:	460a      	mov	r2, r1
 8008478:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	bf0c      	ite	eq
 800848a:	2301      	moveq	r3, #1
 800848c:	2300      	movne	r3, #0
 800848e:	b2db      	uxtb	r3, r3
 8008490:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	4413      	add	r3, r2
 800849a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69fa      	ldr	r2, [r7, #28]
 80084a2:	0151      	lsls	r1, r2, #5
 80084a4:	6a3a      	ldr	r2, [r7, #32]
 80084a6:	440a      	add	r2, r1
 80084a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084b0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	7e7b      	ldrb	r3, [r7, #25]
 80084c2:	075b      	lsls	r3, r3, #29
 80084c4:	69f9      	ldr	r1, [r7, #28]
 80084c6:	0148      	lsls	r0, r1, #5
 80084c8:	6a39      	ldr	r1, [r7, #32]
 80084ca:	4401      	add	r1, r0
 80084cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80084d0:	4313      	orrs	r3, r2
 80084d2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084ea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	78db      	ldrb	r3, [r3, #3]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d004      	beq.n	80084fe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084fa:	613b      	str	r3, [r7, #16]
 80084fc:	e003      	b.n	8008506 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008504:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800850c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	4413      	add	r3, r2
 8008516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851a:	461a      	mov	r2, r3
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e04e      	b.n	80085c8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	78db      	ldrb	r3, [r3, #3]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d149      	bne.n	80085c6 <USB_HC_StartXfer+0x276>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d045      	beq.n	80085c6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	79db      	ldrb	r3, [r3, #7]
 800853e:	2b03      	cmp	r3, #3
 8008540:	d830      	bhi.n	80085a4 <USB_HC_StartXfer+0x254>
 8008542:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <USB_HC_StartXfer+0x1f8>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	08008559 	.word	0x08008559
 800854c:	0800857d 	.word	0x0800857d
 8008550:	08008559 	.word	0x08008559
 8008554:	0800857d 	.word	0x0800857d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	3303      	adds	r3, #3
 800855e:	089b      	lsrs	r3, r3, #2
 8008560:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008562:	8afa      	ldrh	r2, [r7, #22]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	b29b      	uxth	r3, r3
 800856a:	429a      	cmp	r2, r3
 800856c:	d91c      	bls.n	80085a8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	f043 0220 	orr.w	r2, r3, #32
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	619a      	str	r2, [r3, #24]
        }
        break;
 800857a:	e015      	b.n	80085a8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	3303      	adds	r3, #3
 8008582:	089b      	lsrs	r3, r3, #2
 8008584:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008586:	8afa      	ldrh	r2, [r7, #22]
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	b29b      	uxth	r3, r3
 8008592:	429a      	cmp	r2, r3
 8008594:	d90a      	bls.n	80085ac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80085a2:	e003      	b.n	80085ac <USB_HC_StartXfer+0x25c>

      default:
        break;
 80085a4:	bf00      	nop
 80085a6:	e002      	b.n	80085ae <USB_HC_StartXfer+0x25e>
        break;
 80085a8:	bf00      	nop
 80085aa:	e000      	b.n	80085ae <USB_HC_StartXfer+0x25e>
        break;
 80085ac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	68d9      	ldr	r1, [r3, #12]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	785a      	ldrb	r2, [r3, #1]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	2000      	movs	r0, #0
 80085be:	9000      	str	r0, [sp, #0]
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7ff fb31 	bl	8007c28 <USB_WritePacket>
  }

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3728      	adds	r7, #40	; 0x28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	1ff80000 	.word	0x1ff80000

080085d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	b29b      	uxth	r3, r3
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b089      	sub	sp, #36	; 0x24
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	460b      	mov	r3, r1
 8008600:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008606:	78fb      	ldrb	r3, [r7, #3]
 8008608:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	4413      	add	r3, r2
 8008616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	0c9b      	lsrs	r3, r3, #18
 800861e:	f003 0303 	and.w	r3, r3, #3
 8008622:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	4413      	add	r3, r2
 800862c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	0fdb      	lsrs	r3, r3, #31
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b20      	cmp	r3, #32
 8008644:	d104      	bne.n	8008650 <USB_HC_Halt+0x5a>
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	e0c8      	b.n	80087e2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <USB_HC_Halt+0x66>
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2b02      	cmp	r3, #2
 800865a:	d163      	bne.n	8008724 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	4413      	add	r3, r2
 8008664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	0151      	lsls	r1, r2, #5
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	440a      	add	r2, r1
 8008672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800867a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f003 0320 	and.w	r3, r3, #32
 8008684:	2b00      	cmp	r3, #0
 8008686:	f040 80ab 	bne.w	80087e0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d133      	bne.n	80086fe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	4413      	add	r3, r2
 800869e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	0151      	lsls	r1, r2, #5
 80086a8:	69fa      	ldr	r2, [r7, #28]
 80086aa:	440a      	add	r2, r1
 80086ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086b4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	0151      	lsls	r1, r2, #5
 80086c8:	69fa      	ldr	r2, [r7, #28]
 80086ca:	440a      	add	r2, r1
 80086cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086d4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3301      	adds	r3, #1
 80086da:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086e2:	d81d      	bhi.n	8008720 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086fa:	d0ec      	beq.n	80086d6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80086fc:	e070      	b.n	80087e0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	4413      	add	r3, r2
 8008706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	0151      	lsls	r1, r2, #5
 8008710:	69fa      	ldr	r2, [r7, #28]
 8008712:	440a      	add	r2, r1
 8008714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800871c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800871e:	e05f      	b.n	80087e0 <USB_HC_Halt+0x1ea>
            break;
 8008720:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008722:	e05d      	b.n	80087e0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	4413      	add	r3, r2
 800872c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	0151      	lsls	r1, r2, #5
 8008736:	69fa      	ldr	r2, [r7, #28]
 8008738:	440a      	add	r2, r1
 800873a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800873e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008742:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d133      	bne.n	80087bc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	4413      	add	r3, r2
 800875c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	0151      	lsls	r1, r2, #5
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	440a      	add	r2, r1
 800876a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800876e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008772:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	4413      	add	r3, r2
 800877c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	0151      	lsls	r1, r2, #5
 8008786:	69fa      	ldr	r2, [r7, #28]
 8008788:	440a      	add	r2, r1
 800878a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800878e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008792:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3301      	adds	r3, #1
 8008798:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087a0:	d81d      	bhi.n	80087de <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087b8:	d0ec      	beq.n	8008794 <USB_HC_Halt+0x19e>
 80087ba:	e011      	b.n	80087e0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	0151      	lsls	r1, r2, #5
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	440a      	add	r2, r1
 80087d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	e000      	b.n	80087e0 <USB_HC_Halt+0x1ea>
          break;
 80087de:	bf00      	nop
    }
  }

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3724      	adds	r7, #36	; 0x24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
	...

080087f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008804:	2301      	movs	r3, #1
 8008806:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	04da      	lsls	r2, r3, #19
 800880c:	4b15      	ldr	r3, [pc, #84]	; (8008864 <USB_DoPing+0x74>)
 800880e:	4013      	ands	r3, r2
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	0151      	lsls	r1, r2, #5
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	440a      	add	r2, r1
 8008818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800881c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008820:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	4413      	add	r3, r2
 800882a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008838:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008840:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	4413      	add	r3, r2
 800884a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884e:	461a      	mov	r2, r3
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	1ff80000 	.word	0x1ff80000

08008868 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b088      	sub	sp, #32
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff f912 	bl	8007aa6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008882:	2110      	movs	r1, #16
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff f96b 	bl	8007b60 <USB_FlushTxFifo>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff f997 	bl	8007bc8 <USB_FlushRxFifo>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80088a4:	2300      	movs	r3, #0
 80088a6:	61bb      	str	r3, [r7, #24]
 80088a8:	e01f      	b.n	80088ea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088de:	461a      	mov	r2, r3
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	3301      	adds	r3, #1
 80088e8:	61bb      	str	r3, [r7, #24]
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2b0f      	cmp	r3, #15
 80088ee:	d9dc      	bls.n	80088aa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80088f0:	2300      	movs	r3, #0
 80088f2:	61bb      	str	r3, [r7, #24]
 80088f4:	e034      	b.n	8008960 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800890c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008914:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800891c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892a:	461a      	mov	r2, r3
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3301      	adds	r3, #1
 8008934:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800893c:	d80c      	bhi.n	8008958 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	4413      	add	r3, r2
 8008946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008954:	d0ec      	beq.n	8008930 <USB_StopHost+0xc8>
 8008956:	e000      	b.n	800895a <USB_StopHost+0xf2>
        break;
 8008958:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	3301      	adds	r3, #1
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	2b0f      	cmp	r3, #15
 8008964:	d9c7      	bls.n	80088f6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800896c:	461a      	mov	r2, r3
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f04f 32ff 	mov.w	r2, #4294967295
 800897a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff f881 	bl	8007a84 <USB_EnableGlobalInt>

  return ret;
 8008982:	7ffb      	ldrb	r3, [r7, #31]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3720      	adds	r7, #32
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800898c:	b590      	push	{r4, r7, lr}
 800898e:	b089      	sub	sp, #36	; 0x24
 8008990:	af04      	add	r7, sp, #16
 8008992:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008994:	2301      	movs	r3, #1
 8008996:	2202      	movs	r2, #2
 8008998:	2102      	movs	r1, #2
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fc66 	bl	800926c <USBH_FindInterface>
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	2bff      	cmp	r3, #255	; 0xff
 80089a8:	d002      	beq.n	80089b0 <USBH_CDC_InterfaceInit+0x24>
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d901      	bls.n	80089b4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80089b0:	2302      	movs	r3, #2
 80089b2:	e13d      	b.n	8008c30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fc3b 	bl	8009234 <USBH_SelectInterface>
 80089be:	4603      	mov	r3, r0
 80089c0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80089c8:	2302      	movs	r3, #2
 80089ca:	e131      	b.n	8008c30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80089d2:	2050      	movs	r0, #80	; 0x50
 80089d4:	f002 fafa 	bl	800afcc <malloc>
 80089d8:	4603      	mov	r3, r0
 80089da:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089e2:	69db      	ldr	r3, [r3, #28]
 80089e4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80089ec:	2302      	movs	r3, #2
 80089ee:	e11f      	b.n	8008c30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80089f0:	2250      	movs	r2, #80	; 0x50
 80089f2:	2100      	movs	r1, #0
 80089f4:	68b8      	ldr	r0, [r7, #8]
 80089f6:	f002 fb07 	bl	800b008 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	211a      	movs	r1, #26
 8008a00:	fb01 f303 	mul.w	r3, r1, r3
 8008a04:	4413      	add	r3, r2
 8008a06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	b25b      	sxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	da15      	bge.n	8008a3e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	211a      	movs	r1, #26
 8008a18:	fb01 f303 	mul.w	r3, r1, r3
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a22:	781a      	ldrb	r2, [r3, #0]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	211a      	movs	r1, #26
 8008a2e:	fb01 f303 	mul.w	r3, r1, r3
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008a38:	881a      	ldrh	r2, [r3, #0]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	785b      	ldrb	r3, [r3, #1]
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 ff2c 	bl	800a8a2 <USBH_AllocPipe>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	7819      	ldrb	r1, [r3, #0]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	7858      	ldrb	r0, [r3, #1]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	8952      	ldrh	r2, [r2, #10]
 8008a6a:	9202      	str	r2, [sp, #8]
 8008a6c:	2203      	movs	r2, #3
 8008a6e:	9201      	str	r2, [sp, #4]
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	4623      	mov	r3, r4
 8008a74:	4602      	mov	r2, r0
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f001 fee4 	bl	800a844 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2200      	movs	r2, #0
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f002 f9f3 	bl	800ae70 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	210a      	movs	r1, #10
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fbeb 	bl	800926c <USBH_FindInterface>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	2bff      	cmp	r3, #255	; 0xff
 8008a9e:	d002      	beq.n	8008aa6 <USBH_CDC_InterfaceInit+0x11a>
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d901      	bls.n	8008aaa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	e0c2      	b.n	8008c30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	211a      	movs	r1, #26
 8008ab0:	fb01 f303 	mul.w	r3, r1, r3
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	b25b      	sxtb	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	da16      	bge.n	8008af0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	211a      	movs	r1, #26
 8008ac8:	fb01 f303 	mul.w	r3, r1, r3
 8008acc:	4413      	add	r3, r2
 8008ace:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	211a      	movs	r1, #26
 8008ade:	fb01 f303 	mul.w	r3, r1, r3
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ae8:	881a      	ldrh	r2, [r3, #0]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	835a      	strh	r2, [r3, #26]
 8008aee:	e015      	b.n	8008b1c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	211a      	movs	r1, #26
 8008af6:	fb01 f303 	mul.w	r3, r1, r3
 8008afa:	4413      	add	r3, r2
 8008afc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b00:	781a      	ldrb	r2, [r3, #0]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	211a      	movs	r1, #26
 8008b0c:	fb01 f303 	mul.w	r3, r1, r3
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b16:	881a      	ldrh	r2, [r3, #0]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	211a      	movs	r1, #26
 8008b22:	fb01 f303 	mul.w	r3, r1, r3
 8008b26:	4413      	add	r3, r2
 8008b28:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	b25b      	sxtb	r3, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	da16      	bge.n	8008b62 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	211a      	movs	r1, #26
 8008b3a:	fb01 f303 	mul.w	r3, r1, r3
 8008b3e:	4413      	add	r3, r2
 8008b40:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b44:	781a      	ldrb	r2, [r3, #0]
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	211a      	movs	r1, #26
 8008b50:	fb01 f303 	mul.w	r3, r1, r3
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b5a:	881a      	ldrh	r2, [r3, #0]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	835a      	strh	r2, [r3, #26]
 8008b60:	e015      	b.n	8008b8e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	211a      	movs	r1, #26
 8008b68:	fb01 f303 	mul.w	r3, r1, r3
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b72:	781a      	ldrb	r2, [r3, #0]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	211a      	movs	r1, #26
 8008b7e:	fb01 f303 	mul.w	r3, r1, r3
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b88:	881a      	ldrh	r2, [r3, #0]
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	7b9b      	ldrb	r3, [r3, #14]
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 fe84 	bl	800a8a2 <USBH_AllocPipe>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	7bdb      	ldrb	r3, [r3, #15]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 fe7a 	bl	800a8a2 <USBH_AllocPipe>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	7b59      	ldrb	r1, [r3, #13]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	7b98      	ldrb	r0, [r3, #14]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	8b12      	ldrh	r2, [r2, #24]
 8008bce:	9202      	str	r2, [sp, #8]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	9201      	str	r2, [sp, #4]
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	4623      	mov	r3, r4
 8008bd8:	4602      	mov	r2, r0
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f001 fe32 	bl	800a844 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	7b19      	ldrb	r1, [r3, #12]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	7bd8      	ldrb	r0, [r3, #15]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	8b52      	ldrh	r2, [r2, #26]
 8008bf8:	9202      	str	r2, [sp, #8]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	9201      	str	r2, [sp, #4]
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	4623      	mov	r3, r4
 8008c02:	4602      	mov	r2, r0
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 fe1d 	bl	800a844 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	7b5b      	ldrb	r3, [r3, #13]
 8008c16:	2200      	movs	r2, #0
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f002 f928 	bl	800ae70 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	7b1b      	ldrb	r3, [r3, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f002 f921 	bl	800ae70 <USBH_LL_SetToggle>

  return USBH_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd90      	pop	{r4, r7, pc}

08008c38 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00e      	beq.n	8008c70 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 fe12 	bl	800a882 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 fe3d 	bl	800a8e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	7b1b      	ldrb	r3, [r3, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00e      	beq.n	8008c96 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	7b1b      	ldrb	r3, [r3, #12]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 fdff 	bl	800a882 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	7b1b      	ldrb	r3, [r3, #12]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 fe2a 	bl	800a8e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	7b5b      	ldrb	r3, [r3, #13]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00e      	beq.n	8008cbc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	7b5b      	ldrb	r3, [r3, #13]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 fdec 	bl	800a882 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	7b5b      	ldrb	r3, [r3, #13]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 fe17 	bl	800a8e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00b      	beq.n	8008ce0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f002 f983 	bl	800afdc <free>
    phost->pActiveClass->pData = 0U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cdc:	2200      	movs	r2, #0
 8008cde:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3340      	adds	r3, #64	; 0x40
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f8b1 	bl	8008e6a <GetLineCoding>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008d0c:	7afb      	ldrb	r3, [r7, #11]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d105      	bne.n	8008d1e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d18:	2102      	movs	r1, #2
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008d1e:	7afb      	ldrb	r3, [r7, #11]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d877      	bhi.n	8008e3c <USBH_CDC_Process+0x114>
 8008d4c:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <USBH_CDC_Process+0x2c>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008d69 	.word	0x08008d69
 8008d58:	08008d6f 	.word	0x08008d6f
 8008d5c:	08008d9f 	.word	0x08008d9f
 8008d60:	08008e13 	.word	0x08008e13
 8008d64:	08008e21 	.word	0x08008e21
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d6c:	e06d      	b.n	8008e4a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f897 	bl	8008ea8 <SetLineCoding>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d104      	bne.n	8008d8e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2202      	movs	r2, #2
 8008d88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008d8c:	e058      	b.n	8008e40 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d055      	beq.n	8008e40 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	2204      	movs	r2, #4
 8008d98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008d9c:	e050      	b.n	8008e40 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	3340      	adds	r3, #64	; 0x40
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f860 	bl	8008e6a <GetLineCoding>
 8008daa:	4603      	mov	r3, r0
 8008dac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d126      	bne.n	8008e02 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dc6:	791b      	ldrb	r3, [r3, #4]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d13b      	bne.n	8008e44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dd6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d133      	bne.n	8008e44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008de6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d12b      	bne.n	8008e44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008df4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d124      	bne.n	8008e44 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f958 	bl	80090b0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e00:	e020      	b.n	8008e44 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d01d      	beq.n	8008e44 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2204      	movs	r2, #4
 8008e0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008e10:	e018      	b.n	8008e44 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f867 	bl	8008ee6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f8da 	bl	8008fd2 <CDC_ProcessReception>
      break;
 8008e1e:	e014      	b.n	8008e4a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008e20:	2100      	movs	r1, #0
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 ffef 	bl	8009e06 <USBH_ClrFeature>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10a      	bne.n	8008e48 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008e3a:	e005      	b.n	8008e48 <USBH_CDC_Process+0x120>

    default:
      break;
 8008e3c:	bf00      	nop
 8008e3e:	e004      	b.n	8008e4a <USBH_CDC_Process+0x122>
      break;
 8008e40:	bf00      	nop
 8008e42:	e002      	b.n	8008e4a <USBH_CDC_Process+0x122>
      break;
 8008e44:	bf00      	nop
 8008e46:	e000      	b.n	8008e4a <USBH_CDC_Process+0x122>
      break;
 8008e48:	bf00      	nop

  }

  return status;
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	22a1      	movs	r2, #161	; 0xa1
 8008e78:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2221      	movs	r2, #33	; 0x21
 8008e7e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2207      	movs	r2, #7
 8008e90:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2207      	movs	r2, #7
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 fa81 	bl	800a3a0 <USBH_CtlReq>
 8008e9e:	4603      	mov	r3, r0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2221      	movs	r2, #33	; 0x21
 8008eb6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2207      	movs	r2, #7
 8008ece:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2207      	movs	r2, #7
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f001 fa62 	bl	800a3a0 <USBH_CtlReq>
 8008edc:	4603      	mov	r3, r0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b086      	sub	sp, #24
 8008eea:	af02      	add	r7, sp, #8
 8008eec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d002      	beq.n	8008f0c <CDC_ProcessTransmission+0x26>
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d023      	beq.n	8008f52 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008f0a:	e05e      	b.n	8008fca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	8b12      	ldrh	r2, [r2, #24]
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d90b      	bls.n	8008f30 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	69d9      	ldr	r1, [r3, #28]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	8b1a      	ldrh	r2, [r3, #24]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	7b5b      	ldrb	r3, [r3, #13]
 8008f24:	2001      	movs	r0, #1
 8008f26:	9000      	str	r0, [sp, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f001 fc48 	bl	800a7be <USBH_BulkSendData>
 8008f2e:	e00b      	b.n	8008f48 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	7b5b      	ldrb	r3, [r3, #13]
 8008f3e:	2001      	movs	r0, #1
 8008f40:	9000      	str	r0, [sp, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 fc3b 	bl	800a7be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008f50:	e03b      	b.n	8008fca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	7b5b      	ldrb	r3, [r3, #13]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 ff5f 	bl	800ae1c <USBH_LL_GetURBState>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008f62:	7afb      	ldrb	r3, [r7, #11]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d128      	bne.n	8008fba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	8b12      	ldrh	r2, [r2, #24]
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d90e      	bls.n	8008f92 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	8b12      	ldrh	r2, [r2, #24]
 8008f7c:	1a9a      	subs	r2, r3, r2
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	8b12      	ldrh	r2, [r2, #24]
 8008f8a:	441a      	add	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	61da      	str	r2, [r3, #28]
 8008f90:	e002      	b.n	8008f98 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d004      	beq.n	8008faa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008fa8:	e00e      	b.n	8008fc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f868 	bl	8009088 <USBH_CDC_TransmitCallback>
      break;
 8008fb8:	e006      	b.n	8008fc8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008fba:	7afb      	ldrb	r3, [r7, #11]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d103      	bne.n	8008fc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008fc8:	bf00      	nop
  }
}
 8008fca:	bf00      	nop
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b086      	sub	sp, #24
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d002      	beq.n	8008ff8 <CDC_ProcessReception+0x26>
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d00e      	beq.n	8009014 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008ff6:	e043      	b.n	8009080 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	6a19      	ldr	r1, [r3, #32]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	8b5a      	ldrh	r2, [r3, #26]
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	7b1b      	ldrb	r3, [r3, #12]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f001 fbff 	bl	800a808 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2204      	movs	r2, #4
 800900e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009012:	e035      	b.n	8009080 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	7b1b      	ldrb	r3, [r3, #12]
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f001 fefe 	bl	800ae1c <USBH_LL_GetURBState>
 8009020:	4603      	mov	r3, r0
 8009022:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009024:	7cfb      	ldrb	r3, [r7, #19]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d129      	bne.n	800907e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	7b1b      	ldrb	r3, [r3, #12]
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 fe61 	bl	800acf8 <USBH_LL_GetLastXferSize>
 8009036:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	429a      	cmp	r2, r3
 8009040:	d016      	beq.n	8009070 <CDC_ProcessReception+0x9e>
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	8b5b      	ldrh	r3, [r3, #26]
 8009046:	461a      	mov	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	4293      	cmp	r3, r2
 800904c:	d910      	bls.n	8009070 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	1ad2      	subs	r2, r2, r3
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	6a1a      	ldr	r2, [r3, #32]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	441a      	add	r2, r3
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2203      	movs	r2, #3
 800906a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800906e:	e006      	b.n	800907e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f80f 	bl	800909c <USBH_CDC_ReceiveCallback>
      break;
 800907e:	bf00      	nop
  }
}
 8009080:	bf00      	nop
 8009082:	3718      	adds	r7, #24
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	4613      	mov	r3, r2
 80090d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80090d8:	2302      	movs	r3, #2
 80090da:	e029      	b.n	8009130 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	79fa      	ldrb	r2, [r7, #7]
 80090e0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 f81f 	bl	8009138 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f001 fd31 	bl	800ab90 <USBH_LL_Init>

  return USBH_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009144:	2300      	movs	r3, #0
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	e009      	b.n	800915e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	33e0      	adds	r3, #224	; 0xe0
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	2200      	movs	r2, #0
 8009156:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3301      	adds	r3, #1
 800915c:	60fb      	str	r3, [r7, #12]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b0f      	cmp	r3, #15
 8009162:	d9f2      	bls.n	800914a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	e009      	b.n	800917e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009174:	2200      	movs	r2, #0
 8009176:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3301      	adds	r3, #1
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009184:	d3f1      	bcc.n	800916a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2240      	movs	r2, #64	; 0x40
 80091aa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d016      	beq.n	8009222 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10e      	bne.n	800921c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009204:	1c59      	adds	r1, r3, #1
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	33de      	adds	r3, #222	; 0xde
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]
 800921a:	e004      	b.n	8009226 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800921c:	2302      	movs	r3, #2
 800921e:	73fb      	strb	r3, [r7, #15]
 8009220:	e001      	b.n	8009226 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009222:	2302      	movs	r3, #2
 8009224:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009226:	7bfb      	ldrb	r3, [r7, #15]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800924a:	78fa      	ldrb	r2, [r7, #3]
 800924c:	429a      	cmp	r2, r3
 800924e:	d204      	bcs.n	800925a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	78fa      	ldrb	r2, [r7, #3]
 8009254:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009258:	e001      	b.n	800925e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800925a:	2302      	movs	r3, #2
 800925c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	4608      	mov	r0, r1
 8009276:	4611      	mov	r1, r2
 8009278:	461a      	mov	r2, r3
 800927a:	4603      	mov	r3, r0
 800927c:	70fb      	strb	r3, [r7, #3]
 800927e:	460b      	mov	r3, r1
 8009280:	70bb      	strb	r3, [r7, #2]
 8009282:	4613      	mov	r3, r2
 8009284:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800928a:	2300      	movs	r3, #0
 800928c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009294:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009296:	e025      	b.n	80092e4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	221a      	movs	r2, #26
 800929c:	fb02 f303 	mul.w	r3, r2, r3
 80092a0:	3308      	adds	r3, #8
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	4413      	add	r3, r2
 80092a6:	3302      	adds	r3, #2
 80092a8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	795b      	ldrb	r3, [r3, #5]
 80092ae:	78fa      	ldrb	r2, [r7, #3]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d002      	beq.n	80092ba <USBH_FindInterface+0x4e>
 80092b4:	78fb      	ldrb	r3, [r7, #3]
 80092b6:	2bff      	cmp	r3, #255	; 0xff
 80092b8:	d111      	bne.n	80092de <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80092be:	78ba      	ldrb	r2, [r7, #2]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d002      	beq.n	80092ca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80092c4:	78bb      	ldrb	r3, [r7, #2]
 80092c6:	2bff      	cmp	r3, #255	; 0xff
 80092c8:	d109      	bne.n	80092de <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80092ce:	787a      	ldrb	r2, [r7, #1]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d002      	beq.n	80092da <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80092d4:	787b      	ldrb	r3, [r7, #1]
 80092d6:	2bff      	cmp	r3, #255	; 0xff
 80092d8:	d101      	bne.n	80092de <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80092da:	7dfb      	ldrb	r3, [r7, #23]
 80092dc:	e006      	b.n	80092ec <USBH_FindInterface+0x80>
    }
    if_ix++;
 80092de:	7dfb      	ldrb	r3, [r7, #23]
 80092e0:	3301      	adds	r3, #1
 80092e2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d9d6      	bls.n	8009298 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80092ea:	23ff      	movs	r3, #255	; 0xff
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	371c      	adds	r7, #28
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f001 fc81 	bl	800ac08 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009306:	2101      	movs	r1, #1
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 fd9a 	bl	800ae42 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af04      	add	r7, sp, #16
 800931e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009320:	2302      	movs	r3, #2
 8009322:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009324:	2300      	movs	r3, #0
 8009326:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b01      	cmp	r3, #1
 8009332:	d102      	bne.n	800933a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2203      	movs	r2, #3
 8009338:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b0b      	cmp	r3, #11
 8009342:	f200 81be 	bhi.w	80096c2 <USBH_Process+0x3aa>
 8009346:	a201      	add	r2, pc, #4	; (adr r2, 800934c <USBH_Process+0x34>)
 8009348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934c:	0800937d 	.word	0x0800937d
 8009350:	080093af 	.word	0x080093af
 8009354:	08009417 	.word	0x08009417
 8009358:	0800965d 	.word	0x0800965d
 800935c:	080096c3 	.word	0x080096c3
 8009360:	080094bb 	.word	0x080094bb
 8009364:	08009603 	.word	0x08009603
 8009368:	080094f1 	.word	0x080094f1
 800936c:	08009511 	.word	0x08009511
 8009370:	08009531 	.word	0x08009531
 8009374:	08009575 	.word	0x08009575
 8009378:	08009645 	.word	0x08009645
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 819e 	beq.w	80096c6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009390:	20c8      	movs	r0, #200	; 0xc8
 8009392:	f001 fd9d 	bl	800aed0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f001 fc93 	bl	800acc2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80093ac:	e18b      	b.n	80096c6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d107      	bne.n	80093c8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2202      	movs	r2, #2
 80093c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80093c6:	e18d      	b.n	80096e4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80093ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093d2:	d914      	bls.n	80093fe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80093da:	3301      	adds	r3, #1
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d903      	bls.n	80093f6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	220d      	movs	r2, #13
 80093f2:	701a      	strb	r2, [r3, #0]
      break;
 80093f4:	e176      	b.n	80096e4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	701a      	strb	r2, [r3, #0]
      break;
 80093fc:	e172      	b.n	80096e4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009404:	f103 020a 	add.w	r2, r3, #10
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800940e:	200a      	movs	r0, #10
 8009410:	f001 fd5e 	bl	800aed0 <USBH_Delay>
      break;
 8009414:	e166      	b.n	80096e4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800941c:	2b00      	cmp	r3, #0
 800941e:	d005      	beq.n	800942c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009426:	2104      	movs	r1, #4
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800942c:	2064      	movs	r0, #100	; 0x64
 800942e:	f001 fd4f 	bl	800aed0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f001 fc1e 	bl	800ac74 <USBH_LL_GetSpeed>
 8009438:	4603      	mov	r3, r0
 800943a:	461a      	mov	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2205      	movs	r2, #5
 8009446:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009448:	2100      	movs	r1, #0
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f001 fa29 	bl	800a8a2 <USBH_AllocPipe>
 8009450:	4603      	mov	r3, r0
 8009452:	461a      	mov	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009458:	2180      	movs	r1, #128	; 0x80
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f001 fa21 	bl	800a8a2 <USBH_AllocPipe>
 8009460:	4603      	mov	r3, r0
 8009462:	461a      	mov	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	7919      	ldrb	r1, [r3, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800947c:	b292      	uxth	r2, r2
 800947e:	9202      	str	r2, [sp, #8]
 8009480:	2200      	movs	r2, #0
 8009482:	9201      	str	r2, [sp, #4]
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	4603      	mov	r3, r0
 8009488:	2280      	movs	r2, #128	; 0x80
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f001 f9da 	bl	800a844 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	7959      	ldrb	r1, [r3, #5]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80094a4:	b292      	uxth	r2, r2
 80094a6:	9202      	str	r2, [sp, #8]
 80094a8:	2200      	movs	r2, #0
 80094aa:	9201      	str	r2, [sp, #4]
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	4603      	mov	r3, r0
 80094b0:	2200      	movs	r2, #0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f001 f9c6 	bl	800a844 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80094b8:	e114      	b.n	80096e4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f918 	bl	80096f0 <USBH_HandleEnum>
 80094c0:	4603      	mov	r3, r0
 80094c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80094c4:	7bbb      	ldrb	r3, [r7, #14]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f040 80fe 	bne.w	80096ca <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d103      	bne.n	80094e8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2208      	movs	r2, #8
 80094e4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80094e6:	e0f0      	b.n	80096ca <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2207      	movs	r2, #7
 80094ec:	701a      	strb	r2, [r3, #0]
      break;
 80094ee:	e0ec      	b.n	80096ca <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 80e9 	beq.w	80096ce <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009502:	2101      	movs	r1, #1
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2208      	movs	r2, #8
 800950c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800950e:	e0de      	b.n	80096ce <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009516:	b29b      	uxth	r3, r3
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fc2c 	bl	8009d78 <USBH_SetCfg>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	f040 80d5 	bne.w	80096d2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2209      	movs	r2, #9
 800952c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800952e:	e0d0      	b.n	80096d2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b00      	cmp	r3, #0
 800953c:	d016      	beq.n	800956c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800953e:	2101      	movs	r1, #1
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fc3c 	bl	8009dbe <USBH_SetFeature>
 8009546:	4603      	mov	r3, r0
 8009548:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800954a:	7bbb      	ldrb	r3, [r7, #14]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	d103      	bne.n	800955a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	220a      	movs	r2, #10
 8009556:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009558:	e0bd      	b.n	80096d6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b03      	cmp	r3, #3
 8009560:	f040 80b9 	bne.w	80096d6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	220a      	movs	r2, #10
 8009568:	701a      	strb	r2, [r3, #0]
      break;
 800956a:	e0b4      	b.n	80096d6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	220a      	movs	r2, #10
 8009570:	701a      	strb	r2, [r3, #0]
      break;
 8009572:	e0b0      	b.n	80096d6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800957a:	2b00      	cmp	r3, #0
 800957c:	f000 80ad 	beq.w	80096da <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]
 800958c:	e016      	b.n	80095bc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800958e:	7bfa      	ldrb	r2, [r7, #15]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	32de      	adds	r2, #222	; 0xde
 8009594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009598:	791a      	ldrb	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d108      	bne.n	80095b6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80095a4:	7bfa      	ldrb	r2, [r7, #15]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	32de      	adds	r2, #222	; 0xde
 80095aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80095b4:	e005      	b.n	80095c2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	3301      	adds	r3, #1
 80095ba:	73fb      	strb	r3, [r7, #15]
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0e5      	beq.n	800958e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d016      	beq.n	80095fa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	4798      	blx	r3
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d109      	bne.n	80095f2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2206      	movs	r2, #6
 80095e2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095ea:	2103      	movs	r1, #3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095f0:	e073      	b.n	80096da <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	220d      	movs	r2, #13
 80095f6:	701a      	strb	r2, [r3, #0]
      break;
 80095f8:	e06f      	b.n	80096da <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	220d      	movs	r2, #13
 80095fe:	701a      	strb	r2, [r3, #0]
      break;
 8009600:	e06b      	b.n	80096da <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009608:	2b00      	cmp	r3, #0
 800960a:	d017      	beq.n	800963c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	4798      	blx	r3
 8009618:	4603      	mov	r3, r0
 800961a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800961c:	7bbb      	ldrb	r3, [r7, #14]
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d103      	bne.n	800962c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	220b      	movs	r2, #11
 8009628:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800962a:	e058      	b.n	80096de <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b02      	cmp	r3, #2
 8009632:	d154      	bne.n	80096de <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	220d      	movs	r2, #13
 8009638:	701a      	strb	r2, [r3, #0]
      break;
 800963a:	e050      	b.n	80096de <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	220d      	movs	r2, #13
 8009640:	701a      	strb	r2, [r3, #0]
      break;
 8009642:	e04c      	b.n	80096de <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800964a:	2b00      	cmp	r3, #0
 800964c:	d049      	beq.n	80096e2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	4798      	blx	r3
      }
      break;
 800965a:	e042      	b.n	80096e2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff fd67 	bl	8009138 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009670:	2b00      	cmp	r3, #0
 8009672:	d009      	beq.n	8009688 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800968e:	2b00      	cmp	r3, #0
 8009690:	d005      	beq.n	800969e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009698:	2105      	movs	r1, #5
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d107      	bne.n	80096ba <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff fe20 	bl	80092f8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096b8:	e014      	b.n	80096e4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 faa4 	bl	800ac08 <USBH_LL_Start>
      break;
 80096c0:	e010      	b.n	80096e4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80096c2:	bf00      	nop
 80096c4:	e00e      	b.n	80096e4 <USBH_Process+0x3cc>
      break;
 80096c6:	bf00      	nop
 80096c8:	e00c      	b.n	80096e4 <USBH_Process+0x3cc>
      break;
 80096ca:	bf00      	nop
 80096cc:	e00a      	b.n	80096e4 <USBH_Process+0x3cc>
    break;
 80096ce:	bf00      	nop
 80096d0:	e008      	b.n	80096e4 <USBH_Process+0x3cc>
      break;
 80096d2:	bf00      	nop
 80096d4:	e006      	b.n	80096e4 <USBH_Process+0x3cc>
      break;
 80096d6:	bf00      	nop
 80096d8:	e004      	b.n	80096e4 <USBH_Process+0x3cc>
      break;
 80096da:	bf00      	nop
 80096dc:	e002      	b.n	80096e4 <USBH_Process+0x3cc>
      break;
 80096de:	bf00      	nop
 80096e0:	e000      	b.n	80096e4 <USBH_Process+0x3cc>
      break;
 80096e2:	bf00      	nop
  }
  return USBH_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop

080096f0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af04      	add	r7, sp, #16
 80096f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80096f8:	2301      	movs	r3, #1
 80096fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80096fc:	2301      	movs	r3, #1
 80096fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	785b      	ldrb	r3, [r3, #1]
 8009704:	2b07      	cmp	r3, #7
 8009706:	f200 81c1 	bhi.w	8009a8c <USBH_HandleEnum+0x39c>
 800970a:	a201      	add	r2, pc, #4	; (adr r2, 8009710 <USBH_HandleEnum+0x20>)
 800970c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009710:	08009731 	.word	0x08009731
 8009714:	080097ef 	.word	0x080097ef
 8009718:	08009859 	.word	0x08009859
 800971c:	080098e7 	.word	0x080098e7
 8009720:	08009951 	.word	0x08009951
 8009724:	080099c1 	.word	0x080099c1
 8009728:	08009a07 	.word	0x08009a07
 800972c:	08009a4d 	.word	0x08009a4d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009730:	2108      	movs	r1, #8
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fa50 	bl	8009bd8 <USBH_Get_DevDesc>
 8009738:	4603      	mov	r3, r0
 800973a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d130      	bne.n	80097a4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7919      	ldrb	r1, [r3, #4]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009766:	b292      	uxth	r2, r2
 8009768:	9202      	str	r2, [sp, #8]
 800976a:	2200      	movs	r2, #0
 800976c:	9201      	str	r2, [sp, #4]
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	4603      	mov	r3, r0
 8009772:	2280      	movs	r2, #128	; 0x80
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f001 f865 	bl	800a844 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	7959      	ldrb	r1, [r3, #5]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800978e:	b292      	uxth	r2, r2
 8009790:	9202      	str	r2, [sp, #8]
 8009792:	2200      	movs	r2, #0
 8009794:	9201      	str	r2, [sp, #4]
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	4603      	mov	r3, r0
 800979a:	2200      	movs	r2, #0
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f001 f851 	bl	800a844 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80097a2:	e175      	b.n	8009a90 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	f040 8172 	bne.w	8009a90 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097b2:	3301      	adds	r3, #1
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	d903      	bls.n	80097ce <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	220d      	movs	r2, #13
 80097ca:	701a      	strb	r2, [r3, #0]
      break;
 80097cc:	e160      	b.n	8009a90 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	795b      	ldrb	r3, [r3, #5]
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f001 f885 	bl	800a8e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	791b      	ldrb	r3, [r3, #4]
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f001 f87f 	bl	800a8e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	701a      	strb	r2, [r3, #0]
      break;
 80097ec:	e150      	b.n	8009a90 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80097ee:	2112      	movs	r1, #18
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f9f1 	bl	8009bd8 <USBH_Get_DevDesc>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d103      	bne.n	8009808 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009806:	e145      	b.n	8009a94 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009808:	7bbb      	ldrb	r3, [r7, #14]
 800980a:	2b03      	cmp	r3, #3
 800980c:	f040 8142 	bne.w	8009a94 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009816:	3301      	adds	r3, #1
 8009818:	b2da      	uxtb	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009826:	2b03      	cmp	r3, #3
 8009828:	d903      	bls.n	8009832 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	220d      	movs	r2, #13
 800982e:	701a      	strb	r2, [r3, #0]
      break;
 8009830:	e130      	b.n	8009a94 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	795b      	ldrb	r3, [r3, #5]
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 f853 	bl	800a8e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	791b      	ldrb	r3, [r3, #4]
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f001 f84d 	bl	800a8e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	701a      	strb	r2, [r3, #0]
      break;
 8009856:	e11d      	b.n	8009a94 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009858:	2101      	movs	r1, #1
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fa68 	bl	8009d30 <USBH_SetAddress>
 8009860:	4603      	mov	r3, r0
 8009862:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d132      	bne.n	80098d0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800986a:	2002      	movs	r0, #2
 800986c:	f001 fb30 	bl	800aed0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2203      	movs	r2, #3
 800987c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7919      	ldrb	r1, [r3, #4]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009892:	b292      	uxth	r2, r2
 8009894:	9202      	str	r2, [sp, #8]
 8009896:	2200      	movs	r2, #0
 8009898:	9201      	str	r2, [sp, #4]
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	4603      	mov	r3, r0
 800989e:	2280      	movs	r2, #128	; 0x80
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 ffcf 	bl	800a844 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	7959      	ldrb	r1, [r3, #5]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80098ba:	b292      	uxth	r2, r2
 80098bc:	9202      	str	r2, [sp, #8]
 80098be:	2200      	movs	r2, #0
 80098c0:	9201      	str	r2, [sp, #4]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	4603      	mov	r3, r0
 80098c6:	2200      	movs	r2, #0
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 ffbb 	bl	800a844 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80098ce:	e0e3      	b.n	8009a98 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	2b03      	cmp	r3, #3
 80098d4:	f040 80e0 	bne.w	8009a98 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	220d      	movs	r2, #13
 80098dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	705a      	strb	r2, [r3, #1]
      break;
 80098e4:	e0d8      	b.n	8009a98 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80098e6:	2109      	movs	r1, #9
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f99d 	bl	8009c28 <USBH_Get_CfgDesc>
 80098ee:	4603      	mov	r3, r0
 80098f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d103      	bne.n	8009900 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2204      	movs	r2, #4
 80098fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098fe:	e0cd      	b.n	8009a9c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	2b03      	cmp	r3, #3
 8009904:	f040 80ca 	bne.w	8009a9c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800990e:	3301      	adds	r3, #1
 8009910:	b2da      	uxtb	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800991e:	2b03      	cmp	r3, #3
 8009920:	d903      	bls.n	800992a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	220d      	movs	r2, #13
 8009926:	701a      	strb	r2, [r3, #0]
      break;
 8009928:	e0b8      	b.n	8009a9c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	795b      	ldrb	r3, [r3, #5]
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 ffd7 	bl	800a8e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	791b      	ldrb	r3, [r3, #4]
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 ffd1 	bl	800a8e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	701a      	strb	r2, [r3, #0]
      break;
 800994e:	e0a5      	b.n	8009a9c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f965 	bl	8009c28 <USBH_Get_CfgDesc>
 800995e:	4603      	mov	r3, r0
 8009960:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009962:	7bbb      	ldrb	r3, [r7, #14]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d103      	bne.n	8009970 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2205      	movs	r2, #5
 800996c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800996e:	e097      	b.n	8009aa0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	2b03      	cmp	r3, #3
 8009974:	f040 8094 	bne.w	8009aa0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800997e:	3301      	adds	r3, #1
 8009980:	b2da      	uxtb	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800998e:	2b03      	cmp	r3, #3
 8009990:	d903      	bls.n	800999a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	220d      	movs	r2, #13
 8009996:	701a      	strb	r2, [r3, #0]
      break;
 8009998:	e082      	b.n	8009aa0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	795b      	ldrb	r3, [r3, #5]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 ff9f 	bl	800a8e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	791b      	ldrb	r3, [r3, #4]
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 ff99 	bl	800a8e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	701a      	strb	r2, [r3, #0]
      break;
 80099be:	e06f      	b.n	8009aa0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d019      	beq.n	80099fe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80099d6:	23ff      	movs	r3, #255	; 0xff
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f949 	bl	8009c70 <USBH_Get_StringDesc>
 80099de:	4603      	mov	r3, r0
 80099e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d103      	bne.n	80099f0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2206      	movs	r2, #6
 80099ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80099ee:	e059      	b.n	8009aa4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d156      	bne.n	8009aa4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2206      	movs	r2, #6
 80099fa:	705a      	strb	r2, [r3, #1]
      break;
 80099fc:	e052      	b.n	8009aa4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2206      	movs	r2, #6
 8009a02:	705a      	strb	r2, [r3, #1]
      break;
 8009a04:	e04e      	b.n	8009aa4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d019      	beq.n	8009a44 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009a1c:	23ff      	movs	r3, #255	; 0xff
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f926 	bl	8009c70 <USBH_Get_StringDesc>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d103      	bne.n	8009a36 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2207      	movs	r2, #7
 8009a32:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a34:	e038      	b.n	8009aa8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	2b03      	cmp	r3, #3
 8009a3a:	d135      	bne.n	8009aa8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2207      	movs	r2, #7
 8009a40:	705a      	strb	r2, [r3, #1]
      break;
 8009a42:	e031      	b.n	8009aa8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2207      	movs	r2, #7
 8009a48:	705a      	strb	r2, [r3, #1]
      break;
 8009a4a:	e02d      	b.n	8009aa8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d017      	beq.n	8009a86 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009a62:	23ff      	movs	r3, #255	; 0xff
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f903 	bl	8009c70 <USBH_Get_StringDesc>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d102      	bne.n	8009a7a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009a78:	e018      	b.n	8009aac <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a7a:	7bbb      	ldrb	r3, [r7, #14]
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	d115      	bne.n	8009aac <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]
      break;
 8009a84:	e012      	b.n	8009aac <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73fb      	strb	r3, [r7, #15]
      break;
 8009a8a:	e00f      	b.n	8009aac <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009a8c:	bf00      	nop
 8009a8e:	e00e      	b.n	8009aae <USBH_HandleEnum+0x3be>
      break;
 8009a90:	bf00      	nop
 8009a92:	e00c      	b.n	8009aae <USBH_HandleEnum+0x3be>
      break;
 8009a94:	bf00      	nop
 8009a96:	e00a      	b.n	8009aae <USBH_HandleEnum+0x3be>
      break;
 8009a98:	bf00      	nop
 8009a9a:	e008      	b.n	8009aae <USBH_HandleEnum+0x3be>
      break;
 8009a9c:	bf00      	nop
 8009a9e:	e006      	b.n	8009aae <USBH_HandleEnum+0x3be>
      break;
 8009aa0:	bf00      	nop
 8009aa2:	e004      	b.n	8009aae <USBH_HandleEnum+0x3be>
      break;
 8009aa4:	bf00      	nop
 8009aa6:	e002      	b.n	8009aae <USBH_HandleEnum+0x3be>
      break;
 8009aa8:	bf00      	nop
 8009aaa:	e000      	b.n	8009aae <USBH_HandleEnum+0x3be>
      break;
 8009aac:	bf00      	nop
  }
  return Status;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009aca:	bf00      	nop
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b082      	sub	sp, #8
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f804 	bl	8009afa <USBH_HandleSof>
}
 8009af2:	bf00      	nop
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b082      	sub	sp, #8
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b0b      	cmp	r3, #11
 8009b0a:	d10a      	bne.n	8009b22 <USBH_HandleSof+0x28>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d005      	beq.n	8009b22 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	4798      	blx	r3
  }
}
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009b3a:	bf00      	nop
}
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b083      	sub	sp, #12
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009b56:	bf00      	nop
}
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009b62:	b480      	push	{r7}
 8009b64:	b083      	sub	sp, #12
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 f844 	bl	800ac3e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	791b      	ldrb	r3, [r3, #4]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fe91 	bl	800a8e4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	795b      	ldrb	r3, [r3, #5]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fe8b 	bl	800a8e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af02      	add	r7, sp, #8
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009bea:	78fb      	ldrb	r3, [r7, #3]
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f864 	bl	8009cc6 <USBH_GetDescriptor>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10a      	bne.n	8009c1e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009c14:	78fa      	ldrb	r2, [r7, #3]
 8009c16:	b292      	uxth	r2, r2
 8009c18:	4619      	mov	r1, r3
 8009c1a:	f000 f918 	bl	8009e4e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af02      	add	r7, sp, #8
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	331c      	adds	r3, #28
 8009c38:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009c3a:	887b      	ldrh	r3, [r7, #2]
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c44:	2100      	movs	r1, #0
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f83d 	bl	8009cc6 <USBH_GetDescriptor>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d107      	bne.n	8009c66 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009c56:	887b      	ldrh	r3, [r7, #2]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f987 	bl	8009f70 <USBH_ParseCfgDesc>
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b088      	sub	sp, #32
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	607a      	str	r2, [r7, #4]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	72fb      	strb	r3, [r7, #11]
 8009c80:	4613      	mov	r3, r2
 8009c82:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009c84:	7afb      	ldrb	r3, [r7, #11]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009c8c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009c94:	893b      	ldrh	r3, [r7, #8]
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f000 f812 	bl	8009cc6 <USBH_GetDescriptor>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d107      	bne.n	8009cbc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009cb2:	893a      	ldrh	r2, [r7, #8]
 8009cb4:	6879      	ldr	r1, [r7, #4]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fb24 	bl	800a304 <USBH_ParseStringDesc>
  }

  return status;
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	60f8      	str	r0, [r7, #12]
 8009cce:	607b      	str	r3, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	72fb      	strb	r3, [r7, #11]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	789b      	ldrb	r3, [r3, #2]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d11c      	bne.n	8009d1a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009ce0:	7afb      	ldrb	r3, [r7, #11]
 8009ce2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2206      	movs	r2, #6
 8009cf0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	893a      	ldrh	r2, [r7, #8]
 8009cf6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009cf8:	893b      	ldrh	r3, [r7, #8]
 8009cfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d02:	d104      	bne.n	8009d0e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f240 4209 	movw	r2, #1033	; 0x409
 8009d0a:	829a      	strh	r2, [r3, #20]
 8009d0c:	e002      	b.n	8009d14 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8b3a      	ldrh	r2, [r7, #24]
 8009d18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009d1a:	8b3b      	ldrh	r3, [r7, #24]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 fb3d 	bl	800a3a0 <USBH_CtlReq>
 8009d26:	4603      	mov	r3, r0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	789b      	ldrb	r3, [r3, #2]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d10f      	bne.n	8009d64 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2205      	movs	r2, #5
 8009d4e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009d50:	78fb      	ldrb	r3, [r7, #3]
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d64:	2200      	movs	r2, #0
 8009d66:	2100      	movs	r1, #0
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fb19 	bl	800a3a0 <USBH_CtlReq>
 8009d6e:	4603      	mov	r3, r0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	460b      	mov	r3, r1
 8009d82:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	789b      	ldrb	r3, [r3, #2]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d10e      	bne.n	8009daa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2209      	movs	r2, #9
 8009d96:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	887a      	ldrh	r2, [r7, #2]
 8009d9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009daa:	2200      	movs	r2, #0
 8009dac:	2100      	movs	r1, #0
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 faf6 	bl	800a3a0 <USBH_CtlReq>
 8009db4:	4603      	mov	r3, r0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	789b      	ldrb	r3, [r3, #2]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d10f      	bne.n	8009df2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2203      	movs	r2, #3
 8009ddc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009dde:	78fb      	ldrb	r3, [r7, #3]
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009df2:	2200      	movs	r2, #0
 8009df4:	2100      	movs	r1, #0
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fad2 	bl	800a3a0 <USBH_CtlReq>
 8009dfc:	4603      	mov	r3, r0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	789b      	ldrb	r3, [r3, #2]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d10f      	bne.n	8009e3a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009e2c:	78fb      	ldrb	r3, [r7, #3]
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 faae 	bl	800a3a0 <USBH_CtlReq>
 8009e44:	4603      	mov	r3, r0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b085      	sub	sp, #20
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	60f8      	str	r0, [r7, #12]
 8009e56:	60b9      	str	r1, [r7, #8]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	781a      	ldrb	r2, [r3, #0]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	785a      	ldrb	r2, [r3, #1]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	3302      	adds	r3, #2
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	3303      	adds	r3, #3
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	4313      	orrs	r3, r2
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	791a      	ldrb	r2, [r3, #4]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	795a      	ldrb	r2, [r3, #5]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	799a      	ldrb	r2, [r3, #6]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	79da      	ldrb	r2, [r3, #7]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	79db      	ldrb	r3, [r3, #7]
 8009eac:	2b20      	cmp	r3, #32
 8009eae:	dc11      	bgt.n	8009ed4 <USBH_ParseDevDesc+0x86>
 8009eb0:	2b08      	cmp	r3, #8
 8009eb2:	db16      	blt.n	8009ee2 <USBH_ParseDevDesc+0x94>
 8009eb4:	3b08      	subs	r3, #8
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ebc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	bf14      	ite	ne
 8009ec8:	2301      	movne	r3, #1
 8009eca:	2300      	moveq	r3, #0
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d102      	bne.n	8009ed8 <USBH_ParseDevDesc+0x8a>
 8009ed2:	e006      	b.n	8009ee2 <USBH_ParseDevDesc+0x94>
 8009ed4:	2b40      	cmp	r3, #64	; 0x40
 8009ed6:	d104      	bne.n	8009ee2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	79da      	ldrb	r2, [r3, #7]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	71da      	strb	r2, [r3, #7]
      break;
 8009ee0:	e003      	b.n	8009eea <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2240      	movs	r2, #64	; 0x40
 8009ee6:	71da      	strb	r2, [r3, #7]
      break;
 8009ee8:	bf00      	nop
  }

  if (length > 8U)
 8009eea:	88fb      	ldrh	r3, [r7, #6]
 8009eec:	2b08      	cmp	r3, #8
 8009eee:	d939      	bls.n	8009f64 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	3309      	adds	r3, #9
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	021b      	lsls	r3, r3, #8
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	4313      	orrs	r3, r2
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	330a      	adds	r3, #10
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	330b      	adds	r3, #11
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	4313      	orrs	r3, r2
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	330c      	adds	r3, #12
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	330d      	adds	r3, #13
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	021b      	lsls	r3, r3, #8
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	7b9a      	ldrb	r2, [r3, #14]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	7bda      	ldrb	r2, [r3, #15]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	7c1a      	ldrb	r2, [r3, #16]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	7c5a      	ldrb	r2, [r3, #17]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	745a      	strb	r2, [r3, #17]
  }
}
 8009f64:	bf00      	nop
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b08c      	sub	sp, #48	; 0x30
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009f84:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009f90:	2300      	movs	r3, #0
 8009f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009f96:	2300      	movs	r3, #0
 8009f98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	781a      	ldrb	r2, [r3, #0]
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	785a      	ldrb	r2, [r3, #1]
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	3302      	adds	r3, #2
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	3303      	adds	r3, #3
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	021b      	lsls	r3, r3, #8
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fcc:	bf28      	it	cs
 8009fce:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	791a      	ldrb	r2, [r3, #4]
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	795a      	ldrb	r2, [r3, #5]
 8009fe4:	6a3b      	ldr	r3, [r7, #32]
 8009fe6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	799a      	ldrb	r2, [r3, #6]
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	79da      	ldrb	r2, [r3, #7]
 8009ff4:	6a3b      	ldr	r3, [r7, #32]
 8009ff6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	7a1a      	ldrb	r2, [r3, #8]
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2b09      	cmp	r3, #9
 800a006:	d002      	beq.n	800a00e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	2209      	movs	r2, #9
 800a00c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a00e:	88fb      	ldrh	r3, [r7, #6]
 800a010:	2b09      	cmp	r3, #9
 800a012:	f240 809d 	bls.w	800a150 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a016:	2309      	movs	r3, #9
 800a018:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a01e:	e081      	b.n	800a124 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a020:	f107 0316 	add.w	r3, r7, #22
 800a024:	4619      	mov	r1, r3
 800a026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a028:	f000 f99f 	bl	800a36a <USBH_GetNextDesc>
 800a02c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a030:	785b      	ldrb	r3, [r3, #1]
 800a032:	2b04      	cmp	r3, #4
 800a034:	d176      	bne.n	800a124 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	2b09      	cmp	r3, #9
 800a03c:	d002      	beq.n	800a044 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a040:	2209      	movs	r2, #9
 800a042:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a048:	221a      	movs	r2, #26
 800a04a:	fb02 f303 	mul.w	r3, r2, r3
 800a04e:	3308      	adds	r3, #8
 800a050:	6a3a      	ldr	r2, [r7, #32]
 800a052:	4413      	add	r3, r2
 800a054:	3302      	adds	r3, #2
 800a056:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a05a:	69f8      	ldr	r0, [r7, #28]
 800a05c:	f000 f87e 	bl	800a15c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a066:	2300      	movs	r3, #0
 800a068:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a06a:	e043      	b.n	800a0f4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a06c:	f107 0316 	add.w	r3, r7, #22
 800a070:	4619      	mov	r1, r3
 800a072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a074:	f000 f979 	bl	800a36a <USBH_GetNextDesc>
 800a078:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	785b      	ldrb	r3, [r3, #1]
 800a07e:	2b05      	cmp	r3, #5
 800a080:	d138      	bne.n	800a0f4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	795b      	ldrb	r3, [r3, #5]
 800a086:	2b01      	cmp	r3, #1
 800a088:	d10f      	bne.n	800a0aa <USBH_ParseCfgDesc+0x13a>
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	799b      	ldrb	r3, [r3, #6]
 800a08e:	2b02      	cmp	r3, #2
 800a090:	d10b      	bne.n	800a0aa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	79db      	ldrb	r3, [r3, #7]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10f      	bne.n	800a0ba <USBH_ParseCfgDesc+0x14a>
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b09      	cmp	r3, #9
 800a0a0:	d00b      	beq.n	800a0ba <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	2209      	movs	r2, #9
 800a0a6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a0a8:	e007      	b.n	800a0ba <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	2b07      	cmp	r3, #7
 800a0b0:	d004      	beq.n	800a0bc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	2207      	movs	r2, #7
 800a0b6:	701a      	strb	r2, [r3, #0]
 800a0b8:	e000      	b.n	800a0bc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a0ba:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a0c4:	3201      	adds	r2, #1
 800a0c6:	00d2      	lsls	r2, r2, #3
 800a0c8:	211a      	movs	r1, #26
 800a0ca:	fb01 f303 	mul.w	r3, r1, r3
 800a0ce:	4413      	add	r3, r2
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	6a3a      	ldr	r2, [r7, #32]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a0da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0dc:	69b9      	ldr	r1, [r7, #24]
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f000 f86b 	bl	800a1ba <USBH_ParseEPDesc>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a0ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	791b      	ldrb	r3, [r3, #4]
 800a0f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d204      	bcs.n	800a10a <USBH_ParseCfgDesc+0x19a>
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	885a      	ldrh	r2, [r3, #2]
 800a104:	8afb      	ldrh	r3, [r7, #22]
 800a106:	429a      	cmp	r2, r3
 800a108:	d8b0      	bhi.n	800a06c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	791b      	ldrb	r3, [r3, #4]
 800a10e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a112:	429a      	cmp	r2, r3
 800a114:	d201      	bcs.n	800a11a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a116:	2303      	movs	r3, #3
 800a118:	e01c      	b.n	800a154 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a11a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a11e:	3301      	adds	r3, #1
 800a120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d805      	bhi.n	800a138 <USBH_ParseCfgDesc+0x1c8>
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	885a      	ldrh	r2, [r3, #2]
 800a130:	8afb      	ldrh	r3, [r7, #22]
 800a132:	429a      	cmp	r2, r3
 800a134:	f63f af74 	bhi.w	800a020 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	791b      	ldrb	r3, [r3, #4]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	bf28      	it	cs
 800a140:	2302      	movcs	r3, #2
 800a142:	b2db      	uxtb	r3, r3
 800a144:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a148:	429a      	cmp	r2, r3
 800a14a:	d201      	bcs.n	800a150 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a14c:	2303      	movs	r3, #3
 800a14e:	e001      	b.n	800a154 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a154:	4618      	mov	r0, r3
 800a156:	3730      	adds	r7, #48	; 0x30
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	781a      	ldrb	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	785a      	ldrb	r2, [r3, #1]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	789a      	ldrb	r2, [r3, #2]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	78da      	ldrb	r2, [r3, #3]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	791a      	ldrb	r2, [r3, #4]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	795a      	ldrb	r2, [r3, #5]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	799a      	ldrb	r2, [r3, #6]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	79da      	ldrb	r2, [r3, #7]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	7a1a      	ldrb	r2, [r3, #8]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	721a      	strb	r2, [r3, #8]
}
 800a1ae:	bf00      	nop
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b087      	sub	sp, #28
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	781a      	ldrb	r2, [r3, #0]
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	785a      	ldrb	r2, [r3, #1]
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	789a      	ldrb	r2, [r3, #2]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	78da      	ldrb	r2, [r3, #3]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	3305      	adds	r3, #5
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	021b      	lsls	r3, r3, #8
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	4313      	orrs	r3, r2
 800a200:	b29a      	uxth	r2, r3
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	799a      	ldrb	r2, [r3, #6]
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	889b      	ldrh	r3, [r3, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d102      	bne.n	800a21c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a216:	2303      	movs	r3, #3
 800a218:	75fb      	strb	r3, [r7, #23]
 800a21a:	e033      	b.n	800a284 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	889b      	ldrh	r3, [r3, #4]
 800a220:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a224:	f023 0307 	bic.w	r3, r3, #7
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	889b      	ldrh	r3, [r3, #4]
 800a232:	b21a      	sxth	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3304      	adds	r3, #4
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	b299      	uxth	r1, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	3305      	adds	r3, #5
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	b29b      	uxth	r3, r3
 800a244:	021b      	lsls	r3, r3, #8
 800a246:	b29b      	uxth	r3, r3
 800a248:	430b      	orrs	r3, r1
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a250:	2b00      	cmp	r3, #0
 800a252:	d110      	bne.n	800a276 <USBH_ParseEPDesc+0xbc>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3304      	adds	r3, #4
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	b299      	uxth	r1, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3305      	adds	r3, #5
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	b29b      	uxth	r3, r3
 800a264:	021b      	lsls	r3, r3, #8
 800a266:	b29b      	uxth	r3, r3
 800a268:	430b      	orrs	r3, r1
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	b21b      	sxth	r3, r3
 800a26e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a272:	b21b      	sxth	r3, r3
 800a274:	e001      	b.n	800a27a <USBH_ParseEPDesc+0xc0>
 800a276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a27a:	4313      	orrs	r3, r2
 800a27c:	b21b      	sxth	r3, r3
 800a27e:	b29a      	uxth	r2, r3
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d116      	bne.n	800a2bc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	78db      	ldrb	r3, [r3, #3]
 800a292:	f003 0303 	and.w	r3, r3, #3
 800a296:	2b01      	cmp	r3, #1
 800a298:	d005      	beq.n	800a2a6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	78db      	ldrb	r3, [r3, #3]
 800a29e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d127      	bne.n	800a2f6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	799b      	ldrb	r3, [r3, #6]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <USBH_ParseEPDesc+0xfc>
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	799b      	ldrb	r3, [r3, #6]
 800a2b2:	2b10      	cmp	r3, #16
 800a2b4:	d91f      	bls.n	800a2f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	75fb      	strb	r3, [r7, #23]
 800a2ba:	e01c      	b.n	800a2f6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	78db      	ldrb	r3, [r3, #3]
 800a2c0:	f003 0303 	and.w	r3, r3, #3
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d10a      	bne.n	800a2de <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	799b      	ldrb	r3, [r3, #6]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <USBH_ParseEPDesc+0x11e>
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	799b      	ldrb	r3, [r3, #6]
 800a2d4:	2b10      	cmp	r3, #16
 800a2d6:	d90e      	bls.n	800a2f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	75fb      	strb	r3, [r7, #23]
 800a2dc:	e00b      	b.n	800a2f6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	78db      	ldrb	r3, [r3, #3]
 800a2e2:	f003 0303 	and.w	r3, r3, #3
 800a2e6:	2b03      	cmp	r3, #3
 800a2e8:	d105      	bne.n	800a2f6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	799b      	ldrb	r3, [r3, #6]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	371c      	adds	r7, #28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	4613      	mov	r3, r2
 800a310:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3301      	adds	r3, #1
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2b03      	cmp	r3, #3
 800a31a:	d120      	bne.n	800a35e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	1e9a      	subs	r2, r3, #2
 800a322:	88fb      	ldrh	r3, [r7, #6]
 800a324:	4293      	cmp	r3, r2
 800a326:	bf28      	it	cs
 800a328:	4613      	movcs	r3, r2
 800a32a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3302      	adds	r3, #2
 800a330:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a332:	2300      	movs	r3, #0
 800a334:	82fb      	strh	r3, [r7, #22]
 800a336:	e00b      	b.n	800a350 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a338:	8afb      	ldrh	r3, [r7, #22]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	4413      	add	r3, r2
 800a33e:	781a      	ldrb	r2, [r3, #0]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	3301      	adds	r3, #1
 800a348:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a34a:	8afb      	ldrh	r3, [r7, #22]
 800a34c:	3302      	adds	r3, #2
 800a34e:	82fb      	strh	r3, [r7, #22]
 800a350:	8afa      	ldrh	r2, [r7, #22]
 800a352:	8abb      	ldrh	r3, [r7, #20]
 800a354:	429a      	cmp	r2, r3
 800a356:	d3ef      	bcc.n	800a338 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2200      	movs	r2, #0
 800a35c:	701a      	strb	r2, [r3, #0]
  }
}
 800a35e:	bf00      	nop
 800a360:	371c      	adds	r7, #28
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b085      	sub	sp, #20
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	881a      	ldrh	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	4413      	add	r3, r2
 800a380:	b29a      	uxth	r2, r3
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4413      	add	r3, r2
 800a390:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a392:	68fb      	ldr	r3, [r7, #12]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	789b      	ldrb	r3, [r3, #2]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d002      	beq.n	800a3c0 <USBH_CtlReq+0x20>
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d00f      	beq.n	800a3de <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a3be:	e027      	b.n	800a410 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	88fa      	ldrh	r2, [r7, #6]
 800a3ca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	75fb      	strb	r3, [r7, #23]
      break;
 800a3dc:	e018      	b.n	800a410 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f000 f81c 	bl	800a41c <USBH_HandleControl>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <USBH_CtlReq+0x54>
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
 800a3f0:	2b03      	cmp	r3, #3
 800a3f2:	d106      	bne.n	800a402 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	761a      	strb	r2, [r3, #24]
      break;
 800a400:	e005      	b.n	800a40e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a402:	7dfb      	ldrb	r3, [r7, #23]
 800a404:	2b02      	cmp	r3, #2
 800a406:	d102      	bne.n	800a40e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2201      	movs	r2, #1
 800a40c:	709a      	strb	r2, [r3, #2]
      break;
 800a40e:	bf00      	nop
  }
  return status;
 800a410:	7dfb      	ldrb	r3, [r7, #23]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
	...

0800a41c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af02      	add	r7, sp, #8
 800a422:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a424:	2301      	movs	r3, #1
 800a426:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a428:	2300      	movs	r3, #0
 800a42a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	7e1b      	ldrb	r3, [r3, #24]
 800a430:	3b01      	subs	r3, #1
 800a432:	2b0a      	cmp	r3, #10
 800a434:	f200 8156 	bhi.w	800a6e4 <USBH_HandleControl+0x2c8>
 800a438:	a201      	add	r2, pc, #4	; (adr r2, 800a440 <USBH_HandleControl+0x24>)
 800a43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43e:	bf00      	nop
 800a440:	0800a46d 	.word	0x0800a46d
 800a444:	0800a487 	.word	0x0800a487
 800a448:	0800a4f1 	.word	0x0800a4f1
 800a44c:	0800a517 	.word	0x0800a517
 800a450:	0800a54f 	.word	0x0800a54f
 800a454:	0800a579 	.word	0x0800a579
 800a458:	0800a5cb 	.word	0x0800a5cb
 800a45c:	0800a5ed 	.word	0x0800a5ed
 800a460:	0800a629 	.word	0x0800a629
 800a464:	0800a64f 	.word	0x0800a64f
 800a468:	0800a68d 	.word	0x0800a68d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f103 0110 	add.w	r1, r3, #16
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	795b      	ldrb	r3, [r3, #5]
 800a476:	461a      	mov	r2, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f943 	bl	800a704 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2202      	movs	r2, #2
 800a482:	761a      	strb	r2, [r3, #24]
      break;
 800a484:	e139      	b.n	800a6fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	795b      	ldrb	r3, [r3, #5]
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 fcc5 	bl	800ae1c <USBH_LL_GetURBState>
 800a492:	4603      	mov	r3, r0
 800a494:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a496:	7bbb      	ldrb	r3, [r7, #14]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d11e      	bne.n	800a4da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	7c1b      	ldrb	r3, [r3, #16]
 800a4a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	8adb      	ldrh	r3, [r3, #22]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a4ae:	7b7b      	ldrb	r3, [r7, #13]
 800a4b0:	2b80      	cmp	r3, #128	; 0x80
 800a4b2:	d103      	bne.n	800a4bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2203      	movs	r2, #3
 800a4b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4ba:	e115      	b.n	800a6e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2205      	movs	r2, #5
 800a4c0:	761a      	strb	r2, [r3, #24]
      break;
 800a4c2:	e111      	b.n	800a6e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a4c4:	7b7b      	ldrb	r3, [r7, #13]
 800a4c6:	2b80      	cmp	r3, #128	; 0x80
 800a4c8:	d103      	bne.n	800a4d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2209      	movs	r2, #9
 800a4ce:	761a      	strb	r2, [r3, #24]
      break;
 800a4d0:	e10a      	b.n	800a6e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2207      	movs	r2, #7
 800a4d6:	761a      	strb	r2, [r3, #24]
      break;
 800a4d8:	e106      	b.n	800a6e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a4da:	7bbb      	ldrb	r3, [r7, #14]
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	d003      	beq.n	800a4e8 <USBH_HandleControl+0xcc>
 800a4e0:	7bbb      	ldrb	r3, [r7, #14]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	f040 8100 	bne.w	800a6e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	220b      	movs	r2, #11
 800a4ec:	761a      	strb	r2, [r3, #24]
      break;
 800a4ee:	e0fb      	b.n	800a6e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6899      	ldr	r1, [r3, #8]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	899a      	ldrh	r2, [r3, #12]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	791b      	ldrb	r3, [r3, #4]
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f93a 	bl	800a782 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2204      	movs	r2, #4
 800a512:	761a      	strb	r2, [r3, #24]
      break;
 800a514:	e0f1      	b.n	800a6fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	791b      	ldrb	r3, [r3, #4]
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fc7d 	bl	800ae1c <USBH_LL_GetURBState>
 800a522:	4603      	mov	r3, r0
 800a524:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a526:	7bbb      	ldrb	r3, [r7, #14]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d102      	bne.n	800a532 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2209      	movs	r2, #9
 800a530:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a532:	7bbb      	ldrb	r3, [r7, #14]
 800a534:	2b05      	cmp	r3, #5
 800a536:	d102      	bne.n	800a53e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a538:	2303      	movs	r3, #3
 800a53a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a53c:	e0d6      	b.n	800a6ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a53e:	7bbb      	ldrb	r3, [r7, #14]
 800a540:	2b04      	cmp	r3, #4
 800a542:	f040 80d3 	bne.w	800a6ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	220b      	movs	r2, #11
 800a54a:	761a      	strb	r2, [r3, #24]
      break;
 800a54c:	e0ce      	b.n	800a6ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6899      	ldr	r1, [r3, #8]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	899a      	ldrh	r2, [r3, #12]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	795b      	ldrb	r3, [r3, #5]
 800a55a:	2001      	movs	r0, #1
 800a55c:	9000      	str	r0, [sp, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f8ea 	bl	800a738 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2206      	movs	r2, #6
 800a574:	761a      	strb	r2, [r3, #24]
      break;
 800a576:	e0c0      	b.n	800a6fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	795b      	ldrb	r3, [r3, #5]
 800a57c:	4619      	mov	r1, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fc4c 	bl	800ae1c <USBH_LL_GetURBState>
 800a584:	4603      	mov	r3, r0
 800a586:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a588:	7bbb      	ldrb	r3, [r7, #14]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d103      	bne.n	800a596 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2207      	movs	r2, #7
 800a592:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a594:	e0ac      	b.n	800a6f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	2b05      	cmp	r3, #5
 800a59a:	d105      	bne.n	800a5a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	220c      	movs	r2, #12
 800a5a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5a6:	e0a3      	b.n	800a6f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d103      	bne.n	800a5b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2205      	movs	r2, #5
 800a5b2:	761a      	strb	r2, [r3, #24]
      break;
 800a5b4:	e09c      	b.n	800a6f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a5b6:	7bbb      	ldrb	r3, [r7, #14]
 800a5b8:	2b04      	cmp	r3, #4
 800a5ba:	f040 8099 	bne.w	800a6f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	220b      	movs	r2, #11
 800a5c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c8:	e092      	b.n	800a6f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	791b      	ldrb	r3, [r3, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f8d5 	bl	800a782 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2208      	movs	r2, #8
 800a5e8:	761a      	strb	r2, [r3, #24]

      break;
 800a5ea:	e086      	b.n	800a6fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	791b      	ldrb	r3, [r3, #4]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fc12 	bl	800ae1c <USBH_LL_GetURBState>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a5fc:	7bbb      	ldrb	r3, [r7, #14]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d105      	bne.n	800a60e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	220d      	movs	r2, #13
 800a606:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a60c:	e072      	b.n	800a6f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a60e:	7bbb      	ldrb	r3, [r7, #14]
 800a610:	2b04      	cmp	r3, #4
 800a612:	d103      	bne.n	800a61c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	220b      	movs	r2, #11
 800a618:	761a      	strb	r2, [r3, #24]
      break;
 800a61a:	e06b      	b.n	800a6f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a61c:	7bbb      	ldrb	r3, [r7, #14]
 800a61e:	2b05      	cmp	r3, #5
 800a620:	d168      	bne.n	800a6f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a622:	2303      	movs	r3, #3
 800a624:	73fb      	strb	r3, [r7, #15]
      break;
 800a626:	e065      	b.n	800a6f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	795b      	ldrb	r3, [r3, #5]
 800a62c:	2201      	movs	r2, #1
 800a62e:	9200      	str	r2, [sp, #0]
 800a630:	2200      	movs	r2, #0
 800a632:	2100      	movs	r1, #0
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f87f 	bl	800a738 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a640:	b29a      	uxth	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	220a      	movs	r2, #10
 800a64a:	761a      	strb	r2, [r3, #24]
      break;
 800a64c:	e055      	b.n	800a6fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	795b      	ldrb	r3, [r3, #5]
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fbe1 	bl	800ae1c <USBH_LL_GetURBState>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a65e:	7bbb      	ldrb	r3, [r7, #14]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d105      	bne.n	800a670 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	220d      	movs	r2, #13
 800a66c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a66e:	e043      	b.n	800a6f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a670:	7bbb      	ldrb	r3, [r7, #14]
 800a672:	2b02      	cmp	r3, #2
 800a674:	d103      	bne.n	800a67e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2209      	movs	r2, #9
 800a67a:	761a      	strb	r2, [r3, #24]
      break;
 800a67c:	e03c      	b.n	800a6f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	2b04      	cmp	r3, #4
 800a682:	d139      	bne.n	800a6f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	220b      	movs	r2, #11
 800a688:	761a      	strb	r2, [r3, #24]
      break;
 800a68a:	e035      	b.n	800a6f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	7e5b      	ldrb	r3, [r3, #25]
 800a690:	3301      	adds	r3, #1
 800a692:	b2da      	uxtb	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	765a      	strb	r2, [r3, #25]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	7e5b      	ldrb	r3, [r3, #25]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d806      	bhi.n	800a6ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a6ac:	e025      	b.n	800a6fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6b4:	2106      	movs	r1, #6
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	795b      	ldrb	r3, [r3, #5]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f90c 	bl	800a8e4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	791b      	ldrb	r3, [r3, #4]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f906 	bl	800a8e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a6de:	2302      	movs	r3, #2
 800a6e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6e2:	e00a      	b.n	800a6fa <USBH_HandleControl+0x2de>

    default:
      break;
 800a6e4:	bf00      	nop
 800a6e6:	e008      	b.n	800a6fa <USBH_HandleControl+0x2de>
      break;
 800a6e8:	bf00      	nop
 800a6ea:	e006      	b.n	800a6fa <USBH_HandleControl+0x2de>
      break;
 800a6ec:	bf00      	nop
 800a6ee:	e004      	b.n	800a6fa <USBH_HandleControl+0x2de>
      break;
 800a6f0:	bf00      	nop
 800a6f2:	e002      	b.n	800a6fa <USBH_HandleControl+0x2de>
      break;
 800a6f4:	bf00      	nop
 800a6f6:	e000      	b.n	800a6fa <USBH_HandleControl+0x2de>
      break;
 800a6f8:	bf00      	nop
  }

  return status;
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b088      	sub	sp, #32
 800a708:	af04      	add	r7, sp, #16
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	4613      	mov	r3, r2
 800a710:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a712:	79f9      	ldrb	r1, [r7, #7]
 800a714:	2300      	movs	r3, #0
 800a716:	9303      	str	r3, [sp, #12]
 800a718:	2308      	movs	r3, #8
 800a71a:	9302      	str	r3, [sp, #8]
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	2300      	movs	r3, #0
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	2300      	movs	r3, #0
 800a726:	2200      	movs	r2, #0
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f000 fb46 	bl	800adba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b088      	sub	sp, #32
 800a73c:	af04      	add	r7, sp, #16
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	4611      	mov	r1, r2
 800a744:	461a      	mov	r2, r3
 800a746:	460b      	mov	r3, r1
 800a748:	80fb      	strh	r3, [r7, #6]
 800a74a:	4613      	mov	r3, r2
 800a74c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a758:	2300      	movs	r3, #0
 800a75a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a75c:	7979      	ldrb	r1, [r7, #5]
 800a75e:	7e3b      	ldrb	r3, [r7, #24]
 800a760:	9303      	str	r3, [sp, #12]
 800a762:	88fb      	ldrh	r3, [r7, #6]
 800a764:	9302      	str	r3, [sp, #8]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	2301      	movs	r3, #1
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	2300      	movs	r3, #0
 800a770:	2200      	movs	r2, #0
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 fb21 	bl	800adba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b088      	sub	sp, #32
 800a786:	af04      	add	r7, sp, #16
 800a788:	60f8      	str	r0, [r7, #12]
 800a78a:	60b9      	str	r1, [r7, #8]
 800a78c:	4611      	mov	r1, r2
 800a78e:	461a      	mov	r2, r3
 800a790:	460b      	mov	r3, r1
 800a792:	80fb      	strh	r3, [r7, #6]
 800a794:	4613      	mov	r3, r2
 800a796:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a798:	7979      	ldrb	r1, [r7, #5]
 800a79a:	2300      	movs	r3, #0
 800a79c:	9303      	str	r3, [sp, #12]
 800a79e:	88fb      	ldrh	r3, [r7, #6]
 800a7a0:	9302      	str	r3, [sp, #8]
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	9301      	str	r3, [sp, #4]
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 fb03 	bl	800adba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a7b4:	2300      	movs	r3, #0

}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b088      	sub	sp, #32
 800a7c2:	af04      	add	r7, sp, #16
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	60b9      	str	r1, [r7, #8]
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	80fb      	strh	r3, [r7, #6]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7e2:	7979      	ldrb	r1, [r7, #5]
 800a7e4:	7e3b      	ldrb	r3, [r7, #24]
 800a7e6:	9303      	str	r3, [sp, #12]
 800a7e8:	88fb      	ldrh	r3, [r7, #6]
 800a7ea:	9302      	str	r3, [sp, #8]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	9301      	str	r3, [sp, #4]
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 fade 	bl	800adba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b088      	sub	sp, #32
 800a80c:	af04      	add	r7, sp, #16
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	4611      	mov	r1, r2
 800a814:	461a      	mov	r2, r3
 800a816:	460b      	mov	r3, r1
 800a818:	80fb      	strh	r3, [r7, #6]
 800a81a:	4613      	mov	r3, r2
 800a81c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a81e:	7979      	ldrb	r1, [r7, #5]
 800a820:	2300      	movs	r3, #0
 800a822:	9303      	str	r3, [sp, #12]
 800a824:	88fb      	ldrh	r3, [r7, #6]
 800a826:	9302      	str	r3, [sp, #8]
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	2301      	movs	r3, #1
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	2302      	movs	r3, #2
 800a832:	2201      	movs	r2, #1
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 fac0 	bl	800adba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af04      	add	r7, sp, #16
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	4608      	mov	r0, r1
 800a84e:	4611      	mov	r1, r2
 800a850:	461a      	mov	r2, r3
 800a852:	4603      	mov	r3, r0
 800a854:	70fb      	strb	r3, [r7, #3]
 800a856:	460b      	mov	r3, r1
 800a858:	70bb      	strb	r3, [r7, #2]
 800a85a:	4613      	mov	r3, r2
 800a85c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a85e:	7878      	ldrb	r0, [r7, #1]
 800a860:	78ba      	ldrb	r2, [r7, #2]
 800a862:	78f9      	ldrb	r1, [r7, #3]
 800a864:	8b3b      	ldrh	r3, [r7, #24]
 800a866:	9302      	str	r3, [sp, #8]
 800a868:	7d3b      	ldrb	r3, [r7, #20]
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	7c3b      	ldrb	r3, [r7, #16]
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	4603      	mov	r3, r0
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa53 	bl	800ad1e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b082      	sub	sp, #8
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	460b      	mov	r3, r1
 800a88c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a88e:	78fb      	ldrb	r3, [r7, #3]
 800a890:	4619      	mov	r1, r3
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fa72 	bl	800ad7c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f836 	bl	800a920 <USBH_GetFreePipe>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a8b8:	89fb      	ldrh	r3, [r7, #14]
 800a8ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d00a      	beq.n	800a8d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a8c2:	78fa      	ldrb	r2, [r7, #3]
 800a8c4:	89fb      	ldrh	r3, [r7, #14]
 800a8c6:	f003 030f 	and.w	r3, r3, #15
 800a8ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a8ce:	6879      	ldr	r1, [r7, #4]
 800a8d0:	33e0      	adds	r3, #224	; 0xe0
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	440b      	add	r3, r1
 800a8d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a8d8:	89fb      	ldrh	r3, [r7, #14]
 800a8da:	b2db      	uxtb	r3, r3
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	2b0f      	cmp	r3, #15
 800a8f4:	d80d      	bhi.n	800a912 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a8f6:	78fb      	ldrb	r3, [r7, #3]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	33e0      	adds	r3, #224	; 0xe0
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	685a      	ldr	r2, [r3, #4]
 800a902:	78fb      	ldrb	r3, [r7, #3]
 800a904:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a908:	6879      	ldr	r1, [r7, #4]
 800a90a:	33e0      	adds	r3, #224	; 0xe0
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	440b      	add	r3, r1
 800a910:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a928:	2300      	movs	r3, #0
 800a92a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a92c:	2300      	movs	r3, #0
 800a92e:	73fb      	strb	r3, [r7, #15]
 800a930:	e00f      	b.n	800a952 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a932:	7bfb      	ldrb	r3, [r7, #15]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	33e0      	adds	r3, #224	; 0xe0
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d102      	bne.n	800a94c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a946:	7bfb      	ldrb	r3, [r7, #15]
 800a948:	b29b      	uxth	r3, r3
 800a94a:	e007      	b.n	800a95c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
 800a94e:	3301      	adds	r3, #1
 800a950:	73fb      	strb	r3, [r7, #15]
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	2b0f      	cmp	r3, #15
 800a956:	d9ec      	bls.n	800a932 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a958:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a96c:	2201      	movs	r2, #1
 800a96e:	490e      	ldr	r1, [pc, #56]	; (800a9a8 <MX_USB_HOST_Init+0x40>)
 800a970:	480e      	ldr	r0, [pc, #56]	; (800a9ac <MX_USB_HOST_Init+0x44>)
 800a972:	f7fe fba7 	bl	80090c4 <USBH_Init>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d001      	beq.n	800a980 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a97c:	f7f6 fdea 	bl	8001554 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a980:	490b      	ldr	r1, [pc, #44]	; (800a9b0 <MX_USB_HOST_Init+0x48>)
 800a982:	480a      	ldr	r0, [pc, #40]	; (800a9ac <MX_USB_HOST_Init+0x44>)
 800a984:	f7fe fc2c 	bl	80091e0 <USBH_RegisterClass>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a98e:	f7f6 fde1 	bl	8001554 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a992:	4806      	ldr	r0, [pc, #24]	; (800a9ac <MX_USB_HOST_Init+0x44>)
 800a994:	f7fe fcb0 	bl	80092f8 <USBH_Start>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a99e:	f7f6 fdd9 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a9a2:	bf00      	nop
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	0800a9c9 	.word	0x0800a9c9
 800a9ac:	20000964 	.word	0x20000964
 800a9b0:	20000010 	.word	0x20000010

0800a9b4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a9b8:	4802      	ldr	r0, [pc, #8]	; (800a9c4 <MX_USB_HOST_Process+0x10>)
 800a9ba:	f7fe fcad 	bl	8009318 <USBH_Process>
}
 800a9be:	bf00      	nop
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	20000964 	.word	0x20000964

0800a9c8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	d819      	bhi.n	800aa10 <USBH_UserProcess+0x48>
 800a9dc:	a201      	add	r2, pc, #4	; (adr r2, 800a9e4 <USBH_UserProcess+0x1c>)
 800a9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e2:	bf00      	nop
 800a9e4:	0800aa11 	.word	0x0800aa11
 800a9e8:	0800aa01 	.word	0x0800aa01
 800a9ec:	0800aa11 	.word	0x0800aa11
 800a9f0:	0800aa09 	.word	0x0800aa09
 800a9f4:	0800a9f9 	.word	0x0800a9f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a9f8:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <USBH_UserProcess+0x58>)
 800a9fa:	2203      	movs	r2, #3
 800a9fc:	701a      	strb	r2, [r3, #0]
  break;
 800a9fe:	e008      	b.n	800aa12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aa00:	4b07      	ldr	r3, [pc, #28]	; (800aa20 <USBH_UserProcess+0x58>)
 800aa02:	2202      	movs	r2, #2
 800aa04:	701a      	strb	r2, [r3, #0]
  break;
 800aa06:	e004      	b.n	800aa12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aa08:	4b05      	ldr	r3, [pc, #20]	; (800aa20 <USBH_UserProcess+0x58>)
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	701a      	strb	r2, [r3, #0]
  break;
 800aa0e:	e000      	b.n	800aa12 <USBH_UserProcess+0x4a>

  default:
  break;
 800aa10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aa12:	bf00      	nop
 800aa14:	370c      	adds	r7, #12
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	20000d3c 	.word	0x20000d3c

0800aa24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b08a      	sub	sp, #40	; 0x28
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa2c:	f107 0314 	add.w	r3, r7, #20
 800aa30:	2200      	movs	r2, #0
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	605a      	str	r2, [r3, #4]
 800aa36:	609a      	str	r2, [r3, #8]
 800aa38:	60da      	str	r2, [r3, #12]
 800aa3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa44:	d147      	bne.n	800aad6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa46:	2300      	movs	r3, #0
 800aa48:	613b      	str	r3, [r7, #16]
 800aa4a:	4b25      	ldr	r3, [pc, #148]	; (800aae0 <HAL_HCD_MspInit+0xbc>)
 800aa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4e:	4a24      	ldr	r2, [pc, #144]	; (800aae0 <HAL_HCD_MspInit+0xbc>)
 800aa50:	f043 0301 	orr.w	r3, r3, #1
 800aa54:	6313      	str	r3, [r2, #48]	; 0x30
 800aa56:	4b22      	ldr	r3, [pc, #136]	; (800aae0 <HAL_HCD_MspInit+0xbc>)
 800aa58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5a:	f003 0301 	and.w	r3, r3, #1
 800aa5e:	613b      	str	r3, [r7, #16]
 800aa60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800aa62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800aa70:	f107 0314 	add.w	r3, r7, #20
 800aa74:	4619      	mov	r1, r3
 800aa76:	481b      	ldr	r0, [pc, #108]	; (800aae4 <HAL_HCD_MspInit+0xc0>)
 800aa78:	f7f7 fb82 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800aa7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800aa80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa82:	2302      	movs	r3, #2
 800aa84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa86:	2300      	movs	r3, #0
 800aa88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa8e:	230a      	movs	r3, #10
 800aa90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa92:	f107 0314 	add.w	r3, r7, #20
 800aa96:	4619      	mov	r1, r3
 800aa98:	4812      	ldr	r0, [pc, #72]	; (800aae4 <HAL_HCD_MspInit+0xc0>)
 800aa9a:	f7f7 fb71 	bl	8002180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa9e:	4b10      	ldr	r3, [pc, #64]	; (800aae0 <HAL_HCD_MspInit+0xbc>)
 800aaa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa2:	4a0f      	ldr	r2, [pc, #60]	; (800aae0 <HAL_HCD_MspInit+0xbc>)
 800aaa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa8:	6353      	str	r3, [r2, #52]	; 0x34
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60fb      	str	r3, [r7, #12]
 800aaae:	4b0c      	ldr	r3, [pc, #48]	; (800aae0 <HAL_HCD_MspInit+0xbc>)
 800aab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aab2:	4a0b      	ldr	r2, [pc, #44]	; (800aae0 <HAL_HCD_MspInit+0xbc>)
 800aab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aab8:	6453      	str	r3, [r2, #68]	; 0x44
 800aaba:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <HAL_HCD_MspInit+0xbc>)
 800aabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aabe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aac6:	2200      	movs	r2, #0
 800aac8:	2100      	movs	r1, #0
 800aaca:	2043      	movs	r0, #67	; 0x43
 800aacc:	f7f7 faf1 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aad0:	2043      	movs	r0, #67	; 0x43
 800aad2:	f7f7 fb0a 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aad6:	bf00      	nop
 800aad8:	3728      	adds	r7, #40	; 0x28
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	40023800 	.word	0x40023800
 800aae4:	40020000 	.word	0x40020000

0800aae8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fe ffed 	bl	8009ad6 <USBH_LL_IncTimer>
}
 800aafc:	bf00      	nop
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7ff f825 	bl	8009b62 <USBH_LL_Connect>
}
 800ab18:	bf00      	nop
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7ff f82e 	bl	8009b90 <USBH_LL_Disconnect>
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	70fb      	strb	r3, [r7, #3]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fe ffdf 	bl	8009b2a <USBH_LL_PortEnabled>
}
 800ab6c:	bf00      	nop
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fe ffdf 	bl	8009b46 <USBH_LL_PortDisabled>
}
 800ab88:	bf00      	nop
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d12a      	bne.n	800abf8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aba2:	4a18      	ldr	r2, [pc, #96]	; (800ac04 <USBH_LL_Init+0x74>)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a15      	ldr	r2, [pc, #84]	; (800ac04 <USBH_LL_Init+0x74>)
 800abae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abb2:	4b14      	ldr	r3, [pc, #80]	; (800ac04 <USBH_LL_Init+0x74>)
 800abb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800abb8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800abba:	4b12      	ldr	r3, [pc, #72]	; (800ac04 <USBH_LL_Init+0x74>)
 800abbc:	2208      	movs	r2, #8
 800abbe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800abc0:	4b10      	ldr	r3, [pc, #64]	; (800ac04 <USBH_LL_Init+0x74>)
 800abc2:	2201      	movs	r2, #1
 800abc4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abc6:	4b0f      	ldr	r3, [pc, #60]	; (800ac04 <USBH_LL_Init+0x74>)
 800abc8:	2200      	movs	r2, #0
 800abca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800abcc:	4b0d      	ldr	r3, [pc, #52]	; (800ac04 <USBH_LL_Init+0x74>)
 800abce:	2202      	movs	r2, #2
 800abd0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800abd2:	4b0c      	ldr	r3, [pc, #48]	; (800ac04 <USBH_LL_Init+0x74>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800abd8:	480a      	ldr	r0, [pc, #40]	; (800ac04 <USBH_LL_Init+0x74>)
 800abda:	f7f7 fca0 	bl	800251e <HAL_HCD_Init>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d001      	beq.n	800abe8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800abe4:	f7f6 fcb6 	bl	8001554 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800abe8:	4806      	ldr	r0, [pc, #24]	; (800ac04 <USBH_LL_Init+0x74>)
 800abea:	f7f8 f884 	bl	8002cf6 <HAL_HCD_GetCurrentFrame>
 800abee:	4603      	mov	r3, r0
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7fe ff60 	bl	8009ab8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	20000d40 	.word	0x20000d40

0800ac08 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7f7 fff3 	bl	8002c0a <HAL_HCD_Start>
 800ac24:	4603      	mov	r3, r0
 800ac26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 f95c 	bl	800aee8 <USBH_Get_USB_Status>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7f7 fffb 	bl	8002c50 <HAL_HCD_Stop>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 f941 	bl	800aee8 <USBH_Get_USB_Status>
 800ac66:	4603      	mov	r3, r0
 800ac68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7f8 f843 	bl	8002d12 <HAL_HCD_GetCurrentSpeed>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d00c      	beq.n	800acac <USBH_LL_GetSpeed+0x38>
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d80d      	bhi.n	800acb2 <USBH_LL_GetSpeed+0x3e>
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d002      	beq.n	800aca0 <USBH_LL_GetSpeed+0x2c>
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d003      	beq.n	800aca6 <USBH_LL_GetSpeed+0x32>
 800ac9e:	e008      	b.n	800acb2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800aca0:	2300      	movs	r3, #0
 800aca2:	73fb      	strb	r3, [r7, #15]
    break;
 800aca4:	e008      	b.n	800acb8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800aca6:	2301      	movs	r3, #1
 800aca8:	73fb      	strb	r3, [r7, #15]
    break;
 800acaa:	e005      	b.n	800acb8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800acac:	2302      	movs	r3, #2
 800acae:	73fb      	strb	r3, [r7, #15]
    break;
 800acb0:	e002      	b.n	800acb8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800acb2:	2301      	movs	r3, #1
 800acb4:	73fb      	strb	r3, [r7, #15]
    break;
 800acb6:	bf00      	nop
  }
  return  speed;
 800acb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b084      	sub	sp, #16
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acd8:	4618      	mov	r0, r3
 800acda:	f7f7 ffd6 	bl	8002c8a <HAL_HCD_ResetPort>
 800acde:	4603      	mov	r3, r0
 800ace0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 f8ff 	bl	800aee8 <USBH_Get_USB_Status>
 800acea:	4603      	mov	r3, r0
 800acec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acee:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	460b      	mov	r3, r1
 800ad02:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad0a:	78fa      	ldrb	r2, [r7, #3]
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7f7 ffdd 	bl	8002cce <HAL_HCD_HC_GetXferCount>
 800ad14:	4603      	mov	r3, r0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ad1e:	b590      	push	{r4, r7, lr}
 800ad20:	b089      	sub	sp, #36	; 0x24
 800ad22:	af04      	add	r7, sp, #16
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	4608      	mov	r0, r1
 800ad28:	4611      	mov	r1, r2
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	70fb      	strb	r3, [r7, #3]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70bb      	strb	r3, [r7, #2]
 800ad34:	4613      	mov	r3, r2
 800ad36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ad46:	787c      	ldrb	r4, [r7, #1]
 800ad48:	78ba      	ldrb	r2, [r7, #2]
 800ad4a:	78f9      	ldrb	r1, [r7, #3]
 800ad4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad4e:	9302      	str	r3, [sp, #8]
 800ad50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	4623      	mov	r3, r4
 800ad5e:	f7f7 fc40 	bl	80025e2 <HAL_HCD_HC_Init>
 800ad62:	4603      	mov	r3, r0
 800ad64:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f000 f8bd 	bl	800aee8 <USBH_Get_USB_Status>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd90      	pop	{r4, r7, pc}

0800ad7c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	460b      	mov	r3, r1
 800ad86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad96:	78fa      	ldrb	r2, [r7, #3]
 800ad98:	4611      	mov	r1, r2
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7f7 fcb0 	bl	8002700 <HAL_HCD_HC_Halt>
 800ada0:	4603      	mov	r3, r0
 800ada2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f000 f89e 	bl	800aee8 <USBH_Get_USB_Status>
 800adac:	4603      	mov	r3, r0
 800adae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800adba:	b590      	push	{r4, r7, lr}
 800adbc:	b089      	sub	sp, #36	; 0x24
 800adbe:	af04      	add	r7, sp, #16
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	4608      	mov	r0, r1
 800adc4:	4611      	mov	r1, r2
 800adc6:	461a      	mov	r2, r3
 800adc8:	4603      	mov	r3, r0
 800adca:	70fb      	strb	r3, [r7, #3]
 800adcc:	460b      	mov	r3, r1
 800adce:	70bb      	strb	r3, [r7, #2]
 800add0:	4613      	mov	r3, r2
 800add2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ade2:	787c      	ldrb	r4, [r7, #1]
 800ade4:	78ba      	ldrb	r2, [r7, #2]
 800ade6:	78f9      	ldrb	r1, [r7, #3]
 800ade8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800adec:	9303      	str	r3, [sp, #12]
 800adee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adf0:	9302      	str	r3, [sp, #8]
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	9301      	str	r3, [sp, #4]
 800adf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	4623      	mov	r3, r4
 800adfe:	f7f7 fca3 	bl	8002748 <HAL_HCD_HC_SubmitRequest>
 800ae02:	4603      	mov	r3, r0
 800ae04:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 f86d 	bl	800aee8 <USBH_Get_USB_Status>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd90      	pop	{r4, r7, pc}

0800ae1c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae2e:	78fa      	ldrb	r2, [r7, #3]
 800ae30:	4611      	mov	r1, r2
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7f7 ff37 	bl	8002ca6 <HAL_HCD_HC_GetURBState>
 800ae38:	4603      	mov	r3, r0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b082      	sub	sp, #8
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d103      	bne.n	800ae60 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ae58:	78fb      	ldrb	r3, [r7, #3]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f000 f870 	bl	800af40 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ae60:	20c8      	movs	r0, #200	; 0xc8
 800ae62:	f7f7 f827 	bl	8001eb4 <HAL_Delay>
  return USBH_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae86:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ae88:	78fb      	ldrb	r3, [r7, #3]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	212c      	movs	r1, #44	; 0x2c
 800ae8e:	fb01 f303 	mul.w	r3, r1, r3
 800ae92:	4413      	add	r3, r2
 800ae94:	333b      	adds	r3, #59	; 0x3b
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d009      	beq.n	800aeb0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ae9c:	78fb      	ldrb	r3, [r7, #3]
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	212c      	movs	r1, #44	; 0x2c
 800aea2:	fb01 f303 	mul.w	r3, r1, r3
 800aea6:	4413      	add	r3, r2
 800aea8:	3354      	adds	r3, #84	; 0x54
 800aeaa:	78ba      	ldrb	r2, [r7, #2]
 800aeac:	701a      	strb	r2, [r3, #0]
 800aeae:	e008      	b.n	800aec2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aeb0:	78fb      	ldrb	r3, [r7, #3]
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	212c      	movs	r1, #44	; 0x2c
 800aeb6:	fb01 f303 	mul.w	r3, r1, r3
 800aeba:	4413      	add	r3, r2
 800aebc:	3355      	adds	r3, #85	; 0x55
 800aebe:	78ba      	ldrb	r2, [r7, #2]
 800aec0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7f6 ffeb 	bl	8001eb4 <HAL_Delay>
}
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
	...

0800aee8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	4603      	mov	r3, r0
 800aef0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aef6:	79fb      	ldrb	r3, [r7, #7]
 800aef8:	2b03      	cmp	r3, #3
 800aefa:	d817      	bhi.n	800af2c <USBH_Get_USB_Status+0x44>
 800aefc:	a201      	add	r2, pc, #4	; (adr r2, 800af04 <USBH_Get_USB_Status+0x1c>)
 800aefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af02:	bf00      	nop
 800af04:	0800af15 	.word	0x0800af15
 800af08:	0800af1b 	.word	0x0800af1b
 800af0c:	0800af21 	.word	0x0800af21
 800af10:	0800af27 	.word	0x0800af27
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	73fb      	strb	r3, [r7, #15]
    break;
 800af18:	e00b      	b.n	800af32 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800af1a:	2302      	movs	r3, #2
 800af1c:	73fb      	strb	r3, [r7, #15]
    break;
 800af1e:	e008      	b.n	800af32 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800af20:	2301      	movs	r3, #1
 800af22:	73fb      	strb	r3, [r7, #15]
    break;
 800af24:	e005      	b.n	800af32 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800af26:	2302      	movs	r3, #2
 800af28:	73fb      	strb	r3, [r7, #15]
    break;
 800af2a:	e002      	b.n	800af32 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800af2c:	2302      	movs	r3, #2
 800af2e:	73fb      	strb	r3, [r7, #15]
    break;
 800af30:	bf00      	nop
  }
  return usb_status;
 800af32:	7bfb      	ldrb	r3, [r7, #15]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	4603      	mov	r3, r0
 800af48:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800af4a:	79fb      	ldrb	r3, [r7, #7]
 800af4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800af4e:	79fb      	ldrb	r3, [r7, #7]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d102      	bne.n	800af5a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800af54:	2300      	movs	r3, #0
 800af56:	73fb      	strb	r3, [r7, #15]
 800af58:	e001      	b.n	800af5e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800af5a:	2301      	movs	r3, #1
 800af5c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
 800af60:	461a      	mov	r2, r3
 800af62:	2101      	movs	r1, #1
 800af64:	4803      	ldr	r0, [pc, #12]	; (800af74 <MX_DriverVbusFS+0x34>)
 800af66:	f7f7 faa7 	bl	80024b8 <HAL_GPIO_WritePin>
}
 800af6a:	bf00      	nop
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	40020800 	.word	0x40020800

0800af78 <__errno>:
 800af78:	4b01      	ldr	r3, [pc, #4]	; (800af80 <__errno+0x8>)
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	20000030 	.word	0x20000030

0800af84 <__libc_init_array>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	4d0d      	ldr	r5, [pc, #52]	; (800afbc <__libc_init_array+0x38>)
 800af88:	4c0d      	ldr	r4, [pc, #52]	; (800afc0 <__libc_init_array+0x3c>)
 800af8a:	1b64      	subs	r4, r4, r5
 800af8c:	10a4      	asrs	r4, r4, #2
 800af8e:	2600      	movs	r6, #0
 800af90:	42a6      	cmp	r6, r4
 800af92:	d109      	bne.n	800afa8 <__libc_init_array+0x24>
 800af94:	4d0b      	ldr	r5, [pc, #44]	; (800afc4 <__libc_init_array+0x40>)
 800af96:	4c0c      	ldr	r4, [pc, #48]	; (800afc8 <__libc_init_array+0x44>)
 800af98:	f000 f93c 	bl	800b214 <_init>
 800af9c:	1b64      	subs	r4, r4, r5
 800af9e:	10a4      	asrs	r4, r4, #2
 800afa0:	2600      	movs	r6, #0
 800afa2:	42a6      	cmp	r6, r4
 800afa4:	d105      	bne.n	800afb2 <__libc_init_array+0x2e>
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
 800afa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afac:	4798      	blx	r3
 800afae:	3601      	adds	r6, #1
 800afb0:	e7ee      	b.n	800af90 <__libc_init_array+0xc>
 800afb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb6:	4798      	blx	r3
 800afb8:	3601      	adds	r6, #1
 800afba:	e7f2      	b.n	800afa2 <__libc_init_array+0x1e>
 800afbc:	0800b308 	.word	0x0800b308
 800afc0:	0800b308 	.word	0x0800b308
 800afc4:	0800b308 	.word	0x0800b308
 800afc8:	0800b30c 	.word	0x0800b30c

0800afcc <malloc>:
 800afcc:	4b02      	ldr	r3, [pc, #8]	; (800afd8 <malloc+0xc>)
 800afce:	4601      	mov	r1, r0
 800afd0:	6818      	ldr	r0, [r3, #0]
 800afd2:	f000 b88d 	b.w	800b0f0 <_malloc_r>
 800afd6:	bf00      	nop
 800afd8:	20000030 	.word	0x20000030

0800afdc <free>:
 800afdc:	4b02      	ldr	r3, [pc, #8]	; (800afe8 <free+0xc>)
 800afde:	4601      	mov	r1, r0
 800afe0:	6818      	ldr	r0, [r3, #0]
 800afe2:	f000 b819 	b.w	800b018 <_free_r>
 800afe6:	bf00      	nop
 800afe8:	20000030 	.word	0x20000030

0800afec <memcpy>:
 800afec:	440a      	add	r2, r1
 800afee:	4291      	cmp	r1, r2
 800aff0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aff4:	d100      	bne.n	800aff8 <memcpy+0xc>
 800aff6:	4770      	bx	lr
 800aff8:	b510      	push	{r4, lr}
 800affa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800affe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b002:	4291      	cmp	r1, r2
 800b004:	d1f9      	bne.n	800affa <memcpy+0xe>
 800b006:	bd10      	pop	{r4, pc}

0800b008 <memset>:
 800b008:	4402      	add	r2, r0
 800b00a:	4603      	mov	r3, r0
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d100      	bne.n	800b012 <memset+0xa>
 800b010:	4770      	bx	lr
 800b012:	f803 1b01 	strb.w	r1, [r3], #1
 800b016:	e7f9      	b.n	800b00c <memset+0x4>

0800b018 <_free_r>:
 800b018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b01a:	2900      	cmp	r1, #0
 800b01c:	d044      	beq.n	800b0a8 <_free_r+0x90>
 800b01e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b022:	9001      	str	r0, [sp, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	f1a1 0404 	sub.w	r4, r1, #4
 800b02a:	bfb8      	it	lt
 800b02c:	18e4      	addlt	r4, r4, r3
 800b02e:	f000 f8e3 	bl	800b1f8 <__malloc_lock>
 800b032:	4a1e      	ldr	r2, [pc, #120]	; (800b0ac <_free_r+0x94>)
 800b034:	9801      	ldr	r0, [sp, #4]
 800b036:	6813      	ldr	r3, [r2, #0]
 800b038:	b933      	cbnz	r3, 800b048 <_free_r+0x30>
 800b03a:	6063      	str	r3, [r4, #4]
 800b03c:	6014      	str	r4, [r2, #0]
 800b03e:	b003      	add	sp, #12
 800b040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b044:	f000 b8de 	b.w	800b204 <__malloc_unlock>
 800b048:	42a3      	cmp	r3, r4
 800b04a:	d908      	bls.n	800b05e <_free_r+0x46>
 800b04c:	6825      	ldr	r5, [r4, #0]
 800b04e:	1961      	adds	r1, r4, r5
 800b050:	428b      	cmp	r3, r1
 800b052:	bf01      	itttt	eq
 800b054:	6819      	ldreq	r1, [r3, #0]
 800b056:	685b      	ldreq	r3, [r3, #4]
 800b058:	1949      	addeq	r1, r1, r5
 800b05a:	6021      	streq	r1, [r4, #0]
 800b05c:	e7ed      	b.n	800b03a <_free_r+0x22>
 800b05e:	461a      	mov	r2, r3
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	b10b      	cbz	r3, 800b068 <_free_r+0x50>
 800b064:	42a3      	cmp	r3, r4
 800b066:	d9fa      	bls.n	800b05e <_free_r+0x46>
 800b068:	6811      	ldr	r1, [r2, #0]
 800b06a:	1855      	adds	r5, r2, r1
 800b06c:	42a5      	cmp	r5, r4
 800b06e:	d10b      	bne.n	800b088 <_free_r+0x70>
 800b070:	6824      	ldr	r4, [r4, #0]
 800b072:	4421      	add	r1, r4
 800b074:	1854      	adds	r4, r2, r1
 800b076:	42a3      	cmp	r3, r4
 800b078:	6011      	str	r1, [r2, #0]
 800b07a:	d1e0      	bne.n	800b03e <_free_r+0x26>
 800b07c:	681c      	ldr	r4, [r3, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	6053      	str	r3, [r2, #4]
 800b082:	4421      	add	r1, r4
 800b084:	6011      	str	r1, [r2, #0]
 800b086:	e7da      	b.n	800b03e <_free_r+0x26>
 800b088:	d902      	bls.n	800b090 <_free_r+0x78>
 800b08a:	230c      	movs	r3, #12
 800b08c:	6003      	str	r3, [r0, #0]
 800b08e:	e7d6      	b.n	800b03e <_free_r+0x26>
 800b090:	6825      	ldr	r5, [r4, #0]
 800b092:	1961      	adds	r1, r4, r5
 800b094:	428b      	cmp	r3, r1
 800b096:	bf04      	itt	eq
 800b098:	6819      	ldreq	r1, [r3, #0]
 800b09a:	685b      	ldreq	r3, [r3, #4]
 800b09c:	6063      	str	r3, [r4, #4]
 800b09e:	bf04      	itt	eq
 800b0a0:	1949      	addeq	r1, r1, r5
 800b0a2:	6021      	streq	r1, [r4, #0]
 800b0a4:	6054      	str	r4, [r2, #4]
 800b0a6:	e7ca      	b.n	800b03e <_free_r+0x26>
 800b0a8:	b003      	add	sp, #12
 800b0aa:	bd30      	pop	{r4, r5, pc}
 800b0ac:	20001044 	.word	0x20001044

0800b0b0 <sbrk_aligned>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	4e0e      	ldr	r6, [pc, #56]	; (800b0ec <sbrk_aligned+0x3c>)
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	6831      	ldr	r1, [r6, #0]
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	b911      	cbnz	r1, 800b0c2 <sbrk_aligned+0x12>
 800b0bc:	f000 f88c 	bl	800b1d8 <_sbrk_r>
 800b0c0:	6030      	str	r0, [r6, #0]
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	f000 f887 	bl	800b1d8 <_sbrk_r>
 800b0ca:	1c43      	adds	r3, r0, #1
 800b0cc:	d00a      	beq.n	800b0e4 <sbrk_aligned+0x34>
 800b0ce:	1cc4      	adds	r4, r0, #3
 800b0d0:	f024 0403 	bic.w	r4, r4, #3
 800b0d4:	42a0      	cmp	r0, r4
 800b0d6:	d007      	beq.n	800b0e8 <sbrk_aligned+0x38>
 800b0d8:	1a21      	subs	r1, r4, r0
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f000 f87c 	bl	800b1d8 <_sbrk_r>
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d101      	bne.n	800b0e8 <sbrk_aligned+0x38>
 800b0e4:	f04f 34ff 	mov.w	r4, #4294967295
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	bd70      	pop	{r4, r5, r6, pc}
 800b0ec:	20001048 	.word	0x20001048

0800b0f0 <_malloc_r>:
 800b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f4:	1ccd      	adds	r5, r1, #3
 800b0f6:	f025 0503 	bic.w	r5, r5, #3
 800b0fa:	3508      	adds	r5, #8
 800b0fc:	2d0c      	cmp	r5, #12
 800b0fe:	bf38      	it	cc
 800b100:	250c      	movcc	r5, #12
 800b102:	2d00      	cmp	r5, #0
 800b104:	4607      	mov	r7, r0
 800b106:	db01      	blt.n	800b10c <_malloc_r+0x1c>
 800b108:	42a9      	cmp	r1, r5
 800b10a:	d905      	bls.n	800b118 <_malloc_r+0x28>
 800b10c:	230c      	movs	r3, #12
 800b10e:	603b      	str	r3, [r7, #0]
 800b110:	2600      	movs	r6, #0
 800b112:	4630      	mov	r0, r6
 800b114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b118:	4e2e      	ldr	r6, [pc, #184]	; (800b1d4 <_malloc_r+0xe4>)
 800b11a:	f000 f86d 	bl	800b1f8 <__malloc_lock>
 800b11e:	6833      	ldr	r3, [r6, #0]
 800b120:	461c      	mov	r4, r3
 800b122:	bb34      	cbnz	r4, 800b172 <_malloc_r+0x82>
 800b124:	4629      	mov	r1, r5
 800b126:	4638      	mov	r0, r7
 800b128:	f7ff ffc2 	bl	800b0b0 <sbrk_aligned>
 800b12c:	1c43      	adds	r3, r0, #1
 800b12e:	4604      	mov	r4, r0
 800b130:	d14d      	bne.n	800b1ce <_malloc_r+0xde>
 800b132:	6834      	ldr	r4, [r6, #0]
 800b134:	4626      	mov	r6, r4
 800b136:	2e00      	cmp	r6, #0
 800b138:	d140      	bne.n	800b1bc <_malloc_r+0xcc>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	4631      	mov	r1, r6
 800b13e:	4638      	mov	r0, r7
 800b140:	eb04 0803 	add.w	r8, r4, r3
 800b144:	f000 f848 	bl	800b1d8 <_sbrk_r>
 800b148:	4580      	cmp	r8, r0
 800b14a:	d13a      	bne.n	800b1c2 <_malloc_r+0xd2>
 800b14c:	6821      	ldr	r1, [r4, #0]
 800b14e:	3503      	adds	r5, #3
 800b150:	1a6d      	subs	r5, r5, r1
 800b152:	f025 0503 	bic.w	r5, r5, #3
 800b156:	3508      	adds	r5, #8
 800b158:	2d0c      	cmp	r5, #12
 800b15a:	bf38      	it	cc
 800b15c:	250c      	movcc	r5, #12
 800b15e:	4629      	mov	r1, r5
 800b160:	4638      	mov	r0, r7
 800b162:	f7ff ffa5 	bl	800b0b0 <sbrk_aligned>
 800b166:	3001      	adds	r0, #1
 800b168:	d02b      	beq.n	800b1c2 <_malloc_r+0xd2>
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	442b      	add	r3, r5
 800b16e:	6023      	str	r3, [r4, #0]
 800b170:	e00e      	b.n	800b190 <_malloc_r+0xa0>
 800b172:	6822      	ldr	r2, [r4, #0]
 800b174:	1b52      	subs	r2, r2, r5
 800b176:	d41e      	bmi.n	800b1b6 <_malloc_r+0xc6>
 800b178:	2a0b      	cmp	r2, #11
 800b17a:	d916      	bls.n	800b1aa <_malloc_r+0xba>
 800b17c:	1961      	adds	r1, r4, r5
 800b17e:	42a3      	cmp	r3, r4
 800b180:	6025      	str	r5, [r4, #0]
 800b182:	bf18      	it	ne
 800b184:	6059      	strne	r1, [r3, #4]
 800b186:	6863      	ldr	r3, [r4, #4]
 800b188:	bf08      	it	eq
 800b18a:	6031      	streq	r1, [r6, #0]
 800b18c:	5162      	str	r2, [r4, r5]
 800b18e:	604b      	str	r3, [r1, #4]
 800b190:	4638      	mov	r0, r7
 800b192:	f104 060b 	add.w	r6, r4, #11
 800b196:	f000 f835 	bl	800b204 <__malloc_unlock>
 800b19a:	f026 0607 	bic.w	r6, r6, #7
 800b19e:	1d23      	adds	r3, r4, #4
 800b1a0:	1af2      	subs	r2, r6, r3
 800b1a2:	d0b6      	beq.n	800b112 <_malloc_r+0x22>
 800b1a4:	1b9b      	subs	r3, r3, r6
 800b1a6:	50a3      	str	r3, [r4, r2]
 800b1a8:	e7b3      	b.n	800b112 <_malloc_r+0x22>
 800b1aa:	6862      	ldr	r2, [r4, #4]
 800b1ac:	42a3      	cmp	r3, r4
 800b1ae:	bf0c      	ite	eq
 800b1b0:	6032      	streq	r2, [r6, #0]
 800b1b2:	605a      	strne	r2, [r3, #4]
 800b1b4:	e7ec      	b.n	800b190 <_malloc_r+0xa0>
 800b1b6:	4623      	mov	r3, r4
 800b1b8:	6864      	ldr	r4, [r4, #4]
 800b1ba:	e7b2      	b.n	800b122 <_malloc_r+0x32>
 800b1bc:	4634      	mov	r4, r6
 800b1be:	6876      	ldr	r6, [r6, #4]
 800b1c0:	e7b9      	b.n	800b136 <_malloc_r+0x46>
 800b1c2:	230c      	movs	r3, #12
 800b1c4:	603b      	str	r3, [r7, #0]
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	f000 f81c 	bl	800b204 <__malloc_unlock>
 800b1cc:	e7a1      	b.n	800b112 <_malloc_r+0x22>
 800b1ce:	6025      	str	r5, [r4, #0]
 800b1d0:	e7de      	b.n	800b190 <_malloc_r+0xa0>
 800b1d2:	bf00      	nop
 800b1d4:	20001044 	.word	0x20001044

0800b1d8 <_sbrk_r>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4d06      	ldr	r5, [pc, #24]	; (800b1f4 <_sbrk_r+0x1c>)
 800b1dc:	2300      	movs	r3, #0
 800b1de:	4604      	mov	r4, r0
 800b1e0:	4608      	mov	r0, r1
 800b1e2:	602b      	str	r3, [r5, #0]
 800b1e4:	f7f6 fd82 	bl	8001cec <_sbrk>
 800b1e8:	1c43      	adds	r3, r0, #1
 800b1ea:	d102      	bne.n	800b1f2 <_sbrk_r+0x1a>
 800b1ec:	682b      	ldr	r3, [r5, #0]
 800b1ee:	b103      	cbz	r3, 800b1f2 <_sbrk_r+0x1a>
 800b1f0:	6023      	str	r3, [r4, #0]
 800b1f2:	bd38      	pop	{r3, r4, r5, pc}
 800b1f4:	2000104c 	.word	0x2000104c

0800b1f8 <__malloc_lock>:
 800b1f8:	4801      	ldr	r0, [pc, #4]	; (800b200 <__malloc_lock+0x8>)
 800b1fa:	f000 b809 	b.w	800b210 <__retarget_lock_acquire_recursive>
 800b1fe:	bf00      	nop
 800b200:	20001050 	.word	0x20001050

0800b204 <__malloc_unlock>:
 800b204:	4801      	ldr	r0, [pc, #4]	; (800b20c <__malloc_unlock+0x8>)
 800b206:	f000 b804 	b.w	800b212 <__retarget_lock_release_recursive>
 800b20a:	bf00      	nop
 800b20c:	20001050 	.word	0x20001050

0800b210 <__retarget_lock_acquire_recursive>:
 800b210:	4770      	bx	lr

0800b212 <__retarget_lock_release_recursive>:
 800b212:	4770      	bx	lr

0800b214 <_init>:
 800b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b216:	bf00      	nop
 800b218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21a:	bc08      	pop	{r3}
 800b21c:	469e      	mov	lr, r3
 800b21e:	4770      	bx	lr

0800b220 <_fini>:
 800b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b222:	bf00      	nop
 800b224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b226:	bc08      	pop	{r3}
 800b228:	469e      	mov	lr, r3
 800b22a:	4770      	bx	lr
